
SysWbud.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b0  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000b5c  08000b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000b60  08000b60  00008b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000008  20000000  08000b64  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000028  20000008  20000008  00010008  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20000030  20000030  00010008  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000281e  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008b4  00000000  00000000  00012856  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000360  00000000  00000000  00013110  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  00013470  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000015cd  00000000  00000000  00013758  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001082  00000000  00000000  00014d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  00015da7  2**0
                  CONTENTS, READONLY
 15 .debug_frame  0000098c  00000000  00000000  00015e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000008 	.word	0x20000008
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000b44 	.word	0x08000b44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b44 	.word	0x08000b44
 80001e8:	2000000c 	.word	0x2000000c

080001ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <SystemInit+0x5c>)
 80001f2:	4a15      	ldr	r2, [pc, #84]	; (8000248 <SystemInit+0x5c>)
 80001f4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80001f8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80001fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <SystemInit+0x60>)
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <SystemInit+0x60>)
 8000204:	6812      	ldr	r2, [r2, #0]
 8000206:	f042 0201 	orr.w	r2, r2, #1
 800020a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <SystemInit+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <SystemInit+0x60>)
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <SystemInit+0x60>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800021c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000220:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <SystemInit+0x60>)
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <SystemInit+0x64>)
 8000226:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <SystemInit+0x60>)
 800022a:	4a08      	ldr	r2, [pc, #32]	; (800024c <SystemInit+0x60>)
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000232:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <SystemInit+0x60>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800023a:	f000 f80b 	bl	8000254 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800023e:	4b02      	ldr	r3, [pc, #8]	; (8000248 <SystemInit+0x5c>)
 8000240:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000244:	609a      	str	r2, [r3, #8]
#endif
}
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	40023800 	.word	0x40023800
 8000250:	24003010 	.word	0x24003010

08000254 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	2300      	movs	r3, #0
 8000260:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000262:	4b35      	ldr	r3, [pc, #212]	; (8000338 <SetSysClock+0xe4>)
 8000264:	4a34      	ldr	r2, [pc, #208]	; (8000338 <SetSysClock+0xe4>)
 8000266:	6812      	ldr	r2, [r2, #0]
 8000268:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800026c:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800026e:	4b32      	ldr	r3, [pc, #200]	; (8000338 <SetSysClock+0xe4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000276:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d103      	bne.n	800028c <SetSysClock+0x38>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800028a:	d1f0      	bne.n	800026e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800028c:	4b2a      	ldr	r3, [pc, #168]	; (8000338 <SetSysClock+0xe4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000298:	2301      	movs	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	e001      	b.n	80002a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d102      	bne.n	80002ae <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002a8:	4b23      	ldr	r3, [pc, #140]	; (8000338 <SetSysClock+0xe4>)
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SetSysClock+0xe8>)
 80002ac:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <SetSysClock+0xe4>)
 80002b0:	4a21      	ldr	r2, [pc, #132]	; (8000338 <SetSysClock+0xe4>)
 80002b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80002b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002b8:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <SetSysClock+0xec>)
 80002bc:	4a20      	ldr	r2, [pc, #128]	; (8000340 <SetSysClock+0xec>)
 80002be:	6812      	ldr	r2, [r2, #0]
 80002c0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80002c4:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002c6:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <SetSysClock+0xe4>)
 80002c8:	4a1b      	ldr	r2, [pc, #108]	; (8000338 <SetSysClock+0xe4>)
 80002ca:	6892      	ldr	r2, [r2, #8]
 80002cc:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <SetSysClock+0xe4>)
 80002d0:	4a19      	ldr	r2, [pc, #100]	; (8000338 <SetSysClock+0xe4>)
 80002d2:	6892      	ldr	r2, [r2, #8]
 80002d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002d8:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <SetSysClock+0xe4>)
 80002dc:	4a16      	ldr	r2, [pc, #88]	; (8000338 <SetSysClock+0xe4>)
 80002de:	6892      	ldr	r2, [r2, #8]
 80002e0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002e4:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <SetSysClock+0xe4>)
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <SetSysClock+0xe4>)
 80002ea:	6812      	ldr	r2, [r2, #0]
 80002ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002f0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002f2:	bf00      	nop
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <SetSysClock+0xe4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <SetSysClock+0xf0>)
 8000302:	f240 7205 	movw	r2, #1797	; 0x705
 8000306:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <SetSysClock+0xe4>)
 800030a:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <SetSysClock+0xe4>)
 800030c:	6892      	ldr	r2, [r2, #8]
 800030e:	f022 0203 	bic.w	r2, r2, #3
 8000312:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <SetSysClock+0xe4>)
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <SetSysClock+0xe4>)
 8000318:	6892      	ldr	r2, [r2, #8]
 800031a:	f042 0202 	orr.w	r2, r2, #2
 800031e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000320:	bf00      	nop
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <SetSysClock+0xe4>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f003 030c 	and.w	r3, r3, #12
 800032a:	2b08      	cmp	r3, #8
 800032c:	d1f9      	bne.n	8000322 <SetSysClock+0xce>
    {
    }
}
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40023800 	.word	0x40023800
 800033c:	07405a08 	.word	0x07405a08
 8000340:	40007000 	.word	0x40007000
 8000344:	40023c00 	.word	0x40023c00

08000348 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
}
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <HardFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000360:	e7fe      	b.n	8000360 <MemManage_Handler+0x4>
 8000362:	bf00      	nop

08000364 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000368:	e7fe      	b.n	8000368 <BusFault_Handler+0x4>
 800036a:	bf00      	nop

0800036c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000370:	e7fe      	b.n	8000370 <UsageFault_Handler+0x4>
 8000372:	bf00      	nop

08000374 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
}
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
}
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
}
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a4:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80003e4 <LoopFillZerobss+0x16>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003aa:	f000 b804 	b.w	80003b6 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 80003b0:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003b2:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003b4:	3104      	adds	r1, #4

080003b6 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003b6:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 80003ba:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003bc:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003be:	f4ff aff6 	bcc.w	80003ae <CopyDataInit>
  ldr  r2, =_sbss
 80003c2:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 80003c4:	f000 b803 	b.w	80003ce <LoopFillZerobss>

080003c8 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003c8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003ca:	f842 3b04 	str.w	r3, [r2], #4

080003ce <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80003d0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d2:	f4ff aff9 	bcc.w	80003c8 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003d6:	f7ff ff09 	bl	80001ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 fb8d 	bl	8000af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003de:	f000 f80f 	bl	8000400 <main>
  bx  lr    
 80003e2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e4:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003e8:	08000b64 	.word	0x08000b64
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003f0:	20000008 	.word	0x20000008
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003f4:	20000008 	.word	0x20000008
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003f8:	20000030 	.word	0x20000030

080003fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003fc:	f7ff bffe 	b.w	80003fc <ADC_IRQHandler>

08000400 <main>:
#include "stm32f4xx.h"
#include "stm32f429i_discovery.h"
#include "DHT11.h"

int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
  int i = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  while (1)
  {
	  DHT11Result dht11Result=DHT11_read();
 800040a:	463b      	mov	r3, r7
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fa01 	bl	8000814 <DHT11_read>
	  if(dht11Result.ERROR_CODE==DHT11_TIME_OUT){
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d101      	bne.n	800041c <main+0x1c>
		  i=0;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
	  }
	  i++;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3301      	adds	r3, #1
 8000420:	60fb      	str	r3, [r7, #12]
  }
 8000422:	e7f2      	b.n	800040a <main+0xa>

08000424 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
  {
  }
 8000428:	e7fe      	b.n	8000428 <sEE_TIMEOUT_UserCallback+0x4>
 800042a:	bf00      	nop

0800042c <DHT11InitTimer>:
 *      Author: krzys
 */

#include "DHT11.h"

void DHT11InitTimer(){
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	// enable timer 2 clock
	if((RCC->APB1ENR & RCC_APB1Periph_TIM2)==0){
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <DHT11InitTimer+0x60>)
 8000432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d105      	bne.n	8000448 <DHT11InitTimer+0x1c>
		RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <DHT11InitTimer+0x60>)
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <DHT11InitTimer+0x60>)
 8000440:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000442:	f042 0201 	orr.w	r2, r2, #1
 8000446:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// clear configuration to reset value timer is simple up-counter
	// using sclk by default
	TIM2->CR1 =0x0000;
 8000448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044c:	2200      	movs	r2, #0
 800044e:	801a      	strh	r2, [r3, #0]

	// set prescaler to make counter counting in uS
	TIM2->PSC=(uint16_t)(SystemCoreClock/2000000);
 8000450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <DHT11InitTimer+0x64>)
 8000456:	6811      	ldr	r1, [r2, #0]
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <DHT11InitTimer+0x68>)
 800045a:	fba2 0201 	umull	r0, r2, r2, r1
 800045e:	0cd2      	lsrs	r2, r2, #19
 8000460:	b292      	uxth	r2, r2
 8000462:	851a      	strh	r2, [r3, #40]	; 0x28

	// auto-reload if full overflow
	TIM2->ARR=0xffffffff;
 8000464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000468:	f04f 32ff 	mov.w	r2, #4294967295
 800046c:	62da      	str	r2, [r3, #44]	; 0x2c

	// load new values
	TIM2->EGR|=0x01;
 800046e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000476:	8a92      	ldrh	r2, [r2, #20]
 8000478:	b292      	uxth	r2, r2
 800047a:	f042 0201 	orr.w	r2, r2, #1
 800047e:	b292      	uxth	r2, r2
 8000480:	829a      	strh	r2, [r3, #20]
}
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40023800 	.word	0x40023800
 8000490:	20000000 	.word	0x20000000
 8000494:	431bde83 	.word	0x431bde83

08000498 <DHT11SentStartRequest>:

void DHT11SentStartRequest(){
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	// high logic level by default (pull-up line)
	GPIOG->ODR |= (1<<5);
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <DHT11SentStartRequest+0xcc>)
 800049e:	4a31      	ldr	r2, [pc, #196]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004a0:	6952      	ldr	r2, [r2, #20]
 80004a2:	f042 0220 	orr.w	r2, r2, #32
 80004a6:	615a      	str	r2, [r3, #20]

	// set as output
	GPIOG->MODER |= (uint32_t)(1<<10);
 80004a8:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004aa:	4a2e      	ldr	r2, [pc, #184]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004b2:	601a      	str	r2, [r3, #0]
	GPIOG->MODER &= ~((uint32_t)(1<<11));
 80004b4:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004b8:	6812      	ldr	r2, [r2, #0]
 80004ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80004be:	601a      	str	r2, [r3, #0]

	// high speed output enable
	GPIOG->OSPEEDR|=(uint32_t)(1<<11);
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004c2:	4a28      	ldr	r2, [pc, #160]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004c4:	6892      	ldr	r2, [r2, #8]
 80004c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004ca:	609a      	str	r2, [r3, #8]
	GPIOG->OSPEEDR&= ~((uint32_t)(1<<10));
 80004cc:	4b25      	ldr	r3, [pc, #148]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004ce:	4a25      	ldr	r2, [pc, #148]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004d0:	6892      	ldr	r2, [r2, #8]
 80004d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004d6:	609a      	str	r2, [r3, #8]

	// open-drain
	GPIOG->OTYPER |= ((uint32_t)(1<<5));
 80004d8:	4b22      	ldr	r3, [pc, #136]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004da:	4a22      	ldr	r2, [pc, #136]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004dc:	6852      	ldr	r2, [r2, #4]
 80004de:	f042 0220 	orr.w	r2, r2, #32
 80004e2:	605a      	str	r2, [r3, #4]

	// no pull-up (external pull-up)
	GPIOG->PUPDR &= ~((uint32_t)(1<<10));
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004e6:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004e8:	68d2      	ldr	r2, [r2, #12]
 80004ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ee:	60da      	str	r2, [r3, #12]
	GPIOG->PUPDR &= ~((uint32_t)(1<<11));
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <DHT11SentStartRequest+0xcc>)
 80004f4:	68d2      	ldr	r2, [r2, #12]
 80004f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80004fa:	60da      	str	r2, [r3, #12]

	// reset value
	TIM2->CNT = 0x00;
 80004fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	; 0x24

	// start timer
	TIM2->CR1 |= 0x01;
 8000504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050c:	8812      	ldrh	r2, [r2, #0]
 800050e:	b292      	uxth	r2, r2
 8000510:	f042 0201 	orr.w	r2, r2, #1
 8000514:	b292      	uxth	r2, r2
 8000516:	801a      	strh	r2, [r3, #0]

	// wait 20 ms
	while(TIM2->CNT<20000){
 8000518:	e000      	b.n	800051c <DHT11SentStartRequest+0x84>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800051a:	bf00      	nop
 800051c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000522:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000526:	429a      	cmp	r2, r3
 8000528:	d9f7      	bls.n	800051a <DHT11SentStartRequest+0x82>
		__NOP();
	}

	// pull data line down && wait 20 ms
	GPIOG->ODR&=~((uint32_t)(1<<5));
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <DHT11SentStartRequest+0xcc>)
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <DHT11SentStartRequest+0xcc>)
 800052e:	6952      	ldr	r2, [r2, #20]
 8000530:	f022 0220 	bic.w	r2, r2, #32
 8000534:	615a      	str	r2, [r3, #20]
	TIM2->CNT = 0x00;
 8000536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<20000){
 800053e:	e000      	b.n	8000542 <DHT11SentStartRequest+0xaa>
 8000540:	bf00      	nop
 8000542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000548:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800054c:	429a      	cmp	r2, r3
 800054e:	d9f7      	bls.n	8000540 <DHT11SentStartRequest+0xa8>
		__NOP();
	}

	// pull data line up
	GPIOG->ODR |=((uint32_t)(1<<5));
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <DHT11SentStartRequest+0xcc>)
 8000552:	4a04      	ldr	r2, [pc, #16]	; (8000564 <DHT11SentStartRequest+0xcc>)
 8000554:	6952      	ldr	r2, [r2, #20]
 8000556:	f042 0220 	orr.w	r2, r2, #32
 800055a:	615a      	str	r2, [r3, #20]
}
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021800 	.word	0x40021800

08000568 <DHT11RecvData>:
uint32_t DHT11RecvData(uint32_t * intervalsArray){
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	// enter to input mode (external pullup)
	//GPIOG->MODER &= ~((uint32_t)(1<<11));
	//GPIOG->MODER &= ~((uint32_t)(1<<10));

	uint16_t state=GPIOG->IDR & (1<<5);
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <DHT11RecvData+0xdc>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f003 0320 	and.w	r3, r3, #32
 800057a:	81fb      	strh	r3, [r7, #14]

	// start timer
	TIM2->CR1 |= 0x01;
 800057c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000584:	8812      	ldrh	r2, [r2, #0]
 8000586:	b292      	uxth	r2, r2
 8000588:	f042 0201 	orr.w	r2, r2, #1
 800058c:	b292      	uxth	r2, r2
 800058e:	801a      	strh	r2, [r3, #0]

	// listen for new data
	int dataNumber;
	for(dataNumber=0;dataNumber<42;dataNumber++){
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	e04b      	b.n	800062e <DHT11RecvData+0xc6>
		// reset timer value
		TIM2->CNT=0;
 8000596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	; 0x24
		//start timer
		TIM2->CR1|=0x01;
 800059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a6:	8812      	ldrh	r2, [r2, #0]
 80005a8:	b292      	uxth	r2, r2
 80005aa:	f042 0201 	orr.w	r2, r2, #1
 80005ae:	b292      	uxth	r2, r2
 80005b0:	801a      	strh	r2, [r3, #0]

		// wait for logical level change or timeout
		while(TIM2->CNT<500 && (GPIOG->IDR & (1<<5))==state){
 80005b2:	e000      	b.n	80005b6 <DHT11RecvData+0x4e>
 80005b4:	bf00      	nop
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005c0:	d206      	bcs.n	80005d0 <DHT11RecvData+0x68>
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <DHT11RecvData+0xdc>)
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	f003 0220 	and.w	r2, r3, #32
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d0f1      	beq.n	80005b4 <DHT11RecvData+0x4c>
			__NOP();
		}

		// stop timer
		TIM2->CR1 &= ~0x00000001;
 80005d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d8:	8812      	ldrh	r2, [r2, #0]
 80005da:	b292      	uxth	r2, r2
 80005dc:	f022 0201 	bic.w	r2, r2, #1
 80005e0:	b292      	uxth	r2, r2
 80005e2:	801a      	strh	r2, [r3, #0]

		// if timeout return error code
		if(TIM2->CNT>=500){
 80005e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ee:	d306      	bcc.n	80005fe <DHT11RecvData+0x96>
			if(dataNumber==0){
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <DHT11RecvData+0x92>
				return DHT11_NO_RESPONSE;
 80005f6:	2302      	movs	r3, #2
 80005f8:	e01d      	b.n	8000636 <DHT11RecvData+0xce>
			}
			else{
				return DHT11_TIME_OUT;
 80005fa:	2303      	movs	r3, #3
 80005fc:	e01b      	b.n	8000636 <DHT11RecvData+0xce>
			}
		}

		// read new logical state
		state=GPIOG->IDR & (1<<5);
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <DHT11RecvData+0xdc>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	b29b      	uxth	r3, r3
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	81fb      	strh	r3, [r7, #14]

		if(!state){
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d108      	bne.n	8000622 <DHT11RecvData+0xba>
			// save active state time
			intervalsArray[dataNumber]=TIM2->CNT;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	e002      	b.n	8000628 <DHT11RecvData+0xc0>
		}
		else
		{
			// ignore inactive states
			dataNumber--;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
	// start timer
	TIM2->CR1 |= 0x01;

	// listen for new data
	int dataNumber;
	for(dataNumber=0;dataNumber<42;dataNumber++){
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	3301      	adds	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	2b29      	cmp	r3, #41	; 0x29
 8000632:	ddb0      	ble.n	8000596 <DHT11RecvData+0x2e>
		{
			// ignore inactive states
			dataNumber--;
		}
	}
	return DHT11_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021800 	.word	0x40021800

08000648 <DHT11DecodeByte>:
uint32_t DHT11DecodeByte(uint32_t * intervals,uint8_t * result){
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	int index;
	*result=0;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	for(index=0;index<8;index++){
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	e030      	b.n	80006c0 <DHT11DecodeByte+0x78>
		if(intervals[index]>10 && intervals[index]<40){
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b0a      	cmp	r3, #10
 800066a:	d90d      	bls.n	8000688 <DHT11DecodeByte+0x40>
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b27      	cmp	r3, #39	; 0x27
 8000678:	d806      	bhi.n	8000688 <DHT11DecodeByte+0x40>
			*result=(*result)<<1;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	e018      	b.n	80006ba <DHT11DecodeByte+0x72>
		}
		else if(intervals[index]>50 && intervals[index]<90){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b32      	cmp	r3, #50	; 0x32
 8000694:	d90f      	bls.n	80006b6 <DHT11DecodeByte+0x6e>
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b59      	cmp	r3, #89	; 0x59
 80006a2:	d808      	bhi.n	80006b6 <DHT11DecodeByte+0x6e>
			*result=((*result)<<1) + 0x01;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	e001      	b.n	80006ba <DHT11DecodeByte+0x72>
		}
		else{
			return DHT11_DECODE_ERROR;
 80006b6:	2304      	movs	r3, #4
 80006b8:	e006      	b.n	80006c8 <DHT11DecodeByte+0x80>
	return DHT11_OK;
}
uint32_t DHT11DecodeByte(uint32_t * intervals,uint8_t * result){
	int index;
	*result=0;
	for(index=0;index<8;index++){
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b07      	cmp	r3, #7
 80006c4:	ddcb      	ble.n	800065e <DHT11DecodeByte+0x16>
		}
		else{
			return DHT11_DECODE_ERROR;
		}
	}
	return DHT11_OK;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DHT11Decode>:
void DHT11Decode(uint32_t * intervals,DHT11Result * result){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	uint8_t index;

	// decode RH integral
	uint8_t RH_integral=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73bb      	strb	r3, [r7, #14]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[2],&RH_integral);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f103 0208 	add.w	r2, r3, #8
 80006e8:	f107 030e 	add.w	r3, r7, #14
 80006ec:	4610      	mov	r0, r2
 80006ee:	4619      	mov	r1, r3
 80006f0:	f7ff ffaa 	bl	8000648 <DHT11DecodeByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d000      	beq.n	8000706 <DHT11Decode+0x32>
 8000704:	e081      	b.n	800080a <DHT11Decode+0x136>

	// decode RH decimal
	uint8_t RH_decimal=0;
 8000706:	2300      	movs	r3, #0
 8000708:	737b      	strb	r3, [r7, #13]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[10],&RH_decimal);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000710:	f107 030d 	add.w	r3, r7, #13
 8000714:	4610      	mov	r0, r2
 8000716:	4619      	mov	r1, r3
 8000718:	f7ff ff96 	bl	8000648 <DHT11DecodeByte>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d000      	beq.n	800072e <DHT11Decode+0x5a>
 800072c:	e06d      	b.n	800080a <DHT11Decode+0x136>

	//decode T integral
	uint8_t T_integral=0;
 800072e:	2300      	movs	r3, #0
 8000730:	733b      	strb	r3, [r7, #12]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[18],&T_integral);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4610      	mov	r0, r2
 800073e:	4619      	mov	r1, r3
 8000740:	f7ff ff82 	bl	8000648 <DHT11DecodeByte>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d000      	beq.n	8000756 <DHT11Decode+0x82>
 8000754:	e059      	b.n	800080a <DHT11Decode+0x136>

	//decode T decimal
	uint8_t T_decimal=0;
 8000756:	2300      	movs	r3, #0
 8000758:	72fb      	strb	r3, [r7, #11]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[26],&T_decimal);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000760:	f107 030b 	add.w	r3, r7, #11
 8000764:	4610      	mov	r0, r2
 8000766:	4619      	mov	r1, r3
 8000768:	f7ff ff6e 	bl	8000648 <DHT11DecodeByte>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <DHT11Decode+0xaa>
 800077c:	e045      	b.n	800080a <DHT11Decode+0x136>

	//decode CRC
	uint8_t CRC_value=0;
 800077e:	2300      	movs	r3, #0
 8000780:	72bb      	strb	r3, [r7, #10]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[34],&CRC_value);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8000788:	f107 030a 	add.w	r3, r7, #10
 800078c:	4610      	mov	r0, r2
 800078e:	4619      	mov	r1, r3
 8000790:	f7ff ff5a 	bl	8000648 <DHT11DecodeByte>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d000      	beq.n	80007a6 <DHT11Decode+0xd2>
 80007a4:	e031      	b.n	800080a <DHT11Decode+0x136>

	//check CRC
	uint8_t countedCRC=T_integral+T_decimal+RH_decimal+RH_integral;
 80007a6:	7b3a      	ldrb	r2, [r7, #12]
 80007a8:	7afb      	ldrb	r3, [r7, #11]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	4413      	add	r3, r2
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	7bbb      	ldrb	r3, [r7, #14]
 80007b6:	4413      	add	r3, r2
 80007b8:	73fb      	strb	r3, [r7, #15]
	if(countedCRC!=CRC_value){
 80007ba:	7abb      	ldrb	r3, [r7, #10]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d003      	beq.n	80007ca <DHT11Decode+0xf6>
		result->ERROR_CODE=DHT11_CRC_ERROR;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2201      	movs	r2, #1
 80007c6:	609a      	str	r2, [r3, #8]
		return;
 80007c8:	e01f      	b.n	800080a <DHT11Decode+0x136>
	}

	//join decimal with integral (compability with dht-22)
	result->humidity=(float)(RH_decimal/10+RH_integral);
 80007ca:	7b7a      	ldrb	r2, [r7, #13]
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <DHT11Decode+0x13c>)
 80007ce:	fba3 1302 	umull	r1, r3, r3, r2
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	7bbb      	ldrb	r3, [r7, #14]
 80007da:	4413      	add	r3, r2
 80007dc:	ee07 3a10 	vmov	s14, r3
 80007e0:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	edc3 7a01 	vstr	s15, [r3, #4]
	result->temperature=(float)(T_decimal/10+T_integral);
 80007ea:	7afa      	ldrb	r2, [r7, #11]
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <DHT11Decode+0x13c>)
 80007ee:	fba3 1302 	umull	r1, r3, r3, r2
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	7b3b      	ldrb	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	ee07 3a10 	vmov	s14, r3
 8000800:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	edc3 7a00 	vstr	s15, [r3]
}
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	cccccccd 	.word	0xcccccccd

08000814 <DHT11_read>:
DHT11Result DHT11_read(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b0b0      	sub	sp, #192	; 0xc0
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	uint32_t intervals[42];

	// check if port D enable if not enable it
	if((RCC->AHB1ENR & RCC_AHB1Periph_GPIOG)==0){
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <DHT11_read+0x70>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000824:	2b00      	cmp	r3, #0
 8000826:	d105      	bne.n	8000834 <DHT11_read+0x20>
		RCC->AHB1ENR |= RCC_AHB1Periph_GPIOG;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <DHT11_read+0x70>)
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <DHT11_read+0x70>)
 800082c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800082e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000832:	631a      	str	r2, [r3, #48]	; 0x30

	DHT11Result result;


	// HOW TO DISABLE INTERRUPTS ?
	DHT11InitTimer();
 8000834:	f7ff fdfa 	bl	800042c <DHT11InitTimer>
	DHT11SentStartRequest();
 8000838:	f7ff fe2e 	bl	8000498 <DHT11SentStartRequest>
	result.ERROR_CODE=DHT11RecvData(intervals);
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fe91 	bl	8000568 <DHT11RecvData>
 8000846:	4603      	mov	r3, r0
 8000848:	617b      	str	r3, [r7, #20]

	// disable timer2
	TIM2->CR1 &= ~0x00000001;
 800084a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800084e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000852:	8812      	ldrh	r2, [r2, #0]
 8000854:	b292      	uxth	r2, r2
 8000856:	f022 0201 	bic.w	r2, r2, #1
 800085a:	b292      	uxth	r2, r2
 800085c:	801a      	strh	r2, [r3, #0]

	DHT11Decode(intervals,&result);
 800085e:	f107 0218 	add.w	r2, r7, #24
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4610      	mov	r0, r2
 8000868:	4619      	mov	r1, r3
 800086a:	f7ff ff33 	bl	80006d4 <DHT11Decode>

	return result;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f107 020c 	add.w	r2, r7, #12
 8000874:	ca07      	ldmia	r2, {r0, r1, r2}
 8000876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	37c0      	adds	r7, #192	; 0xc0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <DMA1_Stream4_IRQHandler+0x60>)
 800088e:	4917      	ldr	r1, [pc, #92]	; (80008ec <DMA1_Stream4_IRQHandler+0x64>)
 8000890:	f000 f8c8 	bl	8000a24 <DMA_GetFlagStatus>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d024      	beq.n	80008e4 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <DMA1_Stream4_IRQHandler+0x60>)
 800089c:	2100      	movs	r1, #0
 800089e:	f000 f8a5 	bl	80009ec <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 80008a2:	4811      	ldr	r0, [pc, #68]	; (80008e8 <DMA1_Stream4_IRQHandler+0x60>)
 80008a4:	4911      	ldr	r1, [pc, #68]	; (80008ec <DMA1_Stream4_IRQHandler+0x64>)
 80008a6:	f000 f8f9 	bl	8000a9c <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <DMA1_Stream4_IRQHandler+0x68>)
 80008ac:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80008b0:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 80008b2:	e008      	b.n	80008c6 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <DMA1_Stream4_IRQHandler+0x68>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1e59      	subs	r1, r3, #1
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <DMA1_Stream4_IRQHandler+0x68>)
 80008bc:	6011      	str	r1, [r2, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <DMA1_Stream4_IRQHandler+0x3e>
 80008c2:	f7ff fdaf 	bl	8000424 <sEE_TIMEOUT_UserCallback>
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <DMA1_Stream4_IRQHandler+0x6c>)
 80008c8:	490b      	ldr	r1, [pc, #44]	; (80008f8 <DMA1_Stream4_IRQHandler+0x70>)
 80008ca:	f000 f85b 	bl	8000984 <I2C_GetFlagStatus>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0ef      	beq.n	80008b4 <DMA1_Stream4_IRQHandler+0x2c>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <DMA1_Stream4_IRQHandler+0x6c>)
 80008d6:	2101      	movs	r1, #1
 80008d8:	f000 f834 	bl	8000944 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <DMA1_Stream4_IRQHandler+0x74>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
  }
}
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40026070 	.word	0x40026070
 80008ec:	20000020 	.word	0x20000020
 80008f0:	20000004 	.word	0x20000004
 80008f4:	40005c00 	.word	0x40005c00
 80008f8:	10000004 	.word	0x10000004
 80008fc:	20000024 	.word	0x20000024

08000900 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <DMA1_Stream2_IRQHandler+0x38>)
 8000906:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800090a:	f000 f88b 	bl	8000a24 <DMA_GetFlagStatus>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d010      	beq.n	8000936 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <DMA1_Stream2_IRQHandler+0x3c>)
 8000916:	2101      	movs	r1, #1
 8000918:	f000 f814 	bl	8000944 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <DMA1_Stream2_IRQHandler+0x38>)
 800091e:	2100      	movs	r1, #0
 8000920:	f000 f864 	bl	80009ec <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <DMA1_Stream2_IRQHandler+0x38>)
 8000926:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 800092a:	f000 f8b7 	bl	8000a9c <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <DMA1_Stream2_IRQHandler+0x40>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2200      	movs	r2, #0
 8000934:	801a      	strh	r2, [r3, #0]
  }
}
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40026040 	.word	0x40026040
 800093c:	40005c00 	.word	0x40005c00
 8000940:	2000002c 	.word	0x2000002c

08000944 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d008      	beq.n	8000968 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000960:	b29a      	uxth	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	801a      	strh	r2, [r3, #0]
 8000966:	e007      	b.n	8000978 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	b29b      	uxth	r3, r3
 800096e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	801a      	strh	r2, [r3, #0]
  }
}
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	0f1b      	lsrs	r3, r3, #28
 80009a2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80009aa:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3314      	adds	r3, #20
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e005      	b.n	80009c6 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3318      	adds	r3, #24
 80009c4:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80009d2:	2301      	movs	r3, #1
 80009d4:	75fb      	strb	r3, [r7, #23]
 80009d6:	e001      	b.n	80009dc <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	371c      	adds	r7, #28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f043 0201 	orr.w	r2, r3, #1
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	e005      	b.n	8000a18 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f023 0201 	bic.w	r2, r3, #1
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
  }
}
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <DMA_GetFlagStatus+0x6c>)
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d802      	bhi.n	8000a44 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <DMA_GetFlagStatus+0x70>)
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	e001      	b.n	8000a48 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <DMA_GetFlagStatus+0x74>)
 8000a46:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e002      	b.n	8000a60 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000a66:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000a6a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000a76:	2301      	movs	r3, #1
 8000a78:	75fb      	strb	r3, [r7, #23]
 8000a7a:	e001      	b.n	8000a80 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	371c      	adds	r7, #28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	4002640f 	.word	0x4002640f
 8000a94:	40026000 	.word	0x40026000
 8000a98:	40026400 	.word	0x40026400

08000a9c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <DMA_ClearFlag+0x50>)
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d802      	bhi.n	8000ab4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <DMA_ClearFlag+0x54>)
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e001      	b.n	8000ab8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <DMA_ClearFlag+0x58>)
 8000ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000ac8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	60d3      	str	r3, [r2, #12]
 8000ad0:	e006      	b.n	8000ae0 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000ad8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	6093      	str	r3, [r2, #8]
  }    
}
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	4002640f 	.word	0x4002640f
 8000af0:	40026000 	.word	0x40026000
 8000af4:	40026400 	.word	0x40026400

08000af8 <__libc_init_array>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <__libc_init_array+0x3c>)
 8000afc:	4d0e      	ldr	r5, [pc, #56]	; (8000b38 <__libc_init_array+0x40>)
 8000afe:	1aed      	subs	r5, r5, r3
 8000b00:	10ad      	asrs	r5, r5, #2
 8000b02:	2400      	movs	r4, #0
 8000b04:	461e      	mov	r6, r3
 8000b06:	42ac      	cmp	r4, r5
 8000b08:	d004      	beq.n	8000b14 <__libc_init_array+0x1c>
 8000b0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000b0e:	4790      	blx	r2
 8000b10:	3401      	adds	r4, #1
 8000b12:	e7f8      	b.n	8000b06 <__libc_init_array+0xe>
 8000b14:	f000 f816 	bl	8000b44 <_init>
 8000b18:	4d08      	ldr	r5, [pc, #32]	; (8000b3c <__libc_init_array+0x44>)
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <__libc_init_array+0x48>)
 8000b1c:	1aed      	subs	r5, r5, r3
 8000b1e:	10ad      	asrs	r5, r5, #2
 8000b20:	2400      	movs	r4, #0
 8000b22:	461e      	mov	r6, r3
 8000b24:	42ac      	cmp	r4, r5
 8000b26:	d004      	beq.n	8000b32 <__libc_init_array+0x3a>
 8000b28:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000b2c:	4790      	blx	r2
 8000b2e:	3401      	adds	r4, #1
 8000b30:	e7f8      	b.n	8000b24 <__libc_init_array+0x2c>
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	08000b5c 	.word	0x08000b5c
 8000b38:	08000b5c 	.word	0x08000b5c
 8000b3c:	08000b60 	.word	0x08000b60
 8000b40:	08000b5c 	.word	0x08000b5c

08000b44 <_init>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	bf00      	nop
 8000b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4a:	bc08      	pop	{r3}
 8000b4c:	469e      	mov	lr, r3
 8000b4e:	4770      	bx	lr

08000b50 <_fini>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	bf00      	nop
 8000b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b56:	bc08      	pop	{r3}
 8000b58:	469e      	mov	lr, r3
 8000b5a:	4770      	bx	lr
