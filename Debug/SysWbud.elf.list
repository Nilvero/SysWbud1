
SysWbud.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  080001b0  080001b0  000081b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce0  080069e8  080069e8  0000e9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080086c8  080086c8  000106c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080086cc  080086cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000012c  20000000  080086d0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e30  2000012c  2000012c  0001812c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000f5c  20000f5c  0001812c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0001812c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c5ea  00000000  00000000  0001815c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002628  00000000  00000000  00024746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e28  00000000  00000000  00026d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  00027b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005e48  00000000  00000000  00028800  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004899  00000000  00000000  0002e648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  00032ee1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002d40  00000000  00000000  00032f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080069cc 	.word	0x080069cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080069cc 	.word	0x080069cc
 80001ec:	20000130 	.word	0x20000130

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x5c>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <SystemInit+0x5c>)
 8000b3c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000b40:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <SystemInit+0x60>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x60>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	f042 0201 	orr.w	r2, r2, #1
 8000b52:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <SystemInit+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <SystemInit+0x60>)
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <SystemInit+0x60>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <SystemInit+0x60>)
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SystemInit+0x64>)
 8000b6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SystemInit+0x60>)
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <SystemInit+0x60>)
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b7a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <SystemInit+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b82:	f000 f80b 	bl	8000b9c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b86:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <SystemInit+0x5c>)
 8000b88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	24003010 	.word	0x24003010

08000b9c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <SetSysClock+0xe4>)
 8000bac:	4a34      	ldr	r2, [pc, #208]	; (8000c80 <SetSysClock+0xe4>)
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bb4:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <SetSysClock+0xe4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <SetSysClock+0x38>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bd2:	d1f0      	bne.n	8000bb6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <SetSysClock+0xe4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000be0:	2301      	movs	r3, #1
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	e001      	b.n	8000bea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d102      	bne.n	8000bf6 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SetSysClock+0xe4>)
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <SetSysClock+0xe8>)
 8000bf4:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <SetSysClock+0xe4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <SetSysClock+0xe4>)
 8000bfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c00:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <SetSysClock+0xec>)
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <SetSysClock+0xec>)
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000c0c:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <SetSysClock+0xe4>)
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <SetSysClock+0xe4>)
 8000c12:	6892      	ldr	r2, [r2, #8]
 8000c14:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <SetSysClock+0xe4>)
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <SetSysClock+0xe4>)
 8000c1a:	6892      	ldr	r2, [r2, #8]
 8000c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c20:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <SetSysClock+0xe4>)
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <SetSysClock+0xe4>)
 8000c26:	6892      	ldr	r2, [r2, #8]
 8000c28:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000c2c:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <SetSysClock+0xe4>)
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <SetSysClock+0xe4>)
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c38:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c3a:	bf00      	nop
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <SetSysClock+0xe4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0f9      	beq.n	8000c3c <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <SetSysClock+0xf0>)
 8000c4a:	f240 7205 	movw	r2, #1797	; 0x705
 8000c4e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <SetSysClock+0xe4>)
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <SetSysClock+0xe4>)
 8000c54:	6892      	ldr	r2, [r2, #8]
 8000c56:	f022 0203 	bic.w	r2, r2, #3
 8000c5a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <SetSysClock+0xe4>)
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <SetSysClock+0xe4>)
 8000c60:	6892      	ldr	r2, [r2, #8]
 8000c62:	f042 0202 	orr.w	r2, r2, #2
 8000c66:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000c68:	bf00      	nop
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SetSysClock+0xe4>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d1f9      	bne.n	8000c6a <SetSysClock+0xce>
    {
    }
}
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40023800 	.word	0x40023800
 8000c84:	07405a08 	.word	0x07405a08
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
}
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000ca0:	e7fe      	b.n	8000ca0 <HardFault_Handler+0x4>
 8000ca2:	bf00      	nop

08000ca4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>
 8000caa:	bf00      	nop

08000cac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000cb0:	e7fe      	b.n	8000cb0 <BusFault_Handler+0x4>
 8000cb2:	bf00      	nop

08000cb4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>
 8000cba:	bf00      	nop

08000cbc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
}
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
}
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
}
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce0:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000d20 <LoopFillZerobss+0x16>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ce4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ce6:	f000 b804 	b.w	8000cf2 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000cec:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cee:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cf0:	3104      	adds	r1, #4

08000cf2 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000cf6:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cf8:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cfa:	f4ff aff6 	bcc.w	8000cea <CopyDataInit>
  ldr  r2, =_sbss
 8000cfe:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000d00:	f000 b803 	b.w	8000d0a <LoopFillZerobss>

08000d04 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d04:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d06:	f842 3b04 	str.w	r3, [r2], #4

08000d0a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000d0c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d0e:	f4ff aff9 	bcc.w	8000d04 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ff0f 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f004 fd61 	bl	80057dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f000 f87d 	bl	8000e18 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d20:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000d24:	080086d0 	.word	0x080086d0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d2c:	2000012c 	.word	0x2000012c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000d30:	2000012c 	.word	0x2000012c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d34:	20000f5c 	.word	0x20000f5c

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	f7ff bffe 	b.w	8000d38 <ADC_IRQHandler>

08000d3c <EXTI0_IRQHandler>:
	//GPIO_Init(0,pinConfiguration);

}

void EXTI0_IRQHandler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0



}
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da0b      	bge.n	8000d74 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000d5c:	490d      	ldr	r1, [pc, #52]	; (8000d94 <NVIC_SetPriority+0x4c>)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	3b04      	subs	r3, #4
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	761a      	strb	r2, [r3, #24]
 8000d72:	e009      	b.n	8000d88 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000d74:	4908      	ldr	r1, [pc, #32]	; (8000d98 <NVIC_SetPriority+0x50>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	3a01      	subs	r2, #1
 8000db8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000dba:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f7ff ffc2 	bl	8000d48 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <delayDec>:

#define MEASURE_INTERVAL_MS 2000
static unsigned counter;

void delayDec(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    if(counter>0){
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <delayDec+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <delayDec+0x18>
        counter--;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <delayDec+0x28>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1e5a      	subs	r2, r3, #1
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <delayDec+0x28>)
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e005      	b.n	8000e04 <delayDec+0x24>
    }
    else{
		collectDataFromSensors();
 8000df8:	f000 faf6 	bl	80013e8 <collectDataFromSensors>
    	counter=MEASURE_INTERVAL_MS;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <delayDec+0x28>)
 8000dfe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e02:	601a      	str	r2, [r3, #0]
    }
}
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000148 	.word	0x20000148

08000e0c <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
   delayDec();
 8000e10:	f7ff ffe6 	bl	8000de0 <delayDec>
}
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop

08000e18 <main>:

int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
   LPS331_INIT();
 8000e1c:	f000 fd3c 	bl	8001898 <LPS331_INIT>
   LCDinit();
 8000e20:	f000 fbf6 	bl	8001610 <LCDinit>
   DMArecordPushInit();
 8000e24:	f000 fb82 	bl	800152c <DMArecordPushInit>
   results.sampleNumber=0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <main+0x38>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]

   counter=MEASURE_INTERVAL_MS;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <main+0x3c>)
 8000e30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e34:	601a      	str	r2, [r3, #0]

   SysTick_Config(SystemCoreClock / 1000);
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <main+0x40>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <main+0x44>)
 8000e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e40:	099b      	lsrs	r3, r3, #6
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ffaa 	bl	8000d9c <SysTick_Config>
  /* Infinite loop */
   while (1)
   {
	  MainMenu();
 8000e48:	f000 fbfc 	bl	8001644 <MainMenu>
   }
 8000e4c:	e7fc      	b.n	8000e48 <main+0x30>
 8000e4e:	bf00      	nop
 8000e50:	20000164 	.word	0x20000164
 8000e54:	20000148 	.word	0x20000148
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	10624dd3 	.word	0x10624dd3

08000e60 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  while (1)
  {
  }
 8000e64:	e7fe      	b.n	8000e64 <sEE_TIMEOUT_UserCallback+0x4>
 8000e66:	bf00      	nop

08000e68 <ds18b20PinConfig>:
 */

#include "ds18b20.h"
#include "SharedFunctions.h"

void ds18b20PinConfig(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	// high logic level by default (pull-up line)
	GPIOG->ODR |= (1<<4);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e70:	6952      	ldr	r2, [r2, #20]
 8000e72:	f042 0210 	orr.w	r2, r2, #16
 8000e76:	615a      	str	r2, [r3, #20]

	// set as output
	GPIOG->MODER |= (uint32_t)(1<<8);
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e7a:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e82:	601a      	str	r2, [r3, #0]
	GPIOG->MODER &= ~((uint32_t)(1<<9));
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e8e:	601a      	str	r2, [r3, #0]

	// high speed output enable
	GPIOG->OSPEEDR|=(uint32_t)(1<<9);
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e94:	6892      	ldr	r2, [r2, #8]
 8000e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e9a:	609a      	str	r2, [r3, #8]
	GPIOG->OSPEEDR&= ~((uint32_t)(1<<8));
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000ea0:	6892      	ldr	r2, [r2, #8]
 8000ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ea6:	609a      	str	r2, [r3, #8]

	// open-drain
	GPIOG->OTYPER |= ((uint32_t)(1<<4));
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000eac:	6852      	ldr	r2, [r2, #4]
 8000eae:	f042 0210 	orr.w	r2, r2, #16
 8000eb2:	605a      	str	r2, [r3, #4]

	// no pull-up (external pull-up)
	GPIOG->PUPDR &= ~((uint32_t)(1<<8));
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000eb8:	68d2      	ldr	r2, [r2, #12]
 8000eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ebe:	60da      	str	r2, [r3, #12]
	GPIOG->PUPDR &= ~((uint32_t)(1<<9));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <ds18b20PinConfig+0x6c>)
 8000ec4:	68d2      	ldr	r2, [r2, #12]
 8000ec6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eca:	60da      	str	r2, [r3, #12]
}
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40021800 	.word	0x40021800

08000ed8 <ds18b20Reset>:

void ds18b20Reset(){
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	// pull data line down && wait 480us
	GPIOG->ODR&=~((uint32_t)(1<<4));
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <ds18b20Reset+0x3c>)
 8000ede:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <ds18b20Reset+0x3c>)
 8000ee0:	6952      	ldr	r2, [r2, #20]
 8000ee2:	f022 0210 	bic.w	r2, r2, #16
 8000ee6:	615a      	str	r2, [r3, #20]
	TIM2->CNT = 0x00;
 8000ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<480){
 8000ef0:	e000      	b.n	8000ef4 <ds18b20Reset+0x1c>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ef2:	bf00      	nop
 8000ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000efe:	d3f8      	bcc.n	8000ef2 <ds18b20Reset+0x1a>
		__NOP();
	}

	// let line to pull up
	GPIOG->ODR|=((uint32_t)(1<<4));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <ds18b20Reset+0x3c>)
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <ds18b20Reset+0x3c>)
 8000f04:	6952      	ldr	r2, [r2, #20]
 8000f06:	f042 0210 	orr.w	r2, r2, #16
 8000f0a:	615a      	str	r2, [r3, #20]
}
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	40021800 	.word	0x40021800

08000f18 <ds18b20WaitForPresenceResponce>:
/*
 * 1-OK 0-NoRespoce
 */
uint8_t ds18b20WaitForPresenceResponce(){
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
	uint8_t detected=0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71fb      	strb	r3, [r7, #7]
	TIM2->CNT = 0x00;
 8000f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<480){
 8000f2a:	e008      	b.n	8000f3e <ds18b20WaitForPresenceResponce+0x26>
		if(!(GPIOG->IDR&(1<<4))){
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <ds18b20WaitForPresenceResponce+0x40>)
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <ds18b20WaitForPresenceResponce+0x24>
			detected=1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	bf00      	nop
 * 1-OK 0-NoRespoce
 */
uint8_t ds18b20WaitForPresenceResponce(){
	uint8_t detected=0;
	TIM2->CNT = 0x00;
	while(TIM2->CNT<480){
 8000f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000f48:	d3f0      	bcc.n	8000f2c <ds18b20WaitForPresenceResponce+0x14>
		if(!(GPIOG->IDR&(1<<4))){
			detected=1;
		}
		__NOP();
	}
	return detected;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40021800 	.word	0x40021800

08000f5c <ds18b20WriteBit>:

void ds18b20WriteBit(uint8_t state){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	// pull line down for 1 us
	GPIOG->ODR&=~((uint32_t)(1<<4));
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <ds18b20WriteBit+0x6c>)
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <ds18b20WriteBit+0x6c>)
 8000f6a:	6952      	ldr	r2, [r2, #20]
 8000f6c:	f022 0210 	bic.w	r2, r2, #16
 8000f70:	615a      	str	r2, [r3, #20]
	TIM2->CNT = 0x00;
 8000f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<1){
 8000f7a:	e000      	b.n	8000f7e <ds18b20WriteBit+0x22>
 8000f7c:	bf00      	nop
 8000f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f9      	beq.n	8000f7c <ds18b20WriteBit+0x20>
		__NOP();
	}

	// if one let line to pull up
	if(state){
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <ds18b20WriteBit+0x3e>
		GPIOG->ODR|=((uint32_t)(1<<4));
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <ds18b20WriteBit+0x6c>)
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <ds18b20WriteBit+0x6c>)
 8000f92:	6952      	ldr	r2, [r2, #20]
 8000f94:	f042 0210 	orr.w	r2, r2, #16
 8000f98:	615a      	str	r2, [r3, #20]
	}

	// wait 60 us to let sensor catch state
	TIM2->CNT=0x00;
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<60){
 8000fa2:	e000      	b.n	8000fa6 <ds18b20WriteBit+0x4a>
 8000fa4:	bf00      	nop
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2b3b      	cmp	r3, #59	; 0x3b
 8000fae:	d9f9      	bls.n	8000fa4 <ds18b20WriteBit+0x48>
		__NOP();
	}

	// release line
	GPIOG->ODR|=((uint32_t)(1<<4));
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <ds18b20WriteBit+0x6c>)
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <ds18b20WriteBit+0x6c>)
 8000fb4:	6952      	ldr	r2, [r2, #20]
 8000fb6:	f042 0210 	orr.w	r2, r2, #16
 8000fba:	615a      	str	r2, [r3, #20]
}
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021800 	.word	0x40021800

08000fcc <ds18b20ReadBit>:

uint8_t ds18b20ReadBit(void){
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t bit=0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]

	// pull line down for 1 us
	GPIOG->ODR&=~((uint32_t)(1<<4));
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <ds18b20ReadBit+0x88>)
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <ds18b20ReadBit+0x88>)
 8000fda:	6952      	ldr	r2, [r2, #20]
 8000fdc:	f022 0210 	bic.w	r2, r2, #16
 8000fe0:	615a      	str	r2, [r3, #20]
	TIM2->CNT = 0x00;
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<1){
 8000fea:	e000      	b.n	8000fee <ds18b20ReadBit+0x22>
 8000fec:	bf00      	nop
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f9      	beq.n	8000fec <ds18b20ReadBit+0x20>
		__NOP();
	}

	//release line
	GPIOG->ODR|=((uint32_t)(1<<4));
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <ds18b20ReadBit+0x88>)
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <ds18b20ReadBit+0x88>)
 8000ffc:	6952      	ldr	r2, [r2, #20]
 8000ffe:	f042 0210 	orr.w	r2, r2, #16
 8001002:	615a      	str	r2, [r3, #20]

	// wait 14 uS to enter sample area
	TIM2->CNT = 0x00;
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<14){
 800100c:	e000      	b.n	8001010 <ds18b20ReadBit+0x44>
 800100e:	bf00      	nop
 8001010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	2b0d      	cmp	r3, #13
 8001018:	d9f9      	bls.n	800100e <ds18b20ReadBit+0x42>
		__NOP();
	}

	// make sample
	if(GPIOG->IDR &(1<<4)){
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <ds18b20ReadBit+0x88>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <ds18b20ReadBit+0x60>
		bit=1;
 8001026:	2301      	movs	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e001      	b.n	8001030 <ds18b20ReadBit+0x64>
	}
	else{
		bit=0;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
	}
	// wait 45 uS to end bit reading procedure
	TIM2->CNT = 0x00;
 8001030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<45){
 8001038:	e000      	b.n	800103c <ds18b20ReadBit+0x70>
 800103a:	bf00      	nop
 800103c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2b2c      	cmp	r3, #44	; 0x2c
 8001044:	d9f9      	bls.n	800103a <ds18b20ReadBit+0x6e>
		__NOP();
	}

	return bit;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021800 	.word	0x40021800

08001058 <ds18b20WriteByte>:

void ds18b20WriteByte(uint8_t byte){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t index=0;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
	while(index<8){
 8001066:	e00c      	b.n	8001082 <ds18b20WriteByte+0x2a>
		ds18b20WriteBit(byte&0x01);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff73 	bl	8000f5c <ds18b20WriteBit>
		byte=byte>>1;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	085b      	lsrs	r3, r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
		index++;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	3301      	adds	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
	return bit;
}

void ds18b20WriteByte(uint8_t byte){
	uint8_t index=0;
	while(index<8){
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	2b07      	cmp	r3, #7
 8001086:	d9ef      	bls.n	8001068 <ds18b20WriteByte+0x10>
		ds18b20WriteBit(byte&0x01);
		byte=byte>>1;
		index++;
	}
}
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop

08001090 <ds18b20ReadByte>:

uint8_t ds18b20ReadByte(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	uint8_t index=0;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
	uint8_t value=0;
 800109a:	2300      	movs	r3, #0
 800109c:	71bb      	strb	r3, [r7, #6]
	while(index<8){
 800109e:	e00e      	b.n	80010be <ds18b20ReadByte+0x2e>
		value = value>>1;
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	71bb      	strb	r3, [r7, #6]
		value |= (ds18b20ReadBit()<<7);
 80010a6:	f7ff ff91 	bl	8000fcc <ds18b20ReadBit>
 80010aa:	4603      	mov	r3, r0
 80010ac:	01db      	lsls	r3, r3, #7
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	71bb      	strb	r3, [r7, #6]
		index++;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	3301      	adds	r3, #1
 80010bc:	71fb      	strb	r3, [r7, #7]
}

uint8_t ds18b20ReadByte(void){
	uint8_t index=0;
	uint8_t value=0;
	while(index<8){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d9ed      	bls.n	80010a0 <ds18b20ReadByte+0x10>
		value = value>>1;
		value |= (ds18b20ReadBit()<<7);
		index++;
	}
	return value;
 80010c4:	79bb      	ldrb	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop

080010d0 <ds18b20_read>:

ds18b20Result ds18b20_read(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	// check if port D enable if not enable it
	if((RCC->AHB1ENR & RCC_AHB1Periph_GPIOG)==0){
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <ds18b20_read+0x118>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <ds18b20_read+0x20>
		RCC->AHB1ENR |= RCC_AHB1Periph_GPIOG;
 80010e4:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <ds18b20_read+0x118>)
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <ds18b20_read+0x118>)
 80010e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ee:	631a      	str	r2, [r3, #48]	; 0x30
	}

	ds18b20Result result;

	InitTimerTIM2ToCountInUc();
 80010f0:	f000 f8d4 	bl	800129c <InitTimerTIM2ToCountInUc>

	// start timer
	TIM2->CR1 |= 0x01;
 80010f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	b292      	uxth	r2, r2
 8001100:	f042 0201 	orr.w	r2, r2, #1
 8001104:	b292      	uxth	r2, r2
 8001106:	801a      	strh	r2, [r3, #0]

	ds18b20PinConfig();
 8001108:	f7ff feae 	bl	8000e68 <ds18b20PinConfig>
	ds18b20Reset();
 800110c:	f7ff fee4 	bl	8000ed8 <ds18b20Reset>
	if(ds18b20WaitForPresenceResponce()==0){
 8001110:	f7ff ff02 	bl	8000f18 <ds18b20WaitForPresenceResponce>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <ds18b20_read+0x5e>
		result.ERROR_CODE=ds18b20_NO_RESPONSE;
 800111a:	2301      	movs	r3, #1
 800111c:	613b      	str	r3, [r7, #16]
		return result;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001128:	e883 0003 	stmia.w	r3, {r0, r1}
 800112c:	e057      	b.n	80011de <ds18b20_read+0x10e>
	}

	// command send to all devices on line (only one on line)
	ds18b20WriteByte(DS18B20_CMD_SKIPROM);
 800112e:	20cc      	movs	r0, #204	; 0xcc
 8001130:	f7ff ff92 	bl	8001058 <ds18b20WriteByte>

	// read scratchpad command
	ds18b20WriteByte(DS18B20_CMD_RSCRATCHPAD);
 8001134:	20be      	movs	r0, #190	; 0xbe
 8001136:	f7ff ff8f 	bl	8001058 <ds18b20WriteByte>

	// read two registers
	uint8_t temperature_l = ds18b20ReadByte();
 800113a:	f7ff ffa9 	bl	8001090 <ds18b20ReadByte>
 800113e:	4603      	mov	r3, r0
 8001140:	75fb      	strb	r3, [r7, #23]
    uint8_t temperature_h = ds18b20ReadByte();
 8001142:	f7ff ffa5 	bl	8001090 <ds18b20ReadByte>
 8001146:	4603      	mov	r3, r0
 8001148:	75bb      	strb	r3, [r7, #22]

    // combine data
    result.temperature=(((0x07 &temperature_h) << 8) + temperature_l ) * 0.0625;
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	021a      	lsls	r2, r3, #8
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	4413      	add	r3, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f99c 	bl	8000494 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <ds18b20_read+0x11c>)
 800116a:	f7ff f9f9 	bl	8000560 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fc8d 	bl	8000a94 <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]

    // check sign
    if(temperature_h & (1<<4)){
 800117e:	7dbb      	ldrb	r3, [r7, #22]
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <ds18b20_read+0xc4>
    	result.temperature*=-1;
 8001188:	edd7 7a03 	vldr	s15, [r7, #12]
 800118c:	eef1 7a67 	vneg.f32	s15, s15
 8001190:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    // check if value out of range
    if(result.temperature<-55 || result.temperature>125){
 8001194:	ed97 7a03 	vldr	s14, [r7, #12]
 8001198:	eddf 7a15 	vldr	s15, [pc, #84]	; 80011f0 <ds18b20_read+0x120>
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d408      	bmi.n	80011b8 <ds18b20_read+0xe8>
 80011a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011aa:	eddf 7a12 	vldr	s15, [pc, #72]	; 80011f4 <ds18b20_read+0x124>
 80011ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	dd09      	ble.n	80011cc <ds18b20_read+0xfc>
    	result.ERROR_CODE=ds18b20_STRANGE_VALUE;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
    	return result;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80011ca:	e008      	b.n	80011de <ds18b20_read+0x10e>
    }

    result.ERROR_CODE=ds18b20_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
    return result;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011da:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	3fb00000 	.word	0x3fb00000
 80011f0:	c25c0000 	.word	0xc25c0000
 80011f4:	42fa0000 	.word	0x42fa0000

080011f8 <ds18b20_beginConversion>:

uint8_t ds18b20_beginConversion(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	// check if port D enable if not enable it
	if((RCC->AHB1ENR & RCC_AHB1Periph_GPIOG)==0){
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <ds18b20_beginConversion+0x5c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <ds18b20_beginConversion+0x1c>
		RCC->AHB1ENR |= RCC_AHB1Periph_GPIOG;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <ds18b20_beginConversion+0x5c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <ds18b20_beginConversion+0x5c>)
 800120c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800120e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
	}

	InitTimerTIM2ToCountInUc();
 8001214:	f000 f842 	bl	800129c <InitTimerTIM2ToCountInUc>

	// start timer
	TIM2->CR1 |= 0x01;
 8001218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001220:	8812      	ldrh	r2, [r2, #0]
 8001222:	b292      	uxth	r2, r2
 8001224:	f042 0201 	orr.w	r2, r2, #1
 8001228:	b292      	uxth	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]

	ds18b20PinConfig();
 800122c:	f7ff fe1c 	bl	8000e68 <ds18b20PinConfig>
	ds18b20Reset();
 8001230:	f7ff fe52 	bl	8000ed8 <ds18b20Reset>
	if(ds18b20WaitForPresenceResponce()==0){
 8001234:	f7ff fe70 	bl	8000f18 <ds18b20WaitForPresenceResponce>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <ds18b20_beginConversion+0x4a>
		return ds18b20_NO_RESPONSE;
 800123e:	2301      	movs	r3, #1
 8001240:	e006      	b.n	8001250 <ds18b20_beginConversion+0x58>
	}

	// command send to all devices on line (only one on line)
	ds18b20WriteByte(DS18B20_CMD_SKIPROM);
 8001242:	20cc      	movs	r0, #204	; 0xcc
 8001244:	f7ff ff08 	bl	8001058 <ds18b20WriteByte>

	// start conversion
	ds18b20WriteByte(DS18B20_CMD_CONVERTTEMP);
 8001248:	2044      	movs	r0, #68	; 0x44
 800124a:	f7ff ff05 	bl	8001058 <ds18b20WriteByte>

	return ds18b20_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800

08001258 <delayMSC>:
 */

#include "SharedFunctions.h"
#include "Results.h"

void delayMSC(int ms){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
InitTimerTIM2ToCountInUc();
 8001260:	f000 f81c 	bl	800129c <InitTimerTIM2ToCountInUc>
	int i=0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++){
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e00e      	b.n	800128c <delayMSC+0x34>
			TIM2->CNT = 0x00;
 800126e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
			while(TIM2->CNT<1000){
 8001276:	e000      	b.n	800127a <delayMSC+0x22>
 8001278:	bf00      	nop
 800127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001284:	d3f8      	bcc.n	8001278 <delayMSC+0x20>
#include "Results.h"

void delayMSC(int ms){
InitTimerTIM2ToCountInUc();
	int i=0;
	for(i=0;i<ms;i++){
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbec      	blt.n	800126e <delayMSC+0x16>
			TIM2->CNT = 0x00;
			while(TIM2->CNT<1000){
				__NOP();
			}
	}
}
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop

0800129c <InitTimerTIM2ToCountInUc>:
void InitTimerTIM2ToCountInUc(){
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	// enable timer 2 clock
	if((RCC->APB1ENR & RCC_APB1Periph_TIM2)==0){
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <InitTimerTIM2ToCountInUc+0x60>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <InitTimerTIM2ToCountInUc+0x1c>
		RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <InitTimerTIM2ToCountInUc+0x60>)
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <InitTimerTIM2ToCountInUc+0x60>)
 80012b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// clear configuration to reset value timer is simple up-counter
	// using sclk by default
	TIM2->CR1 =0x0000;
 80012b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]

	// set prescaler to make counter counting in uS
	TIM2->PSC=(uint16_t)(SystemCoreClock/2000000);
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <InitTimerTIM2ToCountInUc+0x64>)
 80012c6:	6811      	ldr	r1, [r2, #0]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <InitTimerTIM2ToCountInUc+0x68>)
 80012ca:	fba2 0201 	umull	r0, r2, r2, r1
 80012ce:	0cd2      	lsrs	r2, r2, #19
 80012d0:	b292      	uxth	r2, r2
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28

	// auto-reload if full overflow
	TIM2->ARR=0xffffffff;
 80012d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c

	// load new values
	TIM2->EGR|=0x01;
 80012de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e6:	8a92      	ldrh	r2, [r2, #20]
 80012e8:	b292      	uxth	r2, r2
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	b292      	uxth	r2, r2
 80012f0:	829a      	strh	r2, [r3, #20]
}
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <InitI2C3>:
    I2C_Init(I2C1,&I2C_InitStruct);
    I2C_Cmd(I2C1, ENABLE);

}

void InitI2C3(){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
	// enable i2c2 clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, ENABLE);
 800130e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001312:	2101      	movs	r1, #1
 8001314:	f003 f95a 	bl	80045cc <RCC_APB1PeriphClockCmd>

	// enable GPIOF clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 8001318:	2004      	movs	r0, #4
 800131a:	2101      	movs	r1, #1
 800131c:	f003 f91a 	bl	8004554 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8001320:	2001      	movs	r0, #1
 8001322:	2101      	movs	r1, #1
 8001324:	f003 f916 	bl	8004554 <RCC_AHB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_I2C3);
 8001328:	482a      	ldr	r0, [pc, #168]	; (80013d4 <InitI2C3+0xcc>)
 800132a:	2108      	movs	r1, #8
 800132c:	2204      	movs	r2, #4
 800132e:	f003 fefb 	bl	8005128 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC,GPIO_PinSource9,GPIO_AF_I2C3);
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <InitI2C3+0xd0>)
 8001334:	2109      	movs	r1, #9
 8001336:	2204      	movs	r2, #4
 8001338:	f003 fef6 	bl	8005128 <GPIO_PinAFConfig>

	// enable syscfg clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800133c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001340:	2101      	movs	r1, #1
 8001342:	f003 f961 	bl	8004608 <RCC_APB2PeriphClockCmd>

	// reset i2c2 circuit
	RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3,ENABLE);
 8001346:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800134a:	2101      	movs	r1, #1
 800134c:	f003 f998 	bl	8004680 <RCC_APB1PeriphResetCmd>
	RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3,DISABLE);
 8001350:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001354:	2100      	movs	r1, #0
 8001356:	f003 f993 	bl	8004680 <RCC_APB1PeriphResetCmd>

	// initiate I2C pins as open-drain with no-pull resistors
	GPIO_InitTypeDef pinInitStruct;
	pinInitStruct.GPIO_Mode=GPIO_Mode_AF;
 800135a:	2302      	movs	r3, #2
 800135c:	753b      	strb	r3, [r7, #20]
	pinInitStruct.GPIO_Pin=GPIO_Pin_8;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	613b      	str	r3, [r7, #16]
	pinInitStruct.GPIO_PuPd=GPIO_PuPd_UP;
 8001364:	2301      	movs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
	pinInitStruct.GPIO_OType=GPIO_OType_OD;
 8001368:	2301      	movs	r3, #1
 800136a:	75bb      	strb	r3, [r7, #22]
	pinInitStruct.GPIO_Speed=GPIO_Speed_50MHz;
 800136c:	2302      	movs	r3, #2
 800136e:	757b      	strb	r3, [r7, #21]

	GPIO_Init(GPIOA,&pinInitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <InitI2C3+0xcc>)
 8001376:	4619      	mov	r1, r3
 8001378:	f003 fe14 	bl	8004fa4 <GPIO_Init>

	pinInitStruct.GPIO_Pin=GPIO_Pin_9;
 800137c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001380:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC,&pinInitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <InitI2C3+0xd0>)
 8001388:	4619      	mov	r1, r3
 800138a:	f003 fe0b 	bl	8004fa4 <GPIO_Init>

	// configure I2C as half-duty cycle with seven bit adressing using 10kHz frequency
	I2C_InitTypeDef i2cInitStruct;
	I2C_StructInit(&i2cInitStruct);
 800138e:	463b      	mov	r3, r7
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fc87 	bl	8004ca4 <I2C_StructInit>
	i2cInitStruct.I2C_Mode=I2C_Mode_I2C;
 8001396:	2300      	movs	r3, #0
 8001398:	80bb      	strh	r3, [r7, #4]
	i2cInitStruct.I2C_OwnAddress1=0xA0;
 800139a:	23a0      	movs	r3, #160	; 0xa0
 800139c:	813b      	strh	r3, [r7, #8]
	i2cInitStruct.I2C_ClockSpeed=100000;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <InitI2C3+0xd4>)
 80013a0:	603b      	str	r3, [r7, #0]
	i2cInitStruct.I2C_DutyCycle=I2C_DutyCycle_2;
 80013a2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80013a6:	80fb      	strh	r3, [r7, #6]
	i2cInitStruct.I2C_Ack=I2C_Ack_Enable;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	817b      	strh	r3, [r7, #10]
	i2cInitStruct.I2C_AcknowledgedAddress=I2C_AcknowledgedAddress_7bit;
 80013ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b2:	81bb      	strh	r3, [r7, #12]

	I2C_Init(I2C3,&i2cInitStruct);
 80013b4:	463b      	mov	r3, r7
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <InitI2C3+0xd8>)
 80013b8:	4619      	mov	r1, r3
 80013ba:	f003 fbb1 	bl	8004b20 <I2C_Init>
	I2C_Cmd(I2C3,ENABLE);
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <InitI2C3+0xd8>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	f003 fc8d 	bl	8004ce0 <I2C_Cmd>

	I2C3_CONFIGURED=1;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <InitI2C3+0xdc>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
}
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020800 	.word	0x40020800
 80013dc:	000186a0 	.word	0x000186a0
 80013e0:	40005c00 	.word	0x40005c00
 80013e4:	2000014c 	.word	0x2000014c

080013e8 <collectDataFromSensors>:
#include "Results.h"

void collectDataFromSensors(){
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
	results.temperatureAndHumidity=DHT11_read();
 80013ee:	4c19      	ldr	r4, [pc, #100]	; (8001454 <collectDataFromSensors+0x6c>)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fd08 	bl	8001e08 <DHT11_read>
 80013f8:	f104 0308 	add.w	r3, r4, #8
 80013fc:	463a      	mov	r2, r7
 80013fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001400:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	results.pressure=LPS331_readPressure();
 8001404:	4c13      	ldr	r4, [pc, #76]	; (8001454 <collectDataFromSensors+0x6c>)
 8001406:	463b      	mov	r3, r7
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fa99 	bl	8001940 <LPS331_readPressure>
 800140e:	f104 0314 	add.w	r3, r4, #20
 8001412:	463a      	mov	r2, r7
 8001414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001418:	e883 0003 	stmia.w	r3, {r0, r1}
	results.externalTemperature=ds18b20_read();
 800141c:	4c0d      	ldr	r4, [pc, #52]	; (8001454 <collectDataFromSensors+0x6c>)
 800141e:	463b      	mov	r3, r7
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe55 	bl	80010d0 <ds18b20_read>
 8001426:	f104 031c 	add.w	r3, r4, #28
 800142a:	463a      	mov	r2, r7
 800142c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001430:	e883 0003 	stmia.w	r3, {r0, r1}
	results.changed=1;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <collectDataFromSensors+0x6c>)
 8001436:	2201      	movs	r2, #1
 8001438:	711a      	strb	r2, [r3, #4]
	ds18b20_beginConversion();
 800143a:	f7ff fedd 	bl	80011f8 <ds18b20_beginConversion>
	results.sampleNumber++;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <collectDataFromSensors+0x6c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <collectDataFromSensors+0x6c>)
 8001446:	601a      	str	r2, [r3, #0]

	pushRecord();
 8001448:	f000 f806 	bl	8001458 <pushRecord>
}
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	20000164 	.word	0x20000164

08001458 <pushRecord>:


void pushRecord(){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	DMA_Cmd(DMA2_Stream0, ENABLE);
 800145c:	482c      	ldr	r0, [pc, #176]	; (8001510 <pushRecord+0xb8>)
 800145e:	2101      	movs	r1, #1
 8001460:	f004 f936 	bl	80056d0 <DMA_Cmd>
	DMA_Cmd(DMA2_Stream1, ENABLE);
 8001464:	482b      	ldr	r0, [pc, #172]	; (8001514 <pushRecord+0xbc>)
 8001466:	2101      	movs	r1, #1
 8001468:	f004 f932 	bl	80056d0 <DMA_Cmd>
	DMA_Cmd(DMA2_Stream2, ENABLE);
 800146c:	482a      	ldr	r0, [pc, #168]	; (8001518 <pushRecord+0xc0>)
 800146e:	2101      	movs	r1, #1
 8001470:	f004 f92e 	bl	80056d0 <DMA_Cmd>
	DMA_Cmd(DMA2_Stream3, ENABLE);
 8001474:	4829      	ldr	r0, [pc, #164]	; (800151c <pushRecord+0xc4>)
 8001476:	2101      	movs	r1, #1
 8001478:	f004 f92a 	bl	80056d0 <DMA_Cmd>

	while (DMA_GetFlagStatus(DMA2_Stream0,DMA_FLAG_TCIF0) == RESET ||
 800147c:	bf00      	nop
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <pushRecord+0xb8>)
 8001480:	4927      	ldr	r1, [pc, #156]	; (8001520 <pushRecord+0xc8>)
 8001482:	f004 f941 	bl	8005708 <DMA_GetFlagStatus>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f8      	beq.n	800147e <pushRecord+0x26>
			DMA_GetFlagStatus(DMA2_Stream1,DMA_FLAG_TCIF1) == RESET ||
 800148c:	4821      	ldr	r0, [pc, #132]	; (8001514 <pushRecord+0xbc>)
 800148e:	4925      	ldr	r1, [pc, #148]	; (8001524 <pushRecord+0xcc>)
 8001490:	f004 f93a 	bl	8005708 <DMA_GetFlagStatus>
 8001494:	4603      	mov	r3, r0
	DMA_Cmd(DMA2_Stream0, ENABLE);
	DMA_Cmd(DMA2_Stream1, ENABLE);
	DMA_Cmd(DMA2_Stream2, ENABLE);
	DMA_Cmd(DMA2_Stream3, ENABLE);

	while (DMA_GetFlagStatus(DMA2_Stream0,DMA_FLAG_TCIF0) == RESET ||
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f1      	beq.n	800147e <pushRecord+0x26>
			DMA_GetFlagStatus(DMA2_Stream1,DMA_FLAG_TCIF1) == RESET ||
			DMA_GetFlagStatus(DMA2_Stream2,DMA_FLAG_TCIF2) == RESET ||
 800149a:	481f      	ldr	r0, [pc, #124]	; (8001518 <pushRecord+0xc0>)
 800149c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80014a0:	f004 f932 	bl	8005708 <DMA_GetFlagStatus>
 80014a4:	4603      	mov	r3, r0
	DMA_Cmd(DMA2_Stream1, ENABLE);
	DMA_Cmd(DMA2_Stream2, ENABLE);
	DMA_Cmd(DMA2_Stream3, ENABLE);

	while (DMA_GetFlagStatus(DMA2_Stream0,DMA_FLAG_TCIF0) == RESET ||
			DMA_GetFlagStatus(DMA2_Stream1,DMA_FLAG_TCIF1) == RESET ||
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0e9      	beq.n	800147e <pushRecord+0x26>
			DMA_GetFlagStatus(DMA2_Stream2,DMA_FLAG_TCIF2) == RESET ||
			DMA_GetFlagStatus(DMA2_Stream3,DMA_FLAG_TCIF3) == RESET
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <pushRecord+0xc4>)
 80014ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
 80014b0:	f004 f92a 	bl	8005708 <DMA_GetFlagStatus>
 80014b4:	4603      	mov	r3, r0
	DMA_Cmd(DMA2_Stream2, ENABLE);
	DMA_Cmd(DMA2_Stream3, ENABLE);

	while (DMA_GetFlagStatus(DMA2_Stream0,DMA_FLAG_TCIF0) == RESET ||
			DMA_GetFlagStatus(DMA2_Stream1,DMA_FLAG_TCIF1) == RESET ||
			DMA_GetFlagStatus(DMA2_Stream2,DMA_FLAG_TCIF2) == RESET ||
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0e1      	beq.n	800147e <pushRecord+0x26>
			DMA_GetFlagStatus(DMA2_Stream3,DMA_FLAG_TCIF3) == RESET
	);
	DMA_ClearFlag(DMA2_Stream0,DMA_FLAG_TCIF0);
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <pushRecord+0xb8>)
 80014bc:	4918      	ldr	r1, [pc, #96]	; (8001520 <pushRecord+0xc8>)
 80014be:	f004 f95f 	bl	8005780 <DMA_ClearFlag>
	DMA_ClearFlag(DMA2_Stream1,DMA_FLAG_TCIF1);
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <pushRecord+0xbc>)
 80014c4:	4917      	ldr	r1, [pc, #92]	; (8001524 <pushRecord+0xcc>)
 80014c6:	f004 f95b 	bl	8005780 <DMA_ClearFlag>
	DMA_ClearFlag(DMA2_Stream2,DMA_FLAG_TCIF2);
 80014ca:	4813      	ldr	r0, [pc, #76]	; (8001518 <pushRecord+0xc0>)
 80014cc:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80014d0:	f004 f956 	bl	8005780 <DMA_ClearFlag>
	DMA_ClearFlag(DMA2_Stream3,DMA_FLAG_TCIF3);
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <pushRecord+0xc4>)
 80014d6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
 80014da:	f004 f951 	bl	8005780 <DMA_ClearFlag>


	results.humidityHistory[BUFFER_SIZE-1]=results.temperatureAndHumidity.humidity;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <pushRecord+0xd0>)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <pushRecord+0xd0>)
 80014e4:	f503 635e 	add.w	r3, r3, #3552	; 0xde0
 80014e8:	601a      	str	r2, [r3, #0]
	results.pressureHistory[BUFFER_SIZE-1]=results.pressure.pressure;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <pushRecord+0xd0>)
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <pushRecord+0xd0>)
 80014f0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80014f4:	601a      	str	r2, [r3, #0]
	results.temperaturesHistory[BUFFER_SIZE-1]=results.temperatureAndHumidity.temperature;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <pushRecord+0xd0>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <pushRecord+0xd0>)
 80014fc:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
	results.extTemperaturesHistory[BUFFER_SIZE-1]=results.externalTemperature.temperature;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <pushRecord+0xd0>)
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <pushRecord+0xd0>)
 8001506:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40026410 	.word	0x40026410
 8001514:	40026428 	.word	0x40026428
 8001518:	40026440 	.word	0x40026440
 800151c:	40026458 	.word	0x40026458
 8001520:	10000020 	.word	0x10000020
 8001524:	10000800 	.word	0x10000800
 8001528:	20000164 	.word	0x20000164

0800152c <DMArecordPushInit>:

void DMArecordPushInit(){
 800152c:	b580      	push	{r7, lr}
 800152e:	b090      	sub	sp, #64	; 0x40
 8001530:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8001532:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001536:	2101      	movs	r1, #1
 8001538:	f003 f80c 	bl	8004554 <RCC_AHB1PeriphClockCmd>

	DMA_InitTypeDef dma;

	DMA_StructInit(&dma);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f890 	bl	8005664 <DMA_StructInit>

	dma.DMA_Channel = DMA_Channel_0;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
	dma.DMA_Memory0BaseAddr = (uint32_t)(results.temperaturesHistory);
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <DMArecordPushInit+0xb4>)
 800154a:	60fb      	str	r3, [r7, #12]
	dma.DMA_PeripheralBaseAddr = (uint32_t)(results.temperaturesHistory+1);
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <DMArecordPushInit+0xb8>)
 800154e:	60bb      	str	r3, [r7, #8]
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
	dma.DMA_PeripheralDataSize = DMA_MemoryDataSize_Word;
 8001556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155a:	623b      	str	r3, [r7, #32]
	dma.DMA_DIR = DMA_DIR_MemoryToMemory;
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	613b      	str	r3, [r7, #16]
	dma.DMA_Mode = DMA_Mode_Normal;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001568:	61fb      	str	r3, [r7, #28]
	dma.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 800156a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156e:	61bb      	str	r3, [r7, #24]
	dma.DMA_BufferSize = (BUFFER_SIZE-1)*sizeof(float);
 8001570:	f44f 735b 	mov.w	r3, #876	; 0x36c
 8001574:	617b      	str	r3, [r7, #20]
	dma.DMA_Priority = DMA_Priority_High;
 8001576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
	dma.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800157c:	2300      	movs	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
	dma.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
	dma.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30

	DMA_Init(DMA2_Stream0, &dma);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <DMArecordPushInit+0xbc>)
 800158c:	4619      	mov	r1, r3
 800158e:	f004 f813 	bl	80055b8 <DMA_Init>

	dma.DMA_Channel = DMA_Channel_1;
 8001592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001596:	607b      	str	r3, [r7, #4]
	dma.DMA_Memory0BaseAddr = (uint32_t)(results.pressureHistory);
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <DMArecordPushInit+0xc0>)
 800159a:	60fb      	str	r3, [r7, #12]
	dma.DMA_PeripheralBaseAddr = (uint32_t)(results.pressureHistory+1);
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <DMArecordPushInit+0xc4>)
 800159e:	60bb      	str	r3, [r7, #8]

	DMA_Init(DMA2_Stream1, &dma);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <DMArecordPushInit+0xc8>)
 80015a4:	4619      	mov	r1, r3
 80015a6:	f004 f807 	bl	80055b8 <DMA_Init>

	dma.DMA_Channel = DMA_Channel_2;
 80015aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015ae:	607b      	str	r3, [r7, #4]
	dma.DMA_Memory0BaseAddr = (uint32_t)(results.humidityHistory);
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <DMArecordPushInit+0xcc>)
 80015b2:	60fb      	str	r3, [r7, #12]
	dma.DMA_PeripheralBaseAddr = (uint32_t)(results.humidityHistory+1);
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <DMArecordPushInit+0xd0>)
 80015b6:	60bb      	str	r3, [r7, #8]

	DMA_Init(DMA2_Stream2, &dma);
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <DMArecordPushInit+0xd4>)
 80015bc:	4619      	mov	r1, r3
 80015be:	f003 fffb 	bl	80055b8 <DMA_Init>

	dma.DMA_Channel = DMA_Channel_3;
 80015c2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80015c6:	607b      	str	r3, [r7, #4]
	dma.DMA_Memory0BaseAddr = (uint32_t)(results.extTemperaturesHistory);
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <DMArecordPushInit+0xd8>)
 80015ca:	60fb      	str	r3, [r7, #12]
	dma.DMA_PeripheralBaseAddr = (uint32_t)(results.extTemperaturesHistory+1);
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <DMArecordPushInit+0xdc>)
 80015ce:	60bb      	str	r3, [r7, #8]

	DMA_Init(DMA2_Stream3, &dma);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <DMArecordPushInit+0xe0>)
 80015d4:	4619      	mov	r1, r3
 80015d6:	f003 ffef 	bl	80055b8 <DMA_Init>

}
 80015da:	3740      	adds	r7, #64	; 0x40
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000188 	.word	0x20000188
 80015e4:	2000018c 	.word	0x2000018c
 80015e8:	40026410 	.word	0x40026410
 80015ec:	200004f8 	.word	0x200004f8
 80015f0:	200004fc 	.word	0x200004fc
 80015f4:	40026428 	.word	0x40026428
 80015f8:	20000bd8 	.word	0x20000bd8
 80015fc:	20000bdc 	.word	0x20000bdc
 8001600:	40026440 	.word	0x40026440
 8001604:	20000868 	.word	0x20000868
 8001608:	2000086c 	.word	0x2000086c
 800160c:	40026458 	.word	0x40026458

08001610 <LCDinit>:
 *  Created on: May 6, 2016
 *      Author: krzys
 */
#include "MainMenu.h"

void LCDinit(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	LCD_Init();
 8001614:	f001 faac 	bl	8002b70 <LCD_Init>
	LCD_LayerInit();
 8001618:	f001 fb1a 	bl	8002c50 <LCD_LayerInit>
	LCD_SetLayer(LCD_BACKGROUND_LAYER);
 800161c:	2000      	movs	r0, #0
 800161e:	f001 fb87 	bl	8002d30 <LCD_SetLayer>
	LCD_SetTransparency(0);
 8001622:	2000      	movs	r0, #0
 8001624:	f001 fbda 	bl	8002ddc <LCD_SetTransparency>
	LCD_SetLayer(LCD_FOREGROUND_LAYER);
 8001628:	2001      	movs	r0, #1
 800162a:	f001 fb81 	bl	8002d30 <LCD_SetLayer>
	LTDC_ReloadConfig(LTDC_IMReload);
 800162e:	2001      	movs	r0, #1
 8001630:	f003 f96a 	bl	8004908 <LTDC_ReloadConfig>
	LTDC_Cmd(ENABLE);
 8001634:	2001      	movs	r0, #1
 8001636:	f003 f92f 	bl	8004898 <LTDC_Cmd>
	LCD_Clear(LCD_COLOR_BLACK);
 800163a:	2000      	movs	r0, #0
 800163c:	f001 fbee 	bl	8002e1c <LCD_Clear>
}
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop

08001644 <MainMenu>:
void MainMenu(){
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b09e      	sub	sp, #120	; 0x78
 8001648:	af00      	add	r7, sp, #0
	Button configuration={5,220,"  Configure   "};
 800164a:	4a88      	ldr	r2, [pc, #544]	; (800186c <MainMenu+0x228>)
 800164c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001654:	e883 0003 	stmia.w	r3, {r0, r1}
	Button chart={5,270,"    Chats     "};
 8001658:	4a85      	ldr	r2, [pc, #532]	; (8001870 <MainMenu+0x22c>)
 800165a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800165e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001662:	e883 0003 	stmia.w	r3, {r0, r1}

	Label temperatureLabel={10,10,"Temperature[C]:"};
 8001666:	4a83      	ldr	r2, [pc, #524]	; (8001874 <MainMenu+0x230>)
 8001668:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800166c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001670:	e883 0003 	stmia.w	r3, {r0, r1}
	Label humidityLabel={10,50,"Humidity[%]:"};
 8001674:	4a80      	ldr	r2, [pc, #512]	; (8001878 <MainMenu+0x234>)
 8001676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800167a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167e:	e883 0003 	stmia.w	r3, {r0, r1}
	Label pressureLabel={10,90,"Pressure[hPa]:"};
 8001682:	4a7e      	ldr	r2, [pc, #504]	; (800187c <MainMenu+0x238>)
 8001684:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168c:	e883 0003 	stmia.w	r3, {r0, r1}
	Label externalTemperatureLabel={10,130,"Ext Temperature[C]:"};
 8001690:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <MainMenu+0x23c>)
 8001692:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169a:	e883 0003 	stmia.w	r3, {r0, r1}

	float data[]={1,10,15,1,4,3,4,5};
 800169e:	4b79      	ldr	r3, [pc, #484]	; (8001884 <MainMenu+0x240>)
 80016a0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80016a4:	461d      	mov	r5, r3
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ButtonDraw(&configuration);
 80016b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 ffaa 	bl	8002610 <ButtonDraw>
	ButtonDraw(&chart);
 80016bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 ffa5 	bl	8002610 <ButtonDraw>
	LabelDraw(&temperatureLabel);
 80016c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 f828 	bl	8002720 <LabelDraw>
	LabelDraw(&humidityLabel);
 80016d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 f823 	bl	8002720 <LabelDraw>
	LabelDraw(&pressureLabel);
 80016da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 f81e 	bl	8002720 <LabelDraw>
	LabelDraw(&externalTemperatureLabel);
 80016e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f819 	bl	8002720 <LabelDraw>

	IOE_TP_Config();
 80016ee:	f002 f8ed 	bl	80038cc <IOE_TP_Config>
	TP_STATE state;

	while(1){
		state=*IOE_TP_GetState();
 80016f2:	f002 f85f 	bl	80037b4 <IOE_TP_GetState>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	6810      	ldr	r0, [r2, #0]
 80016fe:	6851      	ldr	r1, [r2, #4]
 8001700:	c303      	stmia	r3!, {r0, r1}
		if (state.TouchDetected == 128 ) {
 8001702:	8bbb      	ldrh	r3, [r7, #28]
 8001704:	2b80      	cmp	r3, #128	; 0x80
 8001706:	d119      	bne.n	800173c <MainMenu+0xf8>
			int s=state.TouchDetected;
 8001708:	8bbb      	ldrh	r3, [r7, #28]
 800170a:	677b      	str	r3, [r7, #116]	; 0x74
			if(ButtonCheckIfPressed(state.X,state.Y,&chart)==CLICKED){
 800170c:	8bf9      	ldrh	r1, [r7, #30]
 800170e:	8c3a      	ldrh	r2, [r7, #32]
 8001710:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	f000 ffc9 	bl	80026b0 <ButtonCheckIfPressed>
 800171e:	4603      	mov	r3, r0
 8001720:	2b01      	cmp	r3, #1
 8001722:	d109      	bne.n	8001738 <MainMenu+0xf4>
				state.TouchDetected=0;
 8001724:	2300      	movs	r3, #0
 8001726:	83bb      	strh	r3, [r7, #28]
				results.changed=1;
 8001728:	4b57      	ldr	r3, [pc, #348]	; (8001888 <MainMenu+0x244>)
 800172a:	2201      	movs	r2, #1
 800172c:	711a      	strb	r2, [r3, #4]
				ChartsMenu();
 800172e:	f000 fbaf 	bl	8001e90 <ChartsMenu>
				results.changed=1;
 8001732:	4b55      	ldr	r3, [pc, #340]	; (8001888 <MainMenu+0x244>)
 8001734:	2201      	movs	r2, #1
 8001736:	711a      	strb	r2, [r3, #4]
			}
			state.TouchDetected=0;
 8001738:	2300      	movs	r3, #0
 800173a:	83bb      	strh	r3, [r7, #28]

		}
		if(results.changed){
 800173c:	4b52      	ldr	r3, [pc, #328]	; (8001888 <MainMenu+0x244>)
 800173e:	791b      	ldrb	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 808f 	beq.w	8001864 <MainMenu+0x220>
			LCD_SetColors(0x0000,0xffff);
 8001746:	2000      	movs	r0, #0
 8001748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800174c:	f001 fb10 	bl	8002d70 <LCD_SetColors>
			LCD_DrawFullRect(0,0,240,320);
 8001750:	2000      	movs	r0, #0
 8001752:	2100      	movs	r1, #0
 8001754:	22f0      	movs	r2, #240	; 0xf0
 8001756:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800175a:	f001 fccb 	bl	80030f4 <LCD_DrawFullRect>
			ButtonDraw(&configuration);
 800175e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001762:	4618      	mov	r0, r3
 8001764:	f000 ff54 	bl	8002610 <ButtonDraw>
			ButtonDraw(&chart);
 8001768:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800176c:	4618      	mov	r0, r3
 800176e:	f000 ff4f 	bl	8002610 <ButtonDraw>

			if(results.temperatureAndHumidity.ERROR_CODE==0){
 8001772:	4b45      	ldr	r3, [pc, #276]	; (8001888 <MainMenu+0x244>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11e      	bne.n	80017b8 <MainMenu+0x174>
				LabelDraw(&temperatureLabel);
 800177a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800177e:	4618      	mov	r0, r3
 8001780:	f000 ffce 	bl	8002720 <LabelDraw>
				LabelDraw(&humidityLabel);
 8001784:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001788:	4618      	mov	r0, r3
 800178a:	f000 ffc9 	bl	8002720 <LabelDraw>
				DrawFloat(150,30,(float)results.temperatureAndHumidity.temperature,2);
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <MainMenu+0x244>)
 8001790:	edd3 7a02 	vldr	s15, [r3, #8]
 8001794:	2096      	movs	r0, #150	; 0x96
 8001796:	211e      	movs	r1, #30
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	2202      	movs	r2, #2
 800179e:	f000 fff1 	bl	8002784 <DrawFloat>
				DrawFloat(150,70,(float)results.temperatureAndHumidity.humidity,2);
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <MainMenu+0x244>)
 80017a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017a8:	2096      	movs	r0, #150	; 0x96
 80017aa:	2146      	movs	r1, #70	; 0x46
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	2202      	movs	r2, #2
 80017b2:	f000 ffe7 	bl	8002784 <DrawFloat>
 80017b6:	e00e      	b.n	80017d6 <MainMenu+0x192>
			}
			else{
				Label tmp=temperatureLabel;
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c4:	e883 0003 	stmia.w	r3, {r0, r1}
				tmp.string="DHT_11 Error";
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <MainMenu+0x248>)
 80017ca:	61bb      	str	r3, [r7, #24]
				LabelDraw(&tmp);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 ffa5 	bl	8002720 <LabelDraw>
			}

			if(results.externalTemperature.ERROR_CODE==0){
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <MainMenu+0x244>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <MainMenu+0x1ba>
				LabelDraw(&externalTemperatureLabel);
 80017de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 ff9c 	bl	8002720 <LabelDraw>
				DrawFloat(150,150,(float)results.externalTemperature.temperature,2);
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <MainMenu+0x244>)
 80017ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ee:	2096      	movs	r0, #150	; 0x96
 80017f0:	2196      	movs	r1, #150	; 0x96
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	2202      	movs	r2, #2
 80017f8:	f000 ffc4 	bl	8002784 <DrawFloat>
 80017fc:	e00e      	b.n	800181c <MainMenu+0x1d8>
			}
			else{
				Label tmp=externalTemperatureLabel;
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180a:	e883 0003 	stmia.w	r3, {r0, r1}
				tmp.string="DS18B20 Error";
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MainMenu+0x24c>)
 8001810:	613b      	str	r3, [r7, #16]
				LabelDraw(&tmp);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4618      	mov	r0, r3
 8001818:	f000 ff82 	bl	8002720 <LabelDraw>
			}

			if(results.pressure.ERROR_CODE==0){
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MainMenu+0x244>)
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10f      	bne.n	8001844 <MainMenu+0x200>
				LabelDraw(&pressureLabel);
 8001824:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001828:	4618      	mov	r0, r3
 800182a:	f000 ff79 	bl	8002720 <LabelDraw>
				DrawFloat(150,110,(float)results.pressure.pressure,2);
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MainMenu+0x244>)
 8001830:	edd3 7a06 	vldr	s15, [r3, #24]
 8001834:	2096      	movs	r0, #150	; 0x96
 8001836:	216e      	movs	r1, #110	; 0x6e
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	2202      	movs	r2, #2
 800183e:	f000 ffa1 	bl	8002784 <DrawFloat>
 8001842:	e00c      	b.n	800185e <MainMenu+0x21a>
			}
			else{
				Label tmp=pressureLabel;
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800184a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184e:	e883 0003 	stmia.w	r3, {r0, r1}
				tmp.string="LPS331 Error";
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MainMenu+0x250>)
 8001854:	60bb      	str	r3, [r7, #8]
				LabelDraw(&tmp);
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4618      	mov	r0, r3
 800185a:	f000 ff61 	bl	8002720 <LabelDraw>
			}

			results.changed=0;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <MainMenu+0x244>)
 8001860:	2200      	movs	r2, #0
 8001862:	711a      	strb	r2, [r3, #4]
		}
		delayMSC(100);
 8001864:	2064      	movs	r0, #100	; 0x64
 8001866:	f7ff fcf7 	bl	8001258 <delayMSC>
	}
 800186a:	e742      	b.n	80016f2 <MainMenu+0xae>
 800186c:	08006a28 	.word	0x08006a28
 8001870:	08006a40 	.word	0x08006a40
 8001874:	08006a58 	.word	0x08006a58
 8001878:	08006a70 	.word	0x08006a70
 800187c:	08006a88 	.word	0x08006a88
 8001880:	08006aa4 	.word	0x08006aa4
 8001884:	08006aac 	.word	0x08006aac
 8001888:	20000164 	.word	0x20000164
 800188c:	080069e8 	.word	0x080069e8
 8001890:	080069f8 	.word	0x080069f8
 8001894:	08006a08 	.word	0x08006a08

08001898 <LPS331_INIT>:
#include "SharedFunctions.h"
#include "LPS331.h"



void LPS331_INIT(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	//if(I2C3_CONFIGURED==0){
	InitI2C3();
 800189c:	f7ff fd34 	bl	8001308 <InitI2C3>
	//}

	while(I2C_GetFlagStatus(I2C3, I2C_FLAG_BUSY)){}
 80018a0:	bf00      	nop
 80018a2:	4823      	ldr	r0, [pc, #140]	; (8001930 <LPS331_INIT+0x98>)
 80018a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80018a8:	f003 fb48 	bl	8004f3c <I2C_GetFlagStatus>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f7      	bne.n	80018a2 <LPS331_INIT+0xa>

	// generate start conditions
	I2C_GenerateSTART(I2C3,ENABLE);
 80018b2:	481f      	ldr	r0, [pc, #124]	; (8001930 <LPS331_INIT+0x98>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	f003 fa33 	bl	8004d20 <I2C_GenerateSTART>

	// enable auto-ack
	I2C_AcknowledgeConfig(I2C3,ENABLE);
 80018ba:	481d      	ldr	r0, [pc, #116]	; (8001930 <LPS331_INIT+0x98>)
 80018bc:	2101      	movs	r1, #1
 80018be:	f003 fa8d 	bl	8004ddc <I2C_AcknowledgeConfig>
	I2C_GenerateSTOP(I2C3,DISABLE);
 80018c2:	481b      	ldr	r0, [pc, #108]	; (8001930 <LPS331_INIT+0x98>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	f003 fa4b 	bl	8004d60 <I2C_GenerateSTOP>

	while(!I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_MODE_SELECT)){}
 80018ca:	bf00      	nop
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <LPS331_INIT+0x98>)
 80018ce:	4919      	ldr	r1, [pc, #100]	; (8001934 <LPS331_INIT+0x9c>)
 80018d0:	f003 fb04 	bl	8004edc <I2C_CheckEvent>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f8      	beq.n	80018cc <LPS331_INIT+0x34>

	// write device adress
	I2C_Send7bitAddress(I2C3,LPS331_adress<<1,I2C_Direction_Transmitter);
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <LPS331_INIT+0x98>)
 80018dc:	21ba      	movs	r1, #186	; 0xba
 80018de:	2200      	movs	r2, #0
 80018e0:	f003 fa5e 	bl	8004da0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){}
 80018e4:	bf00      	nop
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <LPS331_INIT+0x98>)
 80018e8:	4913      	ldr	r1, [pc, #76]	; (8001938 <LPS331_INIT+0xa0>)
 80018ea:	f003 faf7 	bl	8004edc <I2C_CheckEvent>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f8      	beq.n	80018e6 <LPS331_INIT+0x4e>

	// send control register ID
	I2C_SendData(I2C3,LPS331_CTRL_REG1);
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <LPS331_INIT+0x98>)
 80018f6:	2120      	movs	r1, #32
 80018f8:	f003 fad2 	bl	8004ea0 <I2C_SendData>
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_BYTE_TRANSMITTING)!=SUCCESS){}
 80018fc:	bf00      	nop
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <LPS331_INIT+0x98>)
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <LPS331_INIT+0xa4>)
 8001902:	f003 faeb 	bl	8004edc <I2C_CheckEvent>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d1f8      	bne.n	80018fe <LPS331_INIT+0x66>

	// send initial value to enable LPS331 in full precision mode
	I2C_SendData(I2C3,0b11100000);
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <LPS331_INIT+0x98>)
 800190e:	21e0      	movs	r1, #224	; 0xe0
 8001910:	f003 fac6 	bl	8004ea0 <I2C_SendData>
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_BYTE_TRANSMITTING)!=SUCCESS){}
 8001914:	bf00      	nop
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <LPS331_INIT+0x98>)
 8001918:	4908      	ldr	r1, [pc, #32]	; (800193c <LPS331_INIT+0xa4>)
 800191a:	f003 fadf 	bl	8004edc <I2C_CheckEvent>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d1f8      	bne.n	8001916 <LPS331_INIT+0x7e>

	// generate stop condition
	I2C_GenerateSTOP(I2C3,ENABLE);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <LPS331_INIT+0x98>)
 8001926:	2101      	movs	r1, #1
 8001928:	f003 fa1a 	bl	8004d60 <I2C_GenerateSTOP>

}
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40005c00 	.word	0x40005c00
 8001934:	00030001 	.word	0x00030001
 8001938:	00070082 	.word	0x00070082
 800193c:	00070080 	.word	0x00070080

08001940 <LPS331_readPressure>:


LPS331Result LPS331_readPressure(){
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uint32_t lowPart;
	uint32_t basePart;
	uint32_t highPart;

	while(I2C_GetFlagStatus(I2C3, I2C_FLAG_BUSY)){}
 8001948:	bf00      	nop
 800194a:	484e      	ldr	r0, [pc, #312]	; (8001a84 <LPS331_readPressure+0x144>)
 800194c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001950:	f003 faf4 	bl	8004f3c <I2C_GetFlagStatus>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f7      	bne.n	800194a <LPS331_readPressure+0xa>

	//generate start condition
	I2C_GenerateSTART(I2C3,ENABLE);
 800195a:	484a      	ldr	r0, [pc, #296]	; (8001a84 <LPS331_readPressure+0x144>)
 800195c:	2101      	movs	r1, #1
 800195e:	f003 f9df 	bl	8004d20 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_MODE_SELECT)){}
 8001962:	bf00      	nop
 8001964:	4847      	ldr	r0, [pc, #284]	; (8001a84 <LPS331_readPressure+0x144>)
 8001966:	4948      	ldr	r1, [pc, #288]	; (8001a88 <LPS331_readPressure+0x148>)
 8001968:	f003 fab8 	bl	8004edc <I2C_CheckEvent>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f8      	beq.n	8001964 <LPS331_readPressure+0x24>

	// send device adress
	I2C_Send7bitAddress(I2C3,LPS331_adress<<1,I2C_Direction_Transmitter);
 8001972:	4844      	ldr	r0, [pc, #272]	; (8001a84 <LPS331_readPressure+0x144>)
 8001974:	21ba      	movs	r1, #186	; 0xba
 8001976:	2200      	movs	r2, #0
 8001978:	f003 fa12 	bl	8004da0 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){}
 800197c:	bf00      	nop
 800197e:	4841      	ldr	r0, [pc, #260]	; (8001a84 <LPS331_readPressure+0x144>)
 8001980:	4942      	ldr	r1, [pc, #264]	; (8001a8c <LPS331_readPressure+0x14c>)
 8001982:	f003 faab 	bl	8004edc <I2C_CheckEvent>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f8      	beq.n	800197e <LPS331_readPressure+0x3e>

	// set R/W register number to first register containing information about pressure
	I2C_SendData(I2C3,LPS331_PRESS_POUT_XL_REH|(1<<7));
 800198c:	483d      	ldr	r0, [pc, #244]	; (8001a84 <LPS331_readPressure+0x144>)
 800198e:	21a8      	movs	r1, #168	; 0xa8
 8001990:	f003 fa86 	bl	8004ea0 <I2C_SendData>
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_BYTE_TRANSMITTING)!=SUCCESS){}
 8001994:	bf00      	nop
 8001996:	483b      	ldr	r0, [pc, #236]	; (8001a84 <LPS331_readPressure+0x144>)
 8001998:	493d      	ldr	r1, [pc, #244]	; (8001a90 <LPS331_readPressure+0x150>)
 800199a:	f003 fa9f 	bl	8004edc <I2C_CheckEvent>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d1f8      	bne.n	8001996 <LPS331_readPressure+0x56>

	// generate start condition
	I2C_GenerateSTART(I2C3,ENABLE);
 80019a4:	4837      	ldr	r0, [pc, #220]	; (8001a84 <LPS331_readPressure+0x144>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	f003 f9ba 	bl	8004d20 <I2C_GenerateSTART>
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_MODE_SELECT)!=SUCCESS){}
 80019ac:	bf00      	nop
 80019ae:	4835      	ldr	r0, [pc, #212]	; (8001a84 <LPS331_readPressure+0x144>)
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <LPS331_readPressure+0x148>)
 80019b2:	f003 fa93 	bl	8004edc <I2C_CheckEvent>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d1f8      	bne.n	80019ae <LPS331_readPressure+0x6e>

	// enable auto-ack
	I2C_AcknowledgeConfig(I2C3,ENABLE);
 80019bc:	4831      	ldr	r0, [pc, #196]	; (8001a84 <LPS331_readPressure+0x144>)
 80019be:	2101      	movs	r1, #1
 80019c0:	f003 fa0c 	bl	8004ddc <I2C_AcknowledgeConfig>
	I2C_GenerateSTOP(I2C3,DISABLE);
 80019c4:	482f      	ldr	r0, [pc, #188]	; (8001a84 <LPS331_readPressure+0x144>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	f003 f9ca 	bl	8004d60 <I2C_GenerateSTOP>

	// send device adress
	I2C_Send7bitAddress(I2C3,LPS331_adress<<1,I2C_Direction_Receiver);
 80019cc:	482d      	ldr	r0, [pc, #180]	; (8001a84 <LPS331_readPressure+0x144>)
 80019ce:	21ba      	movs	r1, #186	; 0xba
 80019d0:	2201      	movs	r2, #1
 80019d2:	f003 f9e5 	bl	8004da0 <I2C_Send7bitAddress>
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)!=SUCCESS){}
 80019d6:	bf00      	nop
 80019d8:	482a      	ldr	r0, [pc, #168]	; (8001a84 <LPS331_readPressure+0x144>)
 80019da:	492e      	ldr	r1, [pc, #184]	; (8001a94 <LPS331_readPressure+0x154>)
 80019dc:	f003 fa7e 	bl	8004edc <I2C_CheckEvent>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d1f8      	bne.n	80019d8 <LPS331_readPressure+0x98>

	// read base register of pressure
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_BYTE_RECEIVED)!=SUCCESS){}
 80019e6:	bf00      	nop
 80019e8:	4826      	ldr	r0, [pc, #152]	; (8001a84 <LPS331_readPressure+0x144>)
 80019ea:	492b      	ldr	r1, [pc, #172]	; (8001a98 <LPS331_readPressure+0x158>)
 80019ec:	f003 fa76 	bl	8004edc <I2C_CheckEvent>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d1f8      	bne.n	80019e8 <LPS331_readPressure+0xa8>
	basePart=I2C_ReceiveData(I2C3);
 80019f6:	4823      	ldr	r0, [pc, #140]	; (8001a84 <LPS331_readPressure+0x144>)
 80019f8:	f003 fa62 	bl	8004ec0 <I2C_ReceiveData>
 80019fc:	4603      	mov	r3, r0
 80019fe:	61fb      	str	r3, [r7, #28]

	// read low part of HIGH register of pressure
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_BYTE_RECEIVED)!=SUCCESS){}
 8001a00:	bf00      	nop
 8001a02:	4820      	ldr	r0, [pc, #128]	; (8001a84 <LPS331_readPressure+0x144>)
 8001a04:	4924      	ldr	r1, [pc, #144]	; (8001a98 <LPS331_readPressure+0x158>)
 8001a06:	f003 fa69 	bl	8004edc <I2C_CheckEvent>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d1f8      	bne.n	8001a02 <LPS331_readPressure+0xc2>
	lowPart=I2C_ReceiveData(I2C3);
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <LPS331_readPressure+0x144>)
 8001a12:	f003 fa55 	bl	8004ec0 <I2C_ReceiveData>
 8001a16:	4603      	mov	r3, r0
 8001a18:	61bb      	str	r3, [r7, #24]

	// enable stopping transmission after next receive value
	I2C_AcknowledgeConfig(I2C3,DISABLE);
 8001a1a:	481a      	ldr	r0, [pc, #104]	; (8001a84 <LPS331_readPressure+0x144>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f003 f9dd 	bl	8004ddc <I2C_AcknowledgeConfig>
	I2C_GenerateSTOP(I2C3,ENABLE);
 8001a22:	4818      	ldr	r0, [pc, #96]	; (8001a84 <LPS331_readPressure+0x144>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	f003 f99b 	bl	8004d60 <I2C_GenerateSTOP>

	// read high part of HIGH register of pressure
	while(I2C_CheckEvent(I2C3,I2C_EVENT_MASTER_BYTE_RECEIVED)!=SUCCESS){}
 8001a2a:	bf00      	nop
 8001a2c:	4815      	ldr	r0, [pc, #84]	; (8001a84 <LPS331_readPressure+0x144>)
 8001a2e:	491a      	ldr	r1, [pc, #104]	; (8001a98 <LPS331_readPressure+0x158>)
 8001a30:	f003 fa54 	bl	8004edc <I2C_CheckEvent>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d1f8      	bne.n	8001a2c <LPS331_readPressure+0xec>
	highPart=I2C_ReceiveData(I2C3);
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <LPS331_readPressure+0x144>)
 8001a3c:	f003 fa40 	bl	8004ec0 <I2C_ReceiveData>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

	// combine values
	uint32_t result=(highPart<<16)|(lowPart<<8)|basePart;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	041a      	lsls	r2, r3, #16
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

	// convert internal date format to hPa
	struct LPS331Result resultValue;
	resultValue.pressure=((float)result)/4096.0;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001a9c <LPS331_readPressure+0x15c>
 8001a62:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001a66:	edc7 7a03 	vstr	s15, [r7, #12]
	resultValue.ERROR_CODE=0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
	return resultValue;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f107 0208 	add.w	r2, r7, #8
 8001a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a78:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005c00 	.word	0x40005c00
 8001a88:	00030001 	.word	0x00030001
 8001a8c:	00070082 	.word	0x00070082
 8001a90:	00070080 	.word	0x00070080
 8001a94:	00030002 	.word	0x00030002
 8001a98:	00030040 	.word	0x00030040
 8001a9c:	45800000 	.word	0x45800000

08001aa0 <DHT11SentStartRequest>:
 */

#include "DHT11.h"
#include "SharedFunctions.h"

void DHT11SentStartRequest(){
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	// high logic level by default (pull-up line)
	GPIOG->ODR |= (1<<5);
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001aa6:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001aa8:	6952      	ldr	r2, [r2, #20]
 8001aaa:	f042 0220 	orr.w	r2, r2, #32
 8001aae:	615a      	str	r2, [r3, #20]

	// set as output
	GPIOG->MODER |= (uint32_t)(1<<10);
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ab2:	4a2e      	ldr	r2, [pc, #184]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aba:	601a      	str	r2, [r3, #0]
	GPIOG->MODER &= ~((uint32_t)(1<<11));
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac6:	601a      	str	r2, [r3, #0]

	// high speed output enable
	GPIOG->OSPEEDR|=(uint32_t)(1<<11);
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001aca:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad2:	609a      	str	r2, [r3, #8]
	GPIOG->OSPEEDR&= ~((uint32_t)(1<<10));
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ad8:	6892      	ldr	r2, [r2, #8]
 8001ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ade:	609a      	str	r2, [r3, #8]

	// open-drain
	GPIOG->OTYPER |= ((uint32_t)(1<<5));
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ae2:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001ae4:	6852      	ldr	r2, [r2, #4]
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	605a      	str	r2, [r3, #4]

	// no pull-up (external pull-up)
	GPIOG->PUPDR &= ~((uint32_t)(1<<10));
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001af0:	68d2      	ldr	r2, [r2, #12]
 8001af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af6:	60da      	str	r2, [r3, #12]
	GPIOG->PUPDR &= ~((uint32_t)(1<<11));
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001afc:	68d2      	ldr	r2, [r2, #12]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b02:	60da      	str	r2, [r3, #12]

	// reset value
	TIM2->CNT = 0x00;
 8001b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

	// start timer
	TIM2->CR1 |= 0x01;
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b14:	8812      	ldrh	r2, [r2, #0]
 8001b16:	b292      	uxth	r2, r2
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	801a      	strh	r2, [r3, #0]

	// wait 20 ms
	while(TIM2->CNT<20000){
 8001b20:	e000      	b.n	8001b24 <DHT11SentStartRequest+0x84>
 8001b22:	bf00      	nop
 8001b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b2a:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d9f7      	bls.n	8001b22 <DHT11SentStartRequest+0x82>
		__NOP();
	}

	// pull data line down && wait 20 ms
	GPIOG->ODR&=~((uint32_t)(1<<5));
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001b36:	6952      	ldr	r2, [r2, #20]
 8001b38:	f022 0220 	bic.w	r2, r2, #32
 8001b3c:	615a      	str	r2, [r3, #20]
	TIM2->CNT = 0x00;
 8001b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT<20000){
 8001b46:	e000      	b.n	8001b4a <DHT11SentStartRequest+0xaa>
 8001b48:	bf00      	nop
 8001b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b50:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d9f7      	bls.n	8001b48 <DHT11SentStartRequest+0xa8>
		__NOP();
	}

	// pull data line up
	GPIOG->ODR |=((uint32_t)(1<<5));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <DHT11SentStartRequest+0xcc>)
 8001b5c:	6952      	ldr	r2, [r2, #20]
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	615a      	str	r2, [r3, #20]
}
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40021800 	.word	0x40021800

08001b70 <DHT11RecvData>:
uint32_t DHT11RecvData(uint32_t * intervalsArray){
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	// enter to input mode (external pullup)
	//GPIOG->MODER &= ~((uint32_t)(1<<11));
	//GPIOG->MODER &= ~((uint32_t)(1<<10));

	uint16_t state=GPIOG->IDR & (1<<5);
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <DHT11RecvData+0xc8>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	81fb      	strh	r3, [r7, #14]

	// listen for new data
	int dataNumber;
	for(dataNumber=0;dataNumber<42;dataNumber++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	e04b      	b.n	8001c22 <DHT11RecvData+0xb2>
		// reset timer value
		TIM2->CNT=0;
 8001b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
		//start timer
		TIM2->CR1|=0x01;
 8001b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9a:	8812      	ldrh	r2, [r2, #0]
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	801a      	strh	r2, [r3, #0]

		// wait for logical level change or timeout
		while(TIM2->CNT<500 && (GPIOG->IDR & (1<<5))==state){
 8001ba6:	e000      	b.n	8001baa <DHT11RecvData+0x3a>
 8001ba8:	bf00      	nop
 8001baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bb4:	d206      	bcs.n	8001bc4 <DHT11RecvData+0x54>
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <DHT11RecvData+0xc8>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0220 	and.w	r2, r3, #32
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d0f1      	beq.n	8001ba8 <DHT11RecvData+0x38>
			__NOP();
		}

		// stop timer
		TIM2->CR1 &= ~0x00000001;
 8001bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	801a      	strh	r2, [r3, #0]

		// if timeout return error code
		if(TIM2->CNT>=500){
 8001bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001be2:	d306      	bcc.n	8001bf2 <DHT11RecvData+0x82>
			if(dataNumber==0){
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <DHT11RecvData+0x7e>
				return DHT11_NO_RESPONSE;
 8001bea:	2302      	movs	r3, #2
 8001bec:	e01d      	b.n	8001c2a <DHT11RecvData+0xba>
			}
			else{
				return DHT11_TIME_OUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e01b      	b.n	8001c2a <DHT11RecvData+0xba>
			}
		}

		// read new logical state
		state=GPIOG->IDR & (1<<5);
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <DHT11RecvData+0xc8>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	81fb      	strh	r3, [r7, #14]

		if(!state){
 8001bfe:	89fb      	ldrh	r3, [r7, #14]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d108      	bne.n	8001c16 <DHT11RecvData+0xa6>
			// save active state time
			intervalsArray[dataNumber]=TIM2->CNT;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e002      	b.n	8001c1c <DHT11RecvData+0xac>
		}
		else
		{
			// ignore inactive states
			dataNumber--;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]

	uint16_t state=GPIOG->IDR & (1<<5);

	// listen for new data
	int dataNumber;
	for(dataNumber=0;dataNumber<42;dataNumber++){
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b29      	cmp	r3, #41	; 0x29
 8001c26:	ddb0      	ble.n	8001b8a <DHT11RecvData+0x1a>
		{
			// ignore inactive states
			dataNumber--;
		}
	}
	return DHT11_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021800 	.word	0x40021800

08001c3c <DHT11DecodeByte>:
uint32_t DHT11DecodeByte(uint32_t * intervals,uint8_t * result){
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	int index;
	*result=0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
	for(index=0;index<8;index++){
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e030      	b.n	8001cb4 <DHT11DecodeByte+0x78>
		if(intervals[index]>10 && intervals[index]<40){
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b0a      	cmp	r3, #10
 8001c5e:	d90d      	bls.n	8001c7c <DHT11DecodeByte+0x40>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b27      	cmp	r3, #39	; 0x27
 8001c6c:	d806      	bhi.n	8001c7c <DHT11DecodeByte+0x40>
			*result=(*result)<<1;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e018      	b.n	8001cae <DHT11DecodeByte+0x72>
		}
		else if(intervals[index]>50 && intervals[index]<90){
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b32      	cmp	r3, #50	; 0x32
 8001c88:	d90f      	bls.n	8001caa <DHT11DecodeByte+0x6e>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b59      	cmp	r3, #89	; 0x59
 8001c96:	d808      	bhi.n	8001caa <DHT11DecodeByte+0x6e>
			*result=((*result)<<1) + 0x01;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e001      	b.n	8001cae <DHT11DecodeByte+0x72>
		}
		else{
			return DHT11_DECODE_ERROR;
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <DHT11DecodeByte+0x80>
	return DHT11_OK;
}
uint32_t DHT11DecodeByte(uint32_t * intervals,uint8_t * result){
	int index;
	*result=0;
	for(index=0;index<8;index++){
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	ddcb      	ble.n	8001c52 <DHT11DecodeByte+0x16>
		}
		else{
			return DHT11_DECODE_ERROR;
		}
	}
	return DHT11_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <DHT11Decode>:

void DHT11Decode(uint32_t * intervals,DHT11Result * result){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]

	// decode RH integral
	uint8_t RH_integral=0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73bb      	strb	r3, [r7, #14]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[2],&RH_integral);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0208 	add.w	r2, r3, #8
 8001cdc:	f107 030e 	add.w	r3, r7, #14
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7ff ffaa 	bl	8001c3c <DHT11DecodeByte>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d000      	beq.n	8001cfa <DHT11Decode+0x32>
 8001cf8:	e081      	b.n	8001dfe <DHT11Decode+0x136>

	// decode RH decimal
	uint8_t RH_decimal=0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	737b      	strb	r3, [r7, #13]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[10],&RH_decimal);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001d04:	f107 030d 	add.w	r3, r7, #13
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7ff ff96 	bl	8001c3c <DHT11DecodeByte>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d000      	beq.n	8001d22 <DHT11Decode+0x5a>
 8001d20:	e06d      	b.n	8001dfe <DHT11Decode+0x136>

	//decode T integral
	uint8_t T_integral=0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	733b      	strb	r3, [r7, #12]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[18],&T_integral);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7ff ff82 	bl	8001c3c <DHT11DecodeByte>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d000      	beq.n	8001d4a <DHT11Decode+0x82>
 8001d48:	e059      	b.n	8001dfe <DHT11Decode+0x136>

	//decode T decimal
	uint8_t T_decimal=0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	72fb      	strb	r3, [r7, #11]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[26],&T_decimal);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001d54:	f107 030b 	add.w	r3, r7, #11
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7ff ff6e 	bl	8001c3c <DHT11DecodeByte>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d000      	beq.n	8001d72 <DHT11Decode+0xaa>
 8001d70:	e045      	b.n	8001dfe <DHT11Decode+0x136>

	//decode CRC
	uint8_t CRC_value=0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	72bb      	strb	r3, [r7, #10]
	result->ERROR_CODE=DHT11DecodeByte(&intervals[34],&CRC_value);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8001d7c:	f107 030a 	add.w	r3, r7, #10
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7ff ff5a 	bl	8001c3c <DHT11DecodeByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	609a      	str	r2, [r3, #8]
	if(result->ERROR_CODE!=DHT11_OK){ return; }
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d000      	beq.n	8001d9a <DHT11Decode+0xd2>
 8001d98:	e031      	b.n	8001dfe <DHT11Decode+0x136>

	//check CRC
	uint8_t countedCRC=T_integral+T_decimal+RH_decimal+RH_integral;
 8001d9a:	7b3a      	ldrb	r2, [r7, #12]
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	7b7b      	ldrb	r3, [r7, #13]
 8001da4:	4413      	add	r3, r2
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	4413      	add	r3, r2
 8001dac:	73fb      	strb	r3, [r7, #15]
	if(countedCRC!=CRC_value){
 8001dae:	7abb      	ldrb	r3, [r7, #10]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d003      	beq.n	8001dbe <DHT11Decode+0xf6>
		result->ERROR_CODE=DHT11_CRC_ERROR;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	609a      	str	r2, [r3, #8]
		return;
 8001dbc:	e01f      	b.n	8001dfe <DHT11Decode+0x136>
	}

	//join decimal with integral (compability with dht-22)
	result->humidity=(float)(RH_decimal/10+RH_integral);
 8001dbe:	7b7a      	ldrb	r2, [r7, #13]
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <DHT11Decode+0x13c>)
 8001dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	7bbb      	ldrb	r3, [r7, #14]
 8001dce:	4413      	add	r3, r2
 8001dd0:	ee07 3a10 	vmov	s14, r3
 8001dd4:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	edc3 7a01 	vstr	s15, [r3, #4]
	result->temperature=(float)(T_decimal/10+T_integral);
 8001dde:	7afa      	ldrb	r2, [r7, #11]
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <DHT11Decode+0x13c>)
 8001de2:	fba3 1302 	umull	r1, r3, r3, r2
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	7b3b      	ldrb	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	ee07 3a10 	vmov	s14, r3
 8001df4:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
}
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	cccccccd 	.word	0xcccccccd

08001e08 <DHT11_read>:
DHT11Result DHT11_read(){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0b0      	sub	sp, #192	; 0xc0
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	uint32_t intervals[42];

	// check if port D enable if not enable it
	if((RCC->AHB1ENR & RCC_AHB1Periph_GPIOG)==0){
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <DHT11_read+0x84>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <DHT11_read+0x20>
		RCC->AHB1ENR |= RCC_AHB1Periph_GPIOG;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <DHT11_read+0x84>)
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <DHT11_read+0x84>)
 8001e20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30

	DHT11Result result;


	// HOW TO DISABLE INTERRUPTS ?
	InitTimerTIM2ToCountInUc();
 8001e28:	f7ff fa38 	bl	800129c <InitTimerTIM2ToCountInUc>
	DHT11SentStartRequest();
 8001e2c:	f7ff fe38 	bl	8001aa0 <DHT11SentStartRequest>
	result.ERROR_CODE=DHT11RecvData(intervals);
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fe9b 	bl	8001b70 <DHT11RecvData>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	617b      	str	r3, [r7, #20]

	if(result.ERROR_CODE!=DHT11_OK){
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <DHT11_read+0x4a>
		return result;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f107 020c 	add.w	r2, r7, #12
 8001e4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e50:	e017      	b.n	8001e82 <DHT11_read+0x7a>
	}
	// disable timer2
	TIM2->CR1 &= ~0x00000001;
 8001e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5a:	8812      	ldrh	r2, [r2, #0]
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	b292      	uxth	r2, r2
 8001e64:	801a      	strh	r2, [r3, #0]

	DHT11Decode(intervals,&result);
 8001e66:	f107 0218 	add.w	r2, r7, #24
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7ff ff29 	bl	8001cc8 <DHT11Decode>

	return result;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f107 020c 	add.w	r2, r7, #12
 8001e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	37c0      	adds	r7, #192	; 0xc0
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <ChartsMenu>:
 *  Created on: May 6, 2016
 *      Author: krzys
 */
#include "ChartsMenu.h"

void ChartsMenu(){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0

	LCD_SetColors(0x0000,0xffff);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e9c:	f000 ff68 	bl	8002d70 <LCD_SetColors>
	LCD_DrawFullRect(0,0,240,320);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	22f0      	movs	r2, #240	; 0xf0
 8001ea6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eaa:	f001 f923 	bl	80030f4 <LCD_DrawFullRect>
	Button temperature={5,30,"  Temperature "};
 8001eae:	4a62      	ldr	r2, [pc, #392]	; (8002038 <ChartsMenu+0x1a8>)
 8001eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eb8:	e883 0003 	stmia.w	r3, {r0, r1}
	Button humidity={5,80,"   Humidity   "};
 8001ebc:	4a5f      	ldr	r2, [pc, #380]	; (800203c <ChartsMenu+0x1ac>)
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec6:	e883 0003 	stmia.w	r3, {r0, r1}
	Button pressure={5,130,"   Pressure   "};
 8001eca:	4a5d      	ldr	r2, [pc, #372]	; (8002040 <ChartsMenu+0x1b0>)
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed4:	e883 0003 	stmia.w	r3, {r0, r1}
	Button extTemperature={5,180,"   Ext Temp   "};
 8001ed8:	4a5a      	ldr	r2, [pc, #360]	; (8002044 <ChartsMenu+0x1b4>)
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	e883 0003 	stmia.w	r3, {r0, r1}
	Button returnButton={5,230,"    Return    "};
 8001ee6:	4a58      	ldr	r2, [pc, #352]	; (8002048 <ChartsMenu+0x1b8>)
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef0:	e883 0003 	stmia.w	r3, {r0, r1}

	results.changed=1;
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <ChartsMenu+0x1bc>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	711a      	strb	r2, [r3, #4]

	TP_STATE state;

	while(1){
		state=*IOE_TP_GetState();
 8001efa:	f001 fc5b 	bl	80037b4 <IOE_TP_GetState>
 8001efe:	4602      	mov	r2, r0
 8001f00:	463b      	mov	r3, r7
 8001f02:	6810      	ldr	r0, [r2, #0]
 8001f04:	6851      	ldr	r1, [r2, #4]
 8001f06:	c303      	stmia	r3!, {r0, r1}
			if (state.TouchDetected == 128 ) {
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d15f      	bne.n	8001fce <ChartsMenu+0x13e>
				if(ButtonCheckIfPressed(state.X,state.Y,&returnButton)==CLICKED){
 8001f0e:	8879      	ldrh	r1, [r7, #2]
 8001f10:	88ba      	ldrh	r2, [r7, #4]
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	4608      	mov	r0, r1
 8001f18:	4611      	mov	r1, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f000 fbc8 	bl	80026b0 <ButtonCheckIfPressed>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d100      	bne.n	8001f28 <ChartsMenu+0x98>
					return;
 8001f26:	e084      	b.n	8002032 <ChartsMenu+0x1a2>
				}
				else if(ButtonCheckIfPressed(state.X,state.Y,&temperature)==CLICKED){
 8001f28:	8879      	ldrh	r1, [r7, #2]
 8001f2a:	88ba      	ldrh	r2, [r7, #4]
 8001f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f30:	4608      	mov	r0, r1
 8001f32:	4611      	mov	r1, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	f000 fbbb 	bl	80026b0 <ButtonCheckIfPressed>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <ChartsMenu+0xc2>
					ChartPanel("Temperature [5s]",results.temperaturesHistory,BUFFER_SIZE);
 8001f40:	4843      	ldr	r0, [pc, #268]	; (8002050 <ChartsMenu+0x1c0>)
 8001f42:	4944      	ldr	r1, [pc, #272]	; (8002054 <ChartsMenu+0x1c4>)
 8001f44:	22dc      	movs	r2, #220	; 0xdc
 8001f46:	f000 f893 	bl	8002070 <ChartPanel>
					results.changed=1;
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <ChartsMenu+0x1bc>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	711a      	strb	r2, [r3, #4]
 8001f50:	e03d      	b.n	8001fce <ChartsMenu+0x13e>
				}
				else if(ButtonCheckIfPressed(state.X,state.Y,&humidity)==CLICKED){
 8001f52:	8879      	ldrh	r1, [r7, #2]
 8001f54:	88ba      	ldrh	r2, [r7, #4]
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	4608      	mov	r0, r1
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f000 fba6 	bl	80026b0 <ButtonCheckIfPressed>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <ChartsMenu+0xec>
					ChartPanel("Humidity [5s]",results.humidityHistory,BUFFER_SIZE);
 8001f6a:	483b      	ldr	r0, [pc, #236]	; (8002058 <ChartsMenu+0x1c8>)
 8001f6c:	493b      	ldr	r1, [pc, #236]	; (800205c <ChartsMenu+0x1cc>)
 8001f6e:	22dc      	movs	r2, #220	; 0xdc
 8001f70:	f000 f87e 	bl	8002070 <ChartPanel>
					results.changed=1;
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <ChartsMenu+0x1bc>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	711a      	strb	r2, [r3, #4]
 8001f7a:	e028      	b.n	8001fce <ChartsMenu+0x13e>
				}
				else if(ButtonCheckIfPressed(state.X,state.Y,&pressure)==CLICKED){
 8001f7c:	8879      	ldrh	r1, [r7, #2]
 8001f7e:	88ba      	ldrh	r2, [r7, #4]
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f000 fb91 	bl	80026b0 <ButtonCheckIfPressed>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <ChartsMenu+0x116>
					ChartPanel("Pressure [5s]",results.pressureHistory,BUFFER_SIZE);
 8001f94:	4832      	ldr	r0, [pc, #200]	; (8002060 <ChartsMenu+0x1d0>)
 8001f96:	4933      	ldr	r1, [pc, #204]	; (8002064 <ChartsMenu+0x1d4>)
 8001f98:	22dc      	movs	r2, #220	; 0xdc
 8001f9a:	f000 f869 	bl	8002070 <ChartPanel>
					results.changed=1;
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <ChartsMenu+0x1bc>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	711a      	strb	r2, [r3, #4]
 8001fa4:	e013      	b.n	8001fce <ChartsMenu+0x13e>
				}
				else if(ButtonCheckIfPressed(state.X,state.Y,&extTemperature)==CLICKED){
 8001fa6:	8879      	ldrh	r1, [r7, #2]
 8001fa8:	88ba      	ldrh	r2, [r7, #4]
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4608      	mov	r0, r1
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f000 fb7c 	bl	80026b0 <ButtonCheckIfPressed>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <ChartsMenu+0x13e>
					ChartPanel("Ext Temp. [5s]",results.extTemperaturesHistory,BUFFER_SIZE);
 8001fbe:	482a      	ldr	r0, [pc, #168]	; (8002068 <ChartsMenu+0x1d8>)
 8001fc0:	492a      	ldr	r1, [pc, #168]	; (800206c <ChartsMenu+0x1dc>)
 8001fc2:	22dc      	movs	r2, #220	; 0xdc
 8001fc4:	f000 f854 	bl	8002070 <ChartPanel>
					results.changed=1;
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <ChartsMenu+0x1bc>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	711a      	strb	r2, [r3, #4]
				}
			}

			state.TouchDetected=0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	803b      	strh	r3, [r7, #0]

			if(results.changed){
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <ChartsMenu+0x1bc>)
 8001fd4:	791b      	ldrb	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d027      	beq.n	800202a <ChartsMenu+0x19a>
				LCD_SetColors(0x0000,0xffff);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fe0:	f000 fec6 	bl	8002d70 <LCD_SetColors>
				LCD_DrawFullRect(0,0,240,320);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	22f0      	movs	r2, #240	; 0xf0
 8001fea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fee:	f001 f881 	bl	80030f4 <LCD_DrawFullRect>

				ButtonDraw(&temperature);
 8001ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fb0a 	bl	8002610 <ButtonDraw>
				ButtonDraw(&humidity);
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fb05 	bl	8002610 <ButtonDraw>
				ButtonDraw(&pressure);
 8002006:	f107 0318 	add.w	r3, r7, #24
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fb00 	bl	8002610 <ButtonDraw>
				ButtonDraw(&extTemperature);
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fafb 	bl	8002610 <ButtonDraw>
				ButtonDraw(&returnButton);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f000 faf6 	bl	8002610 <ButtonDraw>

				results.changed=0;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <ChartsMenu+0x1bc>)
 8002026:	2200      	movs	r2, #0
 8002028:	711a      	strb	r2, [r3, #4]
			}

			delayMSC(100);
 800202a:	2064      	movs	r0, #100	; 0x64
 800202c:	f7ff f914 	bl	8001258 <delayMSC>
	}
 8002030:	e763      	b.n	8001efa <ChartsMenu+0x6a>
}
 8002032:	3730      	adds	r7, #48	; 0x30
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	08006b20 	.word	0x08006b20
 800203c:	08006b38 	.word	0x08006b38
 8002040:	08006b50 	.word	0x08006b50
 8002044:	08006b68 	.word	0x08006b68
 8002048:	08006b80 	.word	0x08006b80
 800204c:	20000164 	.word	0x20000164
 8002050:	08006acc 	.word	0x08006acc
 8002054:	20000188 	.word	0x20000188
 8002058:	08006ae0 	.word	0x08006ae0
 800205c:	20000bd8 	.word	0x20000bd8
 8002060:	08006af0 	.word	0x08006af0
 8002064:	200004f8 	.word	0x200004f8
 8002068:	08006b00 	.word	0x08006b00
 800206c:	20000868 	.word	0x20000868

08002070 <ChartPanel>:
 *  Created on: May 6, 2016
 *      Author: krzys
 */

#include "ChartPanel.h"
void ChartPanel(char * chartName,float * pointerToDataArray,int sizeOfData){
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
	TP_STATE state;
	Button returnButton={5,250,"    Return    "};
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <ChartPanel+0xc0>)
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002086:	e883 0003 	stmia.w	r3, {r0, r1}
	Label nameOfChart={10,10,chartName};
 800208a:	230a      	movs	r3, #10
 800208c:	823b      	strh	r3, [r7, #16]
 800208e:	230a      	movs	r3, #10
 8002090:	827b      	strh	r3, [r7, #18]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	617b      	str	r3, [r7, #20]
	results.changed=1;
 8002096:	4b27      	ldr	r3, [pc, #156]	; (8002134 <ChartPanel+0xc4>)
 8002098:	2201      	movs	r2, #1
 800209a:	711a      	strb	r2, [r3, #4]
	while(1){
		state=*IOE_TP_GetState();
 800209c:	f001 fb8a 	bl	80037b4 <IOE_TP_GetState>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	6810      	ldr	r0, [r2, #0]
 80020a8:	6851      	ldr	r1, [r2, #4]
 80020aa:	c303      	stmia	r3!, {r0, r1}
		if (state.TouchDetected == 128 ) {
 80020ac:	8c3b      	ldrh	r3, [r7, #32]
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d10e      	bne.n	80020d0 <ChartPanel+0x60>
			if(ButtonCheckIfPressed(state.X,state.Y,&returnButton)==CLICKED){
 80020b2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80020b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020b6:	f107 0318 	add.w	r3, r7, #24
 80020ba:	4608      	mov	r0, r1
 80020bc:	4611      	mov	r1, r2
 80020be:	461a      	mov	r2, r3
 80020c0:	f000 faf6 	bl	80026b0 <ButtonCheckIfPressed>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d100      	bne.n	80020cc <ChartPanel+0x5c>
				return;
 80020ca:	e02d      	b.n	8002128 <ChartPanel+0xb8>
			}
			state.TouchDetected=0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	843b      	strh	r3, [r7, #32]
		}

		if(results.changed){
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <ChartPanel+0xc4>)
 80020d2:	791b      	ldrb	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d023      	beq.n	8002120 <ChartPanel+0xb0>
			LCD_SetColors(0x0000,0xffff);
 80020d8:	2000      	movs	r0, #0
 80020da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020de:	f000 fe47 	bl	8002d70 <LCD_SetColors>
			LCD_DrawFullRect(0,0,240,320);
 80020e2:	2000      	movs	r0, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	22f0      	movs	r2, #240	; 0xf0
 80020e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020ec:	f001 f802 	bl	80030f4 <LCD_DrawFullRect>

			LabelDraw(&nameOfChart);
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fb13 	bl	8002720 <LabelDraw>
			ButtonDraw(&returnButton);
 80020fa:	f107 0318 	add.w	r3, r7, #24
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fa86 	bl	8002610 <ButtonDraw>

			DrawChart(10,30,220,200,pointerToDataArray,sizeOfData);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	b29b      	uxth	r3, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	9200      	str	r2, [sp, #0]
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	200a      	movs	r0, #10
 8002110:	211e      	movs	r1, #30
 8002112:	22dc      	movs	r2, #220	; 0xdc
 8002114:	23c8      	movs	r3, #200	; 0xc8
 8002116:	f000 f80f 	bl	8002138 <DrawChart>

			results.changed=0;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <ChartPanel+0xc4>)
 800211c:	2200      	movs	r2, #0
 800211e:	711a      	strb	r2, [r3, #4]

		}
		delayMSC(100);
 8002120:	2064      	movs	r0, #100	; 0x64
 8002122:	f7ff f899 	bl	8001258 <delayMSC>
	}
 8002126:	e7b9      	b.n	800209c <ChartPanel+0x2c>
}
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	08006b98 	.word	0x08006b98
 8002134:	20000164 	.word	0x20000164

08002138 <DrawChart>:
 *      Author: krzys
 */

#include "Chart.h"

void DrawChart(uint16_t x,uint16_t y,uint16_t w,uint16_t h,float * data,uint16_t dataSize){
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	80f8      	strh	r0, [r7, #6]
 8002140:	80b9      	strh	r1, [r7, #4]
 8002142:	807a      	strh	r2, [r7, #2]
 8002144:	803b      	strh	r3, [r7, #0]
	float min=10000000;
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <DrawChart+0x188>)
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
	float max=-10000000;
 800214a:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <DrawChart+0x18c>)
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
	int i=0;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
	for(;i<dataSize;i++){
 8002152:	e078      	b.n	8002246 <DrawChart+0x10e>
		if(data[i]<min && (data[i]>0.1 || data[i]<-0.1) ){
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800215a:	4413      	add	r3, r2
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	d52d      	bpl.n	80021ca <DrawChart+0x92>
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002174:	4413      	add	r3, r2
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f99d 	bl	80004b8 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	a34a      	add	r3, pc, #296	; (adr r3, 80022b0 <DrawChart+0x178>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fc78 	bl	8000a80 <__aeabi_dcmpgt>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <DrawChart+0x86>
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f989 	bl	80004b8 <__aeabi_f2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	a342      	add	r3, pc, #264	; (adr r3, 80022b8 <DrawChart+0x180>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fc46 	bl	8000a44 <__aeabi_dcmplt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <DrawChart+0x92>
			min=data[i];
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c4:	4413      	add	r3, r2
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if(data[i]>max && (data[i]>0.1 || data[i]<-0.1) ){
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021d0:	4413      	add	r3, r2
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	dd2d      	ble.n	8002240 <DrawChart+0x108>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ea:	4413      	add	r3, r2
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f962 	bl	80004b8 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	a32c      	add	r3, pc, #176	; (adr r3, 80022b0 <DrawChart+0x178>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe fc3d 	bl	8000a80 <__aeabi_dcmpgt>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d113      	bne.n	8002234 <DrawChart+0xfc>
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002212:	4413      	add	r3, r2
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f94e 	bl	80004b8 <__aeabi_f2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	a324      	add	r3, pc, #144	; (adr r3, 80022b8 <DrawChart+0x180>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fe fc0b 	bl	8000a44 <__aeabi_dcmplt>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <DrawChart+0x108>
			max=data[i];
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223a:	4413      	add	r3, r2
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28

void DrawChart(uint16_t x,uint16_t y,uint16_t w,uint16_t h,float * data,uint16_t dataSize){
	float min=10000000;
	float max=-10000000;
	int i=0;
	for(;i<dataSize;i++){
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	3301      	adds	r3, #1
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	429a      	cmp	r2, r3
 800224c:	dc82      	bgt.n	8002154 <DrawChart+0x1c>
		}
		if(data[i]>max && (data[i]>0.1 || data[i]<-0.1) ){
			max=data[i];
		}
	}
	min--;
 800224e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002252:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	max++;
 800225e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002262:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	i=0;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24

	LCD_SetTextColor(0x0000);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 fd94 	bl	8002da0 <LCD_SetTextColor>
	LCD_DrawFullRect(x,y,w,h);
 8002278:	88f8      	ldrh	r0, [r7, #6]
 800227a:	88b9      	ldrh	r1, [r7, #4]
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	883b      	ldrh	r3, [r7, #0]
 8002280:	f000 ff38 	bl	80030f4 <LCD_DrawFullRect>


	LCD_SetTextColor(0xffff);
 8002284:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002288:	f000 fd8a 	bl	8002da0 <LCD_SetTextColor>
	LCD_DrawRect(x,y,h,w);
 800228c:	88f8      	ldrh	r0, [r7, #6]
 800228e:	88b9      	ldrh	r1, [r7, #4]
 8002290:	883a      	ldrh	r2, [r7, #0]
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	f000 fefa 	bl	800308c <LCD_DrawRect>

	LCD_SetTextColor(0x07E0);
 8002298:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800229c:	f000 fd80 	bl	8002da0 <LCD_SetTextColor>

	h=h-10;
 80022a0:	883b      	ldrh	r3, [r7, #0]
 80022a2:	3b0a      	subs	r3, #10
 80022a4:	803b      	strh	r3, [r7, #0]
	y=y+5;
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	3305      	adds	r3, #5
 80022aa:	80bb      	strh	r3, [r7, #4]


	for(;i<w;i++){
 80022ac:	e077      	b.n	800239e <DrawChart+0x266>
 80022ae:	bf00      	nop
 80022b0:	9999999a 	.word	0x9999999a
 80022b4:	3fb99999 	.word	0x3fb99999
 80022b8:	9999999a 	.word	0x9999999a
 80022bc:	bfb99999 	.word	0xbfb99999
 80022c0:	4b189680 	.word	0x4b189680
 80022c4:	cb189680 	.word	0xcb189680
			if(data[i]>=min && data[i]<=max){
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ce:	4413      	add	r3, r2
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	db5a      	blt.n	8002398 <DrawChart+0x260>
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e8:	4413      	add	r3, r2
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d84d      	bhi.n	8002398 <DrawChart+0x260>
				int dataIndex=((float)i)*(((float)dataSize)/((float)w));
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	ee06 3a10 	vmov	s12, r3
 8002302:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8002306:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	ee06 3a10 	vmov	s12, r3
 8002316:	eef8 7a46 	vcvt.f32.u32	s15, s12
 800231a:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002326:	ee17 3a90 	vmov	r3, s15
 800232a:	623b      	str	r3, [r7, #32]
				float valueScaled=(float)h*((float)data[dataIndex]-min)/((float)(max-min));
 800232c:	883b      	ldrh	r3, [r7, #0]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800233c:	4413      	add	r3, r2
 800233e:	edd3 6a00 	vldr	s13, [r3]
 8002342:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002346:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800234a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002352:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002356:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800235a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800235e:	edc7 7a07 	vstr	s15, [r7, #28]

				LCD_DrawLine(x+i,(y+h)-valueScaled, 1, LCD_DIR_HORIZONTAL);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	b29a      	uxth	r2, r3
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4413      	add	r3, r2
 800236a:	b29a      	uxth	r2, r3
 800236c:	88b9      	ldrh	r1, [r7, #4]
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	440b      	add	r3, r1
 8002372:	ee06 3a10 	vmov	s12, r3
 8002376:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800237a:	edd7 7a07 	vldr	s15, [r7, #28]
 800237e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002386:	ee17 3a90 	vmov	r3, s15
 800238a:	b29b      	uxth	r3, r3
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	2201      	movs	r2, #1
 8002392:	2300      	movs	r3, #0
 8002394:	f000 fe16 	bl	8002fc4 <LCD_DrawLine>

	h=h-10;
	y=y+5;


	for(;i<w;i++){
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3301      	adds	r3, #1
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dc90      	bgt.n	80022c8 <DrawChart+0x190>

				LCD_DrawLine(x+i,(y+h)-valueScaled, 1, LCD_DIR_HORIZONTAL);
			}
	}

	LCD_SetTextColor(0xffff);
 80023a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023aa:	f000 fcf9 	bl	8002da0 <LCD_SetTextColor>

	Label label={x+5,y+5,"Min: "};
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	3305      	adds	r3, #5
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	82bb      	strh	r3, [r7, #20]
 80023b6:	88bb      	ldrh	r3, [r7, #4]
 80023b8:	3305      	adds	r3, #5
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	82fb      	strh	r3, [r7, #22]
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <DrawChart+0x304>)
 80023c0:	61bb      	str	r3, [r7, #24]
	LabelDraw(&label);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f9aa 	bl	8002720 <LabelDraw>
	DrawFloat(x+45,y+5,(float)min+1,2);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	332d      	adds	r3, #45	; 0x2d
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	3305      	adds	r3, #5
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80023dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	2202      	movs	r2, #2
 80023ee:	f000 f9c9 	bl	8002784 <DrawFloat>

	Label label2={x+5,y+25,"Max: "};
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	3305      	adds	r3, #5
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	81bb      	strh	r3, [r7, #12]
 80023fa:	88bb      	ldrh	r3, [r7, #4]
 80023fc:	3319      	adds	r3, #25
 80023fe:	b29b      	uxth	r3, r3
 8002400:	81fb      	strh	r3, [r7, #14]
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <DrawChart+0x308>)
 8002404:	613b      	str	r3, [r7, #16]
	LabelDraw(&label2);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f988 	bl	8002720 <LabelDraw>
	DrawFloat(x+45,y+25,(float)max-1,2);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	332d      	adds	r3, #45	; 0x2d
 8002414:	b29a      	uxth	r2, r3
 8002416:	88bb      	ldrh	r3, [r7, #4]
 8002418:	3319      	adds	r3, #25
 800241a:	b29b      	uxth	r3, r3
 800241c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002420:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	2202      	movs	r2, #2
 8002432:	f000 f9a7 	bl	8002784 <DrawFloat>
}
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	08006ba0 	.word	0x08006ba0
 8002440:	08006ba8 	.word	0x08006ba8
 8002444:	f3af 8000 	nop.w

08002448 <reverse>:
#include<stdio.h>
#include<math.h>

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3b01      	subs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800245c:	e018      	b.n	8002490 <reverse+0x48>
    {
        temp = str[i];
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	440a      	add	r2, r1
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	3b01      	subs	r3, #1
 800248e:	613b      	str	r3, [r7, #16]

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
    while (i<j)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	dbe2      	blt.n	800245e <reverse+0x16>
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++; j--;
    }
}
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop

080024a4 <intToStr>:

 // Converts a given integer x to string str[].  d is the number
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
    int i = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
    while (x)
 80024b4:	e01c      	b.n	80024f0 <intToStr+0x4c>
    {
        str[i++] = (x%10) + '0';
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	617a      	str	r2, [r7, #20]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	18d0      	adds	r0, r2, r3
 80024c0:	68f9      	ldr	r1, [r7, #12]
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <intToStr+0x88>)
 80024c4:	fb83 2301 	smull	r2, r3, r3, r1
 80024c8:	109a      	asrs	r2, r3, #2
 80024ca:	17cb      	asrs	r3, r1, #31
 80024cc:	1ad2      	subs	r2, r2, r3
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	1aca      	subs	r2, r1, r3
 80024d8:	b2d3      	uxtb	r3, r2
 80024da:	3330      	adds	r3, #48	; 0x30
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	7003      	strb	r3, [r0, #0]
        x = x/10;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a12      	ldr	r2, [pc, #72]	; (800252c <intToStr+0x88>)
 80024e4:	fb82 1203 	smull	r1, r2, r2, r3
 80024e8:	1092      	asrs	r2, r2, #2
 80024ea:	17db      	asrs	r3, r3, #31
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1df      	bne.n	80024b6 <intToStr+0x12>
        x = x/10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80024f6:	e006      	b.n	8002506 <intToStr+0x62>
        str[i++] = '0';
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	617a      	str	r2, [r7, #20]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	4413      	add	r3, r2
 8002502:	2230      	movs	r2, #48	; 0x30
 8002504:	701a      	strb	r2, [r3, #0]
        x = x/10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	dbf4      	blt.n	80024f8 <intToStr+0x54>
        str[i++] = '0';

    reverse(str, i);
 800250e:	68b8      	ldr	r0, [r7, #8]
 8002510:	6979      	ldr	r1, [r7, #20]
 8002512:	f7ff ff99 	bl	8002448 <reverse>
    str[i] = '\0';
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4413      	add	r3, r2
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
    return i;
 8002520:	697b      	ldr	r3, [r7, #20]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	66666667 	.word	0x66666667

08002530 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	ed87 0a03 	vstr	s0, [r7, #12]
 800253a:	60b8      	str	r0, [r7, #8]
 800253c:	6079      	str	r1, [r7, #4]
	if(n<0){
 800253e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	d50b      	bpl.n	8002564 <ftoa+0x34>
	    n=-n;
 800254c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002550:	eef1 7a67 	vneg.f32	s15, s15
 8002554:	edc7 7a03 	vstr	s15, [r7, #12]
	    res[0]='-';
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	222d      	movs	r2, #45	; 0x2d
 800255c:	701a      	strb	r2, [r3, #0]
	    res++;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
	}
    // Extract integer part
    int ipart = (int)n;
 8002564:	edd7 7a03 	vldr	s15, [r7, #12]
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	ee17 3a90 	vmov	r3, s15
 8002570:	61fb      	str	r3, [r7, #28]




    // Extract floating part
    float fpart = n - (float)ipart;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	ee07 3a10 	vmov	s14, r3
 8002578:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 800257c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002584:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002588:	69f8      	ldr	r0, [r7, #28]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	f7ff ff89 	bl	80024a4 <intToStr>
 8002592:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d031      	beq.n	80025fe <ftoa+0xce>
    {
        res[i] = '.';  // add dot
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4413      	add	r3, r2
 80025a0:	222e      	movs	r2, #46	; 0x2e
 80025a2:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80025a4:	69b8      	ldr	r0, [r7, #24]
 80025a6:	f7fd ff87 	bl	80004b8 <__aeabi_f2d>
 80025aa:	4604      	mov	r4, r0
 80025ac:	460d      	mov	r5, r1
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fd ff70 	bl	8000494 <__aeabi_i2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8002608 <ftoa+0xd8>
 80025bc:	ec43 2b11 	vmov	d1, r2, r3
 80025c0:	f003 f93a 	bl	8005838 <pow>
 80025c4:	ec53 2b10 	vmov	r2, r3, d0
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fd ffc8 	bl	8000560 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fa5c 	bl	8000a94 <__aeabi_d2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80025e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 1a90 	vmov	r1, s15
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	4413      	add	r3, r2
 80025f4:	4608      	mov	r0, r1
 80025f6:	4619      	mov	r1, r3
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	f7ff ff53 	bl	80024a4 <intToStr>
    }
}
 80025fe:	3720      	adds	r7, #32
 8002600:	46bd      	mov	sp, r7
 8002602:	bdb0      	pop	{r4, r5, r7, pc}
 8002604:	f3af 8000 	nop.w
 8002608:	00000000 	.word	0x00000000
 800260c:	40240000 	.word	0x40240000

08002610 <ButtonDraw>:


#include "Button.h"
#include "FloatConverter.h"

void ButtonDraw(Button * toDraw){
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16x24);
 8002618:	4824      	ldr	r0, [pc, #144]	; (80026ac <ButtonDraw+0x9c>)
 800261a:	f000 fbd1 	bl	8002dc0 <LCD_SetFont>


	LCD_SetColors(0xffff,0x0000);
 800261e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002622:	2100      	movs	r1, #0
 8002624:	f000 fba4 	bl	8002d70 <LCD_SetColors>
	LCD_DrawFullRect(toDraw->x-2,toDraw->y-2,strlen(toDraw->string)*16+4,24+4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	3b02      	subs	r3, #2
 800262e:	b29d      	uxth	r5, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	3b02      	subs	r3, #2
 8002636:	b29c      	uxth	r4, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f8f3 	bl	8005828 <strlen>
 8002642:	4603      	mov	r3, r0
 8002644:	b29b      	uxth	r3, r3
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	b29b      	uxth	r3, r3
 800264a:	3304      	adds	r3, #4
 800264c:	b29b      	uxth	r3, r3
 800264e:	4628      	mov	r0, r5
 8002650:	4621      	mov	r1, r4
 8002652:	461a      	mov	r2, r3
 8002654:	231c      	movs	r3, #28
 8002656:	f000 fd4d 	bl	80030f4 <LCD_DrawFullRect>

	LCD_SetTextColor(0xffff);
 800265a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800265e:	f000 fb9f 	bl	8002da0 <LCD_SetTextColor>
	int i=0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
	for(;toDraw->string[i]!='\0';++i) LCD_DisplayChar(toDraw->y,toDraw->x+i*16,toDraw->string[i]);
 8002666:	e016      	b.n	8002696 <ButtonDraw+0x86>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8859      	ldrh	r1, [r3, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	b29b      	uxth	r3, r3
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	b29b      	uxth	r3, r3
 8002678:	4413      	add	r3, r2
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6858      	ldr	r0, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4403      	add	r3, r0
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4608      	mov	r0, r1
 8002688:	4611      	mov	r1, r2
 800268a:	461a      	mov	r2, r3
 800268c:	f000 fc76 	bl	8002f7c <LCD_DisplayChar>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3301      	adds	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e1      	bne.n	8002668 <ButtonDraw+0x58>
}
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000014 	.word	0x20000014

080026b0 <ButtonCheckIfPressed>:

int ButtonCheckIfPressed(uint16_t x,uint16_t y,Button * toCheck){
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	460b      	mov	r3, r1
 80026b8:	603a      	str	r2, [r7, #0]
 80026ba:	4602      	mov	r2, r0
 80026bc:	80fa      	strh	r2, [r7, #6]
 80026be:	80bb      	strh	r3, [r7, #4]
	int fx=toCheck->x-5;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	3b05      	subs	r3, #5
 80026c6:	617b      	str	r3, [r7, #20]
	int fy=toCheck->y-5;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	885b      	ldrh	r3, [r3, #2]
 80026cc:	3b05      	subs	r3, #5
 80026ce:	613b      	str	r3, [r7, #16]
	int sy=toCheck->y+24+5;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	885b      	ldrh	r3, [r3, #2]
 80026d4:	331d      	adds	r3, #29
 80026d6:	60fb      	str	r3, [r7, #12]
	int sx=toCheck->x+strlen(toCheck->string)*16+5;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	461c      	mov	r4, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 f8a0 	bl	8005828 <strlen>
 80026e8:	4603      	mov	r3, r0
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4423      	add	r3, r4
 80026ee:	3305      	adds	r3, #5
 80026f0:	60bb      	str	r3, [r7, #8]

	if(fy<y && sy>y && fx<x && sx>x){
 80026f2:	88ba      	ldrh	r2, [r7, #4]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	dd0d      	ble.n	8002716 <ButtonCheckIfPressed+0x66>
 80026fa:	88ba      	ldrh	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	429a      	cmp	r2, r3
 8002700:	da09      	bge.n	8002716 <ButtonCheckIfPressed+0x66>
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	429a      	cmp	r2, r3
 8002708:	dd05      	ble.n	8002716 <ButtonCheckIfPressed+0x66>
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	da01      	bge.n	8002716 <ButtonCheckIfPressed+0x66>
		return CLICKED;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <ButtonCheckIfPressed+0x68>
	}

	return UNCLICKED;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bd90      	pop	{r4, r7, pc}

08002720 <LabelDraw>:


void LabelDraw(Label * toDraw){
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font8x12);
 8002728:	4815      	ldr	r0, [pc, #84]	; (8002780 <LabelDraw+0x60>)
 800272a:	f000 fb49 	bl	8002dc0 <LCD_SetFont>
	LCD_SetColors(0xffff,0x0000);
 800272e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002732:	2100      	movs	r1, #0
 8002734:	f000 fb1c 	bl	8002d70 <LCD_SetColors>
	int i=0;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
	for(;toDraw->string[i]!='\0';++i) LCD_DisplayChar(toDraw->y,toDraw->x+i*8,toDraw->string[i]);
 800273c:	e016      	b.n	800276c <LabelDraw+0x4c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8859      	ldrh	r1, [r3, #2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	b29b      	uxth	r3, r3
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	b29b      	uxth	r3, r3
 800274e:	4413      	add	r3, r2
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6858      	ldr	r0, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4403      	add	r3, r0
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	f000 fc0b 	bl	8002f7c <LCD_DisplayChar>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3301      	adds	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e1      	bne.n	800273e <LabelDraw+0x1e>
}
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2000001c 	.word	0x2000001c

08002784 <DrawFloat>:

void DrawFloat(uint16_t x,uint16_t y,float data,int precision){
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af00      	add	r7, sp, #0
 800278a:	460b      	mov	r3, r1
 800278c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	4602      	mov	r2, r0
 8002794:	81fa      	strh	r2, [r7, #14]
 8002796:	81bb      	strh	r3, [r7, #12]
	char buffer[20];
	ftoa (data,buffer,precision);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	ed97 0a02 	vldr	s0, [r7, #8]
 80027a0:	4618      	mov	r0, r3
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f7ff fec4 	bl	8002530 <ftoa>
	Label l={x,y,buffer};
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	82bb      	strh	r3, [r7, #20]
 80027ac:	89bb      	ldrh	r3, [r7, #12]
 80027ae:	82fb      	strh	r3, [r7, #22]
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	61bb      	str	r3, [r7, #24]
	LabelDraw(&l);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffb0 	bl	8002720 <LabelDraw>
}
 80027c0:	3730      	adds	r7, #48	; 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop

080027c8 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b092      	sub	sp, #72	; 0x48
 80027cc:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 80027ce:	f000 f835 	bl	800283c <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 80027d2:	2001      	movs	r0, #1
 80027d4:	2101      	movs	r1, #1
 80027d6:	f001 fedb 	bl	8004590 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 84 Mhz of SD clock frequency (168Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
 80027da:	2302      	movs	r3, #2
 80027dc:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (6x11.90ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80027de:	2307      	movs	r3, #7
 80027e0:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.90ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;
 80027e2:	2304      	movs	r3, #4
 80027e4:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=63 (6x11.90ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 7;         
 80027e6:	2307      	movs	r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
  /* TWR:  2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
 80027ea:	2302      	movs	r3, #2
 80027ec:	613b      	str	r3, [r7, #16]
  /* TRP:  15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
 80027ee:	2302      	movs	r3, #2
 80027f0:	617b      	str	r3, [r7, #20]
  /* TRCD: 15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 80027fe:	2304      	movs	r3, #4
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8002802:	2310      	movs	r3, #16
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 800280a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8002810:	2300      	movs	r3, #0
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8002814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 800281a:	2300      	movs	r3, #0
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 800281e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8002824:	463b      	mov	r3, r7
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4618      	mov	r0, r3
 800282e:	f002 fcc1 	bl	80051b4 <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8002832:	f000 f90d 	bl	8002a50 <SDRAM_InitSequence>
  
}
 8002836:	3748      	adds	r7, #72	; 0x48
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8002842:	207e      	movs	r0, #126	; 0x7e
 8002844:	2101      	movs	r1, #1
 8002846:	f001 fe85 	bl	8004554 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800284a:	2302      	movs	r3, #2
 800284c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800284e:	2302      	movs	r3, #2
 8002850:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002852:	2300      	movs	r3, #0
 8002854:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 800285a:	4877      	ldr	r0, [pc, #476]	; (8002a38 <SDRAM_GPIOConfig+0x1fc>)
 800285c:	2105      	movs	r1, #5
 800285e:	220c      	movs	r2, #12
 8002860:	f002 fc62 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8002864:	4874      	ldr	r0, [pc, #464]	; (8002a38 <SDRAM_GPIOConfig+0x1fc>)
 8002866:	2106      	movs	r1, #6
 8002868:	220c      	movs	r2, #12
 800286a:	f002 fc5d 	bl	8005128 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 800286e:	2360      	movs	r3, #96	; 0x60
 8002870:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002872:	463b      	mov	r3, r7
 8002874:	4870      	ldr	r0, [pc, #448]	; (8002a38 <SDRAM_GPIOConfig+0x1fc>)
 8002876:	4619      	mov	r1, r3
 8002878:	f002 fb94 	bl	8004fa4 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 800287c:	486f      	ldr	r0, [pc, #444]	; (8002a3c <SDRAM_GPIOConfig+0x200>)
 800287e:	2100      	movs	r1, #0
 8002880:	220c      	movs	r2, #12
 8002882:	f002 fc51 	bl	8005128 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8002886:	2301      	movs	r3, #1
 8002888:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800288a:	463b      	mov	r3, r7
 800288c:	486b      	ldr	r0, [pc, #428]	; (8002a3c <SDRAM_GPIOConfig+0x200>)
 800288e:	4619      	mov	r1, r3
 8002890:	f002 fb88 	bl	8004fa4 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 8002894:	486a      	ldr	r0, [pc, #424]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 8002896:	2100      	movs	r1, #0
 8002898:	220c      	movs	r2, #12
 800289a:	f002 fc45 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 800289e:	4868      	ldr	r0, [pc, #416]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	220c      	movs	r2, #12
 80028a4:	f002 fc40 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 80028a8:	4865      	ldr	r0, [pc, #404]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028aa:	2108      	movs	r1, #8
 80028ac:	220c      	movs	r2, #12
 80028ae:	f002 fc3b 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 80028b2:	4863      	ldr	r0, [pc, #396]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028b4:	2109      	movs	r1, #9
 80028b6:	220c      	movs	r2, #12
 80028b8:	f002 fc36 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 80028bc:	4860      	ldr	r0, [pc, #384]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028be:	210a      	movs	r1, #10
 80028c0:	220c      	movs	r2, #12
 80028c2:	f002 fc31 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 80028c6:	485e      	ldr	r0, [pc, #376]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028c8:	210e      	movs	r1, #14
 80028ca:	220c      	movs	r2, #12
 80028cc:	f002 fc2c 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 80028d0:	485b      	ldr	r0, [pc, #364]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028d2:	210f      	movs	r1, #15
 80028d4:	220c      	movs	r2, #12
 80028d6:	f002 fc27 	bl	8005128 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 80028da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80028de:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80028e0:	463b      	mov	r3, r7
 80028e2:	4857      	ldr	r0, [pc, #348]	; (8002a40 <SDRAM_GPIOConfig+0x204>)
 80028e4:	4619      	mov	r1, r3
 80028e6:	f002 fb5d 	bl	8004fa4 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 80028ea:	4856      	ldr	r0, [pc, #344]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	220c      	movs	r2, #12
 80028f0:	f002 fc1a 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 80028f4:	4853      	ldr	r0, [pc, #332]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	220c      	movs	r2, #12
 80028fa:	f002 fc15 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 80028fe:	4851      	ldr	r0, [pc, #324]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002900:	2107      	movs	r1, #7
 8002902:	220c      	movs	r2, #12
 8002904:	f002 fc10 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8002908:	484e      	ldr	r0, [pc, #312]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 800290a:	2108      	movs	r1, #8
 800290c:	220c      	movs	r2, #12
 800290e:	f002 fc0b 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8002912:	484c      	ldr	r0, [pc, #304]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002914:	2109      	movs	r1, #9
 8002916:	220c      	movs	r2, #12
 8002918:	f002 fc06 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 800291c:	4849      	ldr	r0, [pc, #292]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 800291e:	210a      	movs	r1, #10
 8002920:	220c      	movs	r2, #12
 8002922:	f002 fc01 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8002926:	4847      	ldr	r0, [pc, #284]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002928:	210b      	movs	r1, #11
 800292a:	220c      	movs	r2, #12
 800292c:	f002 fbfc 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8002930:	4844      	ldr	r0, [pc, #272]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002932:	210c      	movs	r1, #12
 8002934:	220c      	movs	r2, #12
 8002936:	f002 fbf7 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 800293a:	4842      	ldr	r0, [pc, #264]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 800293c:	210d      	movs	r1, #13
 800293e:	220c      	movs	r2, #12
 8002940:	f002 fbf2 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8002944:	483f      	ldr	r0, [pc, #252]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002946:	210e      	movs	r1, #14
 8002948:	220c      	movs	r2, #12
 800294a:	f002 fbed 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 800294e:	483d      	ldr	r0, [pc, #244]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002950:	210f      	movs	r1, #15
 8002952:	220c      	movs	r2, #12
 8002954:	f002 fbe8 	bl	8005128 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8002958:	f64f 7383 	movw	r3, #65411	; 0xff83
 800295c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800295e:	463b      	mov	r3, r7
 8002960:	4838      	ldr	r0, [pc, #224]	; (8002a44 <SDRAM_GPIOConfig+0x208>)
 8002962:	4619      	mov	r1, r3
 8002964:	f002 fb1e 	bl	8004fa4 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8002968:	4837      	ldr	r0, [pc, #220]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 800296a:	2100      	movs	r1, #0
 800296c:	220c      	movs	r2, #12
 800296e:	f002 fbdb 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8002972:	4835      	ldr	r0, [pc, #212]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 8002974:	2101      	movs	r1, #1
 8002976:	220c      	movs	r2, #12
 8002978:	f002 fbd6 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 800297c:	4832      	ldr	r0, [pc, #200]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 800297e:	2102      	movs	r1, #2
 8002980:	220c      	movs	r2, #12
 8002982:	f002 fbd1 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8002986:	4830      	ldr	r0, [pc, #192]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 8002988:	2103      	movs	r1, #3
 800298a:	220c      	movs	r2, #12
 800298c:	f002 fbcc 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8002990:	482d      	ldr	r0, [pc, #180]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 8002992:	2104      	movs	r1, #4
 8002994:	220c      	movs	r2, #12
 8002996:	f002 fbc7 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 800299a:	482b      	ldr	r0, [pc, #172]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 800299c:	2105      	movs	r1, #5
 800299e:	220c      	movs	r2, #12
 80029a0:	f002 fbc2 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 80029a4:	4828      	ldr	r0, [pc, #160]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 80029a6:	210b      	movs	r1, #11
 80029a8:	220c      	movs	r2, #12
 80029aa:	f002 fbbd 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 80029ae:	4826      	ldr	r0, [pc, #152]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 80029b0:	210c      	movs	r1, #12
 80029b2:	220c      	movs	r2, #12
 80029b4:	f002 fbb8 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 80029b8:	4823      	ldr	r0, [pc, #140]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 80029ba:	210d      	movs	r1, #13
 80029bc:	220c      	movs	r2, #12
 80029be:	f002 fbb3 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 80029c2:	4821      	ldr	r0, [pc, #132]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 80029c4:	210e      	movs	r1, #14
 80029c6:	220c      	movs	r2, #12
 80029c8:	f002 fbae 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 80029cc:	481e      	ldr	r0, [pc, #120]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 80029ce:	210f      	movs	r1, #15
 80029d0:	220c      	movs	r2, #12
 80029d2:	f002 fba9 	bl	8005128 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80029d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029da:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80029dc:	463b      	mov	r3, r7
 80029de:	481a      	ldr	r0, [pc, #104]	; (8002a48 <SDRAM_GPIOConfig+0x20c>)
 80029e0:	4619      	mov	r1, r3
 80029e2:	f002 fadf 	bl	8004fa4 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 80029e6:	4819      	ldr	r0, [pc, #100]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 80029e8:	2100      	movs	r1, #0
 80029ea:	220c      	movs	r2, #12
 80029ec:	f002 fb9c 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 80029f0:	4816      	ldr	r0, [pc, #88]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	220c      	movs	r2, #12
 80029f6:	f002 fb97 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 80029fa:	4814      	ldr	r0, [pc, #80]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 80029fc:	2104      	movs	r1, #4
 80029fe:	220c      	movs	r2, #12
 8002a00:	f002 fb92 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8002a04:	4811      	ldr	r0, [pc, #68]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 8002a06:	2105      	movs	r1, #5
 8002a08:	220c      	movs	r2, #12
 8002a0a:	f002 fb8d 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8002a0e:	480f      	ldr	r0, [pc, #60]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 8002a10:	2108      	movs	r1, #8
 8002a12:	220c      	movs	r2, #12
 8002a14:	f002 fb88 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8002a18:	480c      	ldr	r0, [pc, #48]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	220c      	movs	r2, #12
 8002a1e:	f002 fb83 	bl	8005128 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8002a22:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a26:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8002a28:	463b      	mov	r3, r7
 8002a2a:	4808      	ldr	r0, [pc, #32]	; (8002a4c <SDRAM_GPIOConfig+0x210>)
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f002 fab9 	bl	8004fa4 <GPIO_Init>
}
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40021400 	.word	0x40021400
 8002a4c:	40021800 	.word	0x40021800

08002a50 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002a6a:	bf00      	nop
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	2120      	movs	r1, #32
 8002a70:	f002 fc80 	bl	8005374 <FMC_GetFlagStatus>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f8      	bne.n	8002a6c <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 fc47 	bl	8005310 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8002a82:	200a      	movs	r0, #10
 8002a84:	f000 f85a 	bl	8002b3c <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002a98:	bf00      	nop
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	f002 fc69 	bl	8005374 <FMC_GetFlagStatus>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f8      	bne.n	8002a9a <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fc30 	bl	8005310 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002ac0:	bf00      	nop
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	f002 fc55 	bl	8005374 <FMC_GetFlagStatus>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f8      	bne.n	8002ac2 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fc1c 	bl	8005310 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002ad8:	bf00      	nop
 8002ada:	2001      	movs	r0, #1
 8002adc:	2120      	movs	r1, #32
 8002ade:	f002 fc49 	bl	8005374 <FMC_GetFlagStatus>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f8      	bne.n	8002ada <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fc10 	bl	8005310 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8002af0:	f240 2331 	movw	r3, #561	; 0x231
 8002af4:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8002af6:	2304      	movs	r3, #4
 8002af8:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002afa:	2308      	movs	r3, #8
 8002afc:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002b06:	bf00      	nop
 8002b08:	2001      	movs	r0, #1
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	f002 fc32 	bl	8005374 <FMC_GetFlagStatus>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f8      	bne.n	8002b08 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 fbf9 	bl	8005310 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (7.81 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(683);
 8002b1e:	f240 20ab 	movw	r0, #683	; 0x2ab
 8002b22:	f002 fc15 	bl	8005350 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002b26:	bf00      	nop
 8002b28:	2001      	movs	r0, #1
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	f002 fc22 	bl	8005374 <FMC_GetFlagStatus>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f8      	bne.n	8002b28 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <delay+0x30>)
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e002      	b.n	8002b5a <delay+0x1e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <delay+0x18>
  {
  }
}
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	000186a0 	.word	0x000186a0

08002b70 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b092      	sub	sp, #72	; 0x48
 8002b74:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  GPIO_InitTypeDef       GPIO_InitStructure;
  
  /* Enable clock for NCS port */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002b76:	2008      	movs	r0, #8
 8002b78:	2101      	movs	r1, #1
 8002b7a:	f001 fceb 	bl	8004554 <RCC_AHB1PeriphClockCmd>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8002b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002b84:	2302      	movs	r3, #2
 8002b86:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	482d      	ldr	r0, [pc, #180]	; (8002c4c <LCD_Init+0xdc>)
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f002 fa03 	bl	8004fa4 <GPIO_Init>
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8002b9e:	f000 fca5 	bl	80034ec <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f8ae 	bl	8002d04 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f000 f8ab 	bl	8002d04 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 8002bae:	f000 fccf 	bl	8003550 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 8002bb2:	f000 fb53 	bl	800325c <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8002bb6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002bba:	2101      	movs	r1, #1
 8002bbc:	f001 fd24 	bl	8004608 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 8002bc0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	f001 fcc5 	bl	8004554 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 8002bca:	f000 fd23 	bl	8003614 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 8002bce:	f7ff fdfb 	bl	80027c8 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8002be2:	2300      	movs	r3, #0
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8002be6:	2300      	movs	r3, #0
 8002be8:	643b      	str	r3, [r7, #64]	; 0x40
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 8002bea:	2300      	movs	r3, #0
 8002bec:	647b      	str	r3, [r7, #68]	; 0x44
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 8002bee:	20c0      	movs	r0, #192	; 0xc0
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	f001 fbbe 	bl	8004374 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8002bf8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bfc:	f001 fc8c 	bl	8004518 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f001 fbcf 	bl	80043a4 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8002c06:	bf00      	nop
 8002c08:	203d      	movs	r0, #61	; 0x3d
 8002c0a:	f001 fd75 	bl	80046f8 <RCC_GetFlagStatus>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f9      	beq.n	8002c08 <LCD_Init+0x98>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8002c14:	2309      	movs	r3, #9
 8002c16:	61fb      	str	r3, [r7, #28]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	623b      	str	r3, [r7, #32]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8002c1c:	231d      	movs	r3, #29
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8002c20:	2303      	movs	r3, #3
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8002c24:	f240 130d 	movw	r3, #269	; 0x10d
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8002c2a:	f240 1343 	movw	r3, #323	; 0x143
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8002c30:	f240 1317 	movw	r3, #279	; 0x117
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8002c36:	f240 1347 	movw	r3, #327	; 0x147
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  LTDC_Init(&LTDC_InitStruct);
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fd93 	bl	800476c <LTDC_Init>
}  
 8002c46:	3748      	adds	r7, #72	; 0x48
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40020c00 	.word	0x40020c00

08002c50 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b090      	sub	sp, #64	; 0x40
 8002c54:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8002c56:	231e      	movs	r3, #30
 8002c58:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 8002c5a:	f240 130d 	movw	r3, #269	; 0x10d
 8002c5e:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8002c60:	2304      	movs	r3, #4
 8002c62:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8002c64:	f240 1343 	movw	r3, #323	; 0x143
 8002c68:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 8002c6e:	23ff      	movs	r3, #255	; 0xff
 8002c70:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8002c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8002c88:	2305      	movs	r3, #5
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 8002c8c:	f240 13e3 	movw	r3, #483	; 0x1e3
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8002c92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8002c98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 8002c9e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4813      	ldr	r0, [pc, #76]	; (8002cf4 <LCD_LayerInit+0xa4>)
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f001 fe3b 	bl	8004924 <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <LCD_LayerInit+0xa8>)
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 8002cb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8002cb8:	2307      	movs	r3, #7
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	480f      	ldr	r0, [pc, #60]	; (8002cfc <LCD_LayerInit+0xac>)
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f001 fe2f 	bl	8004924 <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f001 fe1e 	bl	8004908 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <LCD_LayerInit+0xa4>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	f001 fec2 	bl	8004a58 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8002cd4:	4809      	ldr	r0, [pc, #36]	; (8002cfc <LCD_LayerInit+0xac>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	f001 febe 	bl	8004a58 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f001 fe13 	bl	8004908 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8002ce2:	4807      	ldr	r0, [pc, #28]	; (8002d00 <LCD_LayerInit+0xb0>)
 8002ce4:	f000 f86c 	bl	8002dc0 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f001 fdf1 	bl	80048d0 <LTDC_DitherCmd>
}
 8002cee:	3740      	adds	r7, #64	; 0x40
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40016884 	.word	0x40016884
 8002cf8:	d0050000 	.word	0xd0050000
 8002cfc:	40016904 	.word	0x40016904
 8002d00:	20000014 	.word	0x20000014

08002d04 <LCD_ChipSelect>:
  * @brief  Enable or Disable the LCD through CS pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8002d14:	4805      	ldr	r0, [pc, #20]	; (8002d2c <LCD_ChipSelect+0x28>)
 8002d16:	2104      	movs	r1, #4
 8002d18:	f002 f9e0 	bl	80050dc <GPIO_ResetBits>
 8002d1c:	e003      	b.n	8002d26 <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 8002d1e:	4803      	ldr	r0, [pc, #12]	; (8002d2c <LCD_ChipSelect+0x28>)
 8002d20:	2104      	movs	r1, #4
 8002d22:	f002 f9cd 	bl	80050c0 <GPIO_SetBits>
  }
}
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40020800 	.word	0x40020800

08002d30 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(__IO uint32_t Layerx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <LCD_SetLayer+0x34>)
 8002d40:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8002d44:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <LCD_SetLayer+0x38>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e005      	b.n	8002d5a <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <LCD_SetLayer+0x34>)
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <LCD_SetLayer+0x3c>)
 8002d52:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <LCD_SetLayer+0x38>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }
}  
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	20000008 	.word	0x20000008
 8002d68:	20000158 	.word	0x20000158
 8002d6c:	d0050000 	.word	0xd0050000

08002d70 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(__IO uint16_t TextColor, __IO uint16_t BackColor)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	80fa      	strh	r2, [r7, #6]
 8002d7c:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <LCD_SetColors+0x28>)
 8002d84:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 8002d86:	88bb      	ldrh	r3, [r7, #4]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <LCD_SetColors+0x2c>)
 8002d8c:	801a      	strh	r2, [r3, #0]
}
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	20000154 	.word	0x20000154
 8002d9c:	20000004 	.word	0x20000004

08002da0 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <LCD_SetTextColor+0x1c>)
 8002db0:	801a      	strh	r2, [r3, #0]
}
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	20000154 	.word	0x20000154

08002dc0 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <LCD_SetFont+0x18>)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	20000150 	.word	0x20000150

08002ddc <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <LCD_SetTransparency+0x34>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4808      	ldr	r0, [pc, #32]	; (8002e14 <LCD_SetTransparency+0x38>)
 8002df2:	4619      	mov	r1, r3
 8002df4:	f001 fe4c 	bl	8004a90 <LTDC_LayerAlpha>
 8002df8:	e004      	b.n	8002e04 <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4806      	ldr	r0, [pc, #24]	; (8002e18 <LCD_SetTransparency+0x3c>)
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f001 fe46 	bl	8004a90 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f001 fd7f 	bl	8004908 <LTDC_ReloadConfig>
}
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000158 	.word	0x20000158
 8002e14:	40016884 	.word	0x40016884
 8002e18:	40016904 	.word	0x40016904

08002e1c <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e009      	b.n	8002e44 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	005a      	lsls	r2, r3, #1
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <LCD_Clear+0x3c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e4a:	d3f1      	bcc.n	8002e30 <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008

08002e5c <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	460b      	mov	r3, r1
 8002e64:	603a      	str	r2, [r7, #0]
 8002e66:	4602      	mov	r2, r0
 8002e68:	80fa      	strh	r2, [r7, #6]
 8002e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8002e88:	88bb      	ldrh	r3, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e05c      	b.n	8002f50 <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e048      	b.n	8002f2e <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <LCD_DrawChar+0x10c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	8899      	ldrh	r1, [r3, #4]
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <LCD_DrawChar+0x110>)
 8002eb0:	fba3 0301 	umull	r0, r3, r3, r1
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	4099      	lsls	r1, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	fa41 f303 	asr.w	r3, r1, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <LCD_DrawChar+0x78>
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <LCD_DrawChar+0x10c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	889b      	ldrh	r3, [r3, #4]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d911      	bls.n	8002ef8 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	fa42 f303 	asr.w	r3, r2, r3
 8002ee6:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002eee:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <LCD_DrawChar+0x10c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	889b      	ldrh	r3, [r3, #4]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d90a      	bls.n	8002f0e <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	005a      	lsls	r2, r3, #1
 8002efc:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <LCD_DrawChar+0x114>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	441a      	add	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4413      	add	r3, r2
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <LCD_DrawChar+0x118>)
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	e009      	b.n	8002f22 <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	005a      	lsls	r2, r3, #1
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <LCD_DrawChar+0x114>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	441a      	add	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <LCD_DrawChar+0x11c>)
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3301      	adds	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <LCD_DrawChar+0x10c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	889b      	ldrh	r3, [r3, #4]
 8002f34:	461a      	mov	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d8af      	bhi.n	8002e9c <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <LCD_DrawChar+0x10c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	889b      	ldrh	r3, [r3, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	33f0      	adds	r3, #240	; 0xf0
 8002f48:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <LCD_DrawChar+0x10c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	88db      	ldrh	r3, [r3, #6]
 8002f56:	461a      	mov	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d89b      	bhi.n	8002e96 <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	20000150 	.word	0x20000150
 8002f6c:	aaaaaaab 	.word	0xaaaaaaab
 8002f70:	20000008 	.word	0x20000008
 8002f74:	20000004 	.word	0x20000004
 8002f78:	20000154 	.word	0x20000154

08002f7c <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4613      	mov	r3, r2
 8002f84:	4602      	mov	r2, r0
 8002f86:	80fa      	strh	r2, [r7, #6]
 8002f88:	460a      	mov	r2, r1
 8002f8a:	80ba      	strh	r2, [r7, #4]
 8002f8c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	3b20      	subs	r3, #32
 8002f92:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <LCD_DisplayChar+0x44>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <LCD_DisplayChar+0x44>)
 8002f9e:	6809      	ldr	r1, [r1, #0]
 8002fa0:	88c9      	ldrh	r1, [r1, #6]
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	88f9      	ldrh	r1, [r7, #6]
 8002fac:	88ba      	ldrh	r2, [r7, #4]
 8002fae:	4608      	mov	r0, r1
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7ff ff52 	bl	8002e5c <LCD_DrawChar>
}
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000150 	.word	0x20000150

08002fc4 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b090      	sub	sp, #64	; 0x40
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	80f8      	strh	r0, [r7, #6]
 8002fcc:	80b9      	strh	r1, [r7, #4]
 8002fce:	807a      	strh	r2, [r7, #2]
 8002fd0:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002fda:	2300      	movs	r3, #0
 8002fdc:	873b      	strh	r3, [r7, #56]	; 0x38
 8002fde:	2300      	movs	r3, #0
 8002fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8002fe2:	88ba      	ldrh	r2, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	461a      	mov	r2, r3
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <LCD_DrawLine+0xc0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <LCD_DrawLine+0xc4>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	0adb      	lsrs	r3, r3, #11
 8003004:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <LCD_DrawLine+0xc4>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <LCD_DrawLine+0xc4>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003018:	b29b      	uxth	r3, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 800301e:	f002 f9e7 	bl	80053f0 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8003022:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003026:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8003028:	2302      	movs	r3, #2
 800302a:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 800302c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800302e:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8003030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003032:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8003034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003036:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8003038:	230f      	movs	r3, #15
 800303a:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8003046:	2300      	movs	r3, #0
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 800304a:	2301      	movs	r3, #1
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
 8003052:	e005      	b.n	8003060 <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8003054:	23ef      	movs	r3, #239	; 0xef
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 800305c:	2301      	movs	r3, #1
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	4618      	mov	r0, r3
 8003066:	f002 f9d1 	bl	800540c <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 800306a:	f002 fa7d 	bl	8005568 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 800306e:	bf00      	nop
 8003070:	2002      	movs	r0, #2
 8003072:	f002 fa87 	bl	8005584 <DMA2D_GetFlagStatus>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f9      	beq.n	8003070 <LCD_DrawLine+0xac>
  {
  }
  
}
 800307c:	3740      	adds	r7, #64	; 0x40
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000008 	.word	0x20000008
 8003088:	20000154 	.word	0x20000154

0800308c <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	80f8      	strh	r0, [r7, #6]
 8003094:	80b9      	strh	r1, [r7, #4]
 8003096:	807a      	strh	r2, [r7, #2]
 8003098:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 800309a:	88f9      	ldrh	r1, [r7, #6]
 800309c:	88ba      	ldrh	r2, [r7, #4]
 800309e:	883b      	ldrh	r3, [r7, #0]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	2300      	movs	r3, #0
 80030a8:	f7ff ff8c 	bl	8002fc4 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 80030ac:	88ba      	ldrh	r2, [r7, #4]
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	4413      	add	r3, r2
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	88f9      	ldrh	r1, [r7, #6]
 80030b6:	883b      	ldrh	r3, [r7, #0]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	f7ff ff80 	bl	8002fc4 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 80030c4:	88f9      	ldrh	r1, [r7, #6]
 80030c6:	88ba      	ldrh	r2, [r7, #4]
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	4608      	mov	r0, r1
 80030cc:	4611      	mov	r1, r2
 80030ce:	461a      	mov	r2, r3
 80030d0:	2301      	movs	r3, #1
 80030d2:	f7ff ff77 	bl	8002fc4 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	883b      	ldrh	r3, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	b299      	uxth	r1, r3
 80030de:	88ba      	ldrh	r2, [r7, #4]
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	4608      	mov	r0, r1
 80030e4:	4611      	mov	r1, r2
 80030e6:	461a      	mov	r2, r3
 80030e8:	2301      	movs	r3, #1
 80030ea:	f7ff ff6b 	bl	8002fc4 <LCD_DrawLine>
}
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b090      	sub	sp, #64	; 0x40
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	80f8      	strh	r0, [r7, #6]
 80030fc:	80b9      	strh	r1, [r7, #4]
 80030fe:	807a      	strh	r2, [r7, #2]
 8003100:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8003102:	2300      	movs	r3, #0
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	877b      	strh	r3, [r7, #58]	; 0x3a
 800310a:	2300      	movs	r3, #0
 800310c:	873b      	strh	r3, [r7, #56]	; 0x38
 800310e:	2300      	movs	r3, #0
 8003110:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <LCD_DrawFullRect+0xb8>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	0adb      	lsrs	r3, r3, #11
 8003118:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <LCD_DrawFullRect+0xb8>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <LCD_DrawFullRect+0xb8>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800312c:	b29b      	uxth	r3, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8003132:	88ba      	ldrh	r2, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	461a      	mov	r2, r3
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	4413      	add	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	461a      	mov	r2, r3
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <LCD_DrawFullRect+0xbc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 800314e:	f002 f94f 	bl	80053f0 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8003152:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003156:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8003158:	2302      	movs	r3, #2
 800315a:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 800315c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800315e:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8003160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003162:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8003164:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003166:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8003168:	230f      	movs	r3, #15
 800316a:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 8003178:	883b      	ldrh	r3, [r7, #0]
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	4618      	mov	r0, r3
 8003186:	f002 f941 	bl	800540c <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 800318a:	f002 f9ed 	bl	8005568 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 800318e:	bf00      	nop
 8003190:	2002      	movs	r0, #2
 8003192:	f002 f9f7 	bl	8005584 <DMA2D_GetFlagStatus>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f9      	beq.n	8003190 <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <LCD_DrawFullRect+0xb8>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fdfd 	bl	8002da0 <LCD_SetTextColor>
}
 80031a6:	3740      	adds	r7, #64	; 0x40
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000154 	.word	0x20000154
 80031b0:	20000008 	.word	0x20000008

080031b4 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 80031be:	4810      	ldr	r0, [pc, #64]	; (8003200 <LCD_WriteCommand+0x4c>)
 80031c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031c4:	2200      	movs	r2, #0
 80031c6:	f000 f9b1 	bl	800352c <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff fd9a 	bl	8002d04 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	480b      	ldr	r0, [pc, #44]	; (8003204 <LCD_WriteCommand+0x50>)
 80031d6:	4619      	mov	r1, r3
 80031d8:	f001 f8a2 	bl	8004320 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80031dc:	bf00      	nop
 80031de:	4809      	ldr	r0, [pc, #36]	; (8003204 <LCD_WriteCommand+0x50>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	f001 f8ab 	bl	800433c <SPI_I2S_GetFlagStatus>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f8      	bne.n	80031de <LCD_WriteCommand+0x2a>
  delay(10);
 80031ec:	200a      	movs	r0, #10
 80031ee:	f000 facd 	bl	800378c <delay>
  LCD_ChipSelect(ENABLE);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7ff fd86 	bl	8002d04 <LCD_ChipSelect>
}
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40020c00 	.word	0x40020c00
 8003204:	40015000 	.word	0x40015000

08003208 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 8003212:	4810      	ldr	r0, [pc, #64]	; (8003254 <LCD_WriteData+0x4c>)
 8003214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003218:	2201      	movs	r2, #1
 800321a:	f000 f987 	bl	800352c <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff fd70 	bl	8002d04 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	b29b      	uxth	r3, r3
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <LCD_WriteData+0x50>)
 800322a:	4619      	mov	r1, r3
 800322c:	f001 f878 	bl	8004320 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8003230:	bf00      	nop
 8003232:	4809      	ldr	r0, [pc, #36]	; (8003258 <LCD_WriteData+0x50>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	f001 f881 	bl	800433c <SPI_I2S_GetFlagStatus>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f8      	bne.n	8003232 <LCD_WriteData+0x2a>
  delay(10);
 8003240:	200a      	movs	r0, #10
 8003242:	f000 faa3 	bl	800378c <delay>
  LCD_ChipSelect(ENABLE);
 8003246:	2001      	movs	r0, #1
 8003248:	f7ff fd5c 	bl	8002d04 <LCD_ChipSelect>
}
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40015000 	.word	0x40015000

0800325c <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8003260:	20ca      	movs	r0, #202	; 0xca
 8003262:	f7ff ffa7 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8003266:	20c3      	movs	r0, #195	; 0xc3
 8003268:	f7ff ffce 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x08);
 800326c:	2008      	movs	r0, #8
 800326e:	f7ff ffcb 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x50);
 8003272:	2050      	movs	r0, #80	; 0x50
 8003274:	f7ff ffc8 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8003278:	20cf      	movs	r0, #207	; 0xcf
 800327a:	f7ff ff9b 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7ff ffc2 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8003284:	20c1      	movs	r0, #193	; 0xc1
 8003286:	f7ff ffbf 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x30);
 800328a:	2030      	movs	r0, #48	; 0x30
 800328c:	f7ff ffbc 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8003290:	20ed      	movs	r0, #237	; 0xed
 8003292:	f7ff ff8f 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8003296:	2064      	movs	r0, #100	; 0x64
 8003298:	f7ff ffb6 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x03);
 800329c:	2003      	movs	r0, #3
 800329e:	f7ff ffb3 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x12);
 80032a2:	2012      	movs	r0, #18
 80032a4:	f7ff ffb0 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x81);
 80032a8:	2081      	movs	r0, #129	; 0x81
 80032aa:	f7ff ffad 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 80032ae:	20e8      	movs	r0, #232	; 0xe8
 80032b0:	f7ff ff80 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 80032b4:	2085      	movs	r0, #133	; 0x85
 80032b6:	f7ff ffa7 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7ff ffa4 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x78);
 80032c0:	2078      	movs	r0, #120	; 0x78
 80032c2:	f7ff ffa1 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80032c6:	20cb      	movs	r0, #203	; 0xcb
 80032c8:	f7ff ff74 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 80032cc:	2039      	movs	r0, #57	; 0x39
 80032ce:	f7ff ff9b 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x2C);
 80032d2:	202c      	movs	r0, #44	; 0x2c
 80032d4:	f7ff ff98 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7ff ff95 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x34);
 80032de:	2034      	movs	r0, #52	; 0x34
 80032e0:	f7ff ff92 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x02);
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7ff ff8f 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 80032ea:	20f7      	movs	r0, #247	; 0xf7
 80032ec:	f7ff ff62 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 80032f0:	2020      	movs	r0, #32
 80032f2:	f7ff ff89 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 80032f6:	20ea      	movs	r0, #234	; 0xea
 80032f8:	f7ff ff5c 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7ff ff83 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7ff ff80 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8003308:	20b1      	movs	r0, #177	; 0xb1
 800330a:	f7ff ff53 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7ff ff7a 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8003314:	201b      	movs	r0, #27
 8003316:	f7ff ff77 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 800331a:	20b6      	movs	r0, #182	; 0xb6
 800331c:	f7ff ff4a 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8003320:	200a      	movs	r0, #10
 8003322:	f7ff ff71 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8003326:	20a2      	movs	r0, #162	; 0xa2
 8003328:	f7ff ff6e 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 800332c:	20c0      	movs	r0, #192	; 0xc0
 800332e:	f7ff ff41 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8003332:	2010      	movs	r0, #16
 8003334:	f7ff ff68 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8003338:	20c1      	movs	r0, #193	; 0xc1
 800333a:	f7ff ff3b 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 800333e:	2010      	movs	r0, #16
 8003340:	f7ff ff62 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8003344:	20c5      	movs	r0, #197	; 0xc5
 8003346:	f7ff ff35 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 800334a:	2045      	movs	r0, #69	; 0x45
 800334c:	f7ff ff5c 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x15);
 8003350:	2015      	movs	r0, #21
 8003352:	f7ff ff59 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8003356:	20c7      	movs	r0, #199	; 0xc7
 8003358:	f7ff ff2c 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 800335c:	2090      	movs	r0, #144	; 0x90
 800335e:	f7ff ff53 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8003362:	2036      	movs	r0, #54	; 0x36
 8003364:	f7ff ff26 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8003368:	20c8      	movs	r0, #200	; 0xc8
 800336a:	f7ff ff4d 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 800336e:	20f2      	movs	r0, #242	; 0xf2
 8003370:	f7ff ff20 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003374:	2000      	movs	r0, #0
 8003376:	f7ff ff47 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 800337a:	20b0      	movs	r0, #176	; 0xb0
 800337c:	f7ff ff1a 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8003380:	20c2      	movs	r0, #194	; 0xc2
 8003382:	f7ff ff41 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8003386:	20b6      	movs	r0, #182	; 0xb6
 8003388:	f7ff ff14 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 800338c:	200a      	movs	r0, #10
 800338e:	f7ff ff3b 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8003392:	20a7      	movs	r0, #167	; 0xa7
 8003394:	f7ff ff38 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x27);
 8003398:	2027      	movs	r0, #39	; 0x27
 800339a:	f7ff ff35 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x04);
 800339e:	2004      	movs	r0, #4
 80033a0:	f7ff ff32 	bl	8003208 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 80033a4:	202a      	movs	r0, #42	; 0x2a
 80033a6:	f7ff ff05 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff ff2c 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7ff ff29 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7ff ff26 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0xEF);
 80033bc:	20ef      	movs	r0, #239	; 0xef
 80033be:	f7ff ff23 	bl	8003208 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 80033c2:	202b      	movs	r0, #43	; 0x2b
 80033c4:	f7ff fef6 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7ff ff1d 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7ff ff1a 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x01);
 80033d4:	2001      	movs	r0, #1
 80033d6:	f7ff ff17 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x3F);
 80033da:	203f      	movs	r0, #63	; 0x3f
 80033dc:	f7ff ff14 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 80033e0:	20f6      	movs	r0, #246	; 0xf6
 80033e2:	f7ff fee7 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f7ff ff0e 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7ff ff0b 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x06);
 80033f2:	2006      	movs	r0, #6
 80033f4:	f7ff ff08 	bl	8003208 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 80033f8:	202c      	movs	r0, #44	; 0x2c
 80033fa:	f7ff fedb 	bl	80031b4 <LCD_WriteCommand>
  delay(200);
 80033fe:	20c8      	movs	r0, #200	; 0xc8
 8003400:	f000 f9c4 	bl	800378c <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8003404:	2026      	movs	r0, #38	; 0x26
 8003406:	f7ff fed5 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 800340a:	2001      	movs	r0, #1
 800340c:	f7ff fefc 	bl	8003208 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8003410:	20e0      	movs	r0, #224	; 0xe0
 8003412:	f7ff fecf 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8003416:	200f      	movs	r0, #15
 8003418:	f7ff fef6 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x29);
 800341c:	2029      	movs	r0, #41	; 0x29
 800341e:	f7ff fef3 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x24);
 8003422:	2024      	movs	r0, #36	; 0x24
 8003424:	f7ff fef0 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8003428:	200c      	movs	r0, #12
 800342a:	f7ff feed 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x0E);
 800342e:	200e      	movs	r0, #14
 8003430:	f7ff feea 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x09);
 8003434:	2009      	movs	r0, #9
 8003436:	f7ff fee7 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x4E);
 800343a:	204e      	movs	r0, #78	; 0x4e
 800343c:	f7ff fee4 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x78);
 8003440:	2078      	movs	r0, #120	; 0x78
 8003442:	f7ff fee1 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8003446:	203c      	movs	r0, #60	; 0x3c
 8003448:	f7ff fede 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x09);
 800344c:	2009      	movs	r0, #9
 800344e:	f7ff fedb 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x13);
 8003452:	2013      	movs	r0, #19
 8003454:	f7ff fed8 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x05);
 8003458:	2005      	movs	r0, #5
 800345a:	f7ff fed5 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x17);
 800345e:	2017      	movs	r0, #23
 8003460:	f7ff fed2 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x11);
 8003464:	2011      	movs	r0, #17
 8003466:	f7ff fecf 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x00);
 800346a:	2000      	movs	r0, #0
 800346c:	f7ff fecc 	bl	8003208 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8003470:	20e1      	movs	r0, #225	; 0xe1
 8003472:	f7ff fe9f 	bl	80031b4 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8003476:	2000      	movs	r0, #0
 8003478:	f7ff fec6 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x16);
 800347c:	2016      	movs	r0, #22
 800347e:	f7ff fec3 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8003482:	201b      	movs	r0, #27
 8003484:	f7ff fec0 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x04);
 8003488:	2004      	movs	r0, #4
 800348a:	f7ff febd 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x11);
 800348e:	2011      	movs	r0, #17
 8003490:	f7ff feba 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x07);
 8003494:	2007      	movs	r0, #7
 8003496:	f7ff feb7 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x31);
 800349a:	2031      	movs	r0, #49	; 0x31
 800349c:	f7ff feb4 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x33);
 80034a0:	2033      	movs	r0, #51	; 0x33
 80034a2:	f7ff feb1 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x42);
 80034a6:	2042      	movs	r0, #66	; 0x42
 80034a8:	f7ff feae 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x05);
 80034ac:	2005      	movs	r0, #5
 80034ae:	f7ff feab 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x0C);
 80034b2:	200c      	movs	r0, #12
 80034b4:	f7ff fea8 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x0A);
 80034b8:	200a      	movs	r0, #10
 80034ba:	f7ff fea5 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x28);
 80034be:	2028      	movs	r0, #40	; 0x28
 80034c0:	f7ff fea2 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x2F);
 80034c4:	202f      	movs	r0, #47	; 0x2f
 80034c6:	f7ff fe9f 	bl	8003208 <LCD_WriteData>
  LCD_WriteData(0x0F);
 80034ca:	200f      	movs	r0, #15
 80034cc:	f7ff fe9c 	bl	8003208 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 80034d0:	2011      	movs	r0, #17
 80034d2:	f7ff fe6f 	bl	80031b4 <LCD_WriteCommand>
  delay(200);
 80034d6:	20c8      	movs	r0, #200	; 0xc8
 80034d8:	f000 f958 	bl	800378c <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 80034dc:	2029      	movs	r0, #41	; 0x29
 80034de:	f7ff fe69 	bl	80031b4 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 80034e2:	202c      	movs	r0, #44	; 0x2c
 80034e4:	f7ff fe66 	bl	80031b4 <LCD_WriteCommand>
 }
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop

080034ec <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK, ENABLE);
 80034f2:	2004      	movs	r0, #4
 80034f4:	2101      	movs	r1, #1
 80034f6:	f001 f82d 	bl	8004554 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80034fa:	2304      	movs	r3, #4
 80034fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80034fe:	2302      	movs	r3, #2
 8003500:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003502:	2301      	movs	r3, #1
 8003504:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003506:	2300      	movs	r3, #0
 8003508:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800350e:	463b      	mov	r3, r7
 8003510:	4805      	ldr	r0, [pc, #20]	; (8003528 <LCD_CtrlLinesConfig+0x3c>)
 8003512:	4619      	mov	r1, r3
 8003514:	f001 fd46 	bl	8004fa4 <GPIO_Init>

  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <LCD_CtrlLinesConfig+0x3c>)
 800351a:	2104      	movs	r1, #4
 800351c:	2201      	movs	r2, #1
 800351e:	f000 f805 	bl	800352c <LCD_CtrlLinesWrite>
}
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40020800 	.word	0x40020800

0800352c <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	460a      	mov	r2, r1
 8003538:	807a      	strh	r2, [r7, #2]
 800353a:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 800353c:	887a      	ldrh	r2, [r7, #2]
 800353e:	787b      	ldrb	r3, [r7, #1]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	f001 fdd7 	bl	80050f8 <GPIO_WriteBit>
}
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8003556:	2020      	movs	r0, #32
 8003558:	2101      	movs	r1, #1
 800355a:	f000 fffb 	bl	8004554 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 800355e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003562:	2101      	movs	r1, #1
 8003564:	f001 f850 	bl	8004608 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800356c:	2302      	movs	r3, #2
 800356e:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003570:	2302      	movs	r3, #2
 8003572:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003574:	2300      	movs	r3, #0
 8003576:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800357c:	1d3b      	adds	r3, r7, #4
 800357e:	4823      	ldr	r0, [pc, #140]	; (800360c <LCD_SPIConfig+0xbc>)
 8003580:	4619      	mov	r1, r3
 8003582:	f001 fd0f 	bl	8004fa4 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8003586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800358a:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	481f      	ldr	r0, [pc, #124]	; (800360c <LCD_SPIConfig+0xbc>)
 8003590:	4619      	mov	r1, r3
 8003592:	f001 fd07 	bl	8004fa4 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8003596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359a:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	481b      	ldr	r0, [pc, #108]	; (800360c <LCD_SPIConfig+0xbc>)
 80035a0:	4619      	mov	r1, r3
 80035a2:	f001 fcff 	bl	8004fa4 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 80035a6:	4819      	ldr	r0, [pc, #100]	; (800360c <LCD_SPIConfig+0xbc>)
 80035a8:	2107      	movs	r1, #7
 80035aa:	2205      	movs	r2, #5
 80035ac:	f001 fdbc 	bl	8005128 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 80035b0:	4816      	ldr	r0, [pc, #88]	; (800360c <LCD_SPIConfig+0xbc>)
 80035b2:	2108      	movs	r1, #8
 80035b4:	2205      	movs	r2, #5
 80035b6:	f001 fdb7 	bl	8005128 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 80035ba:	4814      	ldr	r0, [pc, #80]	; (800360c <LCD_SPIConfig+0xbc>)
 80035bc:	2109      	movs	r1, #9
 80035be:	2205      	movs	r2, #5
 80035c0:	f001 fdb2 	bl	8005128 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 80035c4:	4812      	ldr	r0, [pc, #72]	; (8003610 <LCD_SPIConfig+0xc0>)
 80035c6:	f000 fddb 	bl	8004180 <SPI_I2S_DeInit>
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //SPI_Direction_1Line_Tx;
 80035ca:	2300      	movs	r3, #0
 80035cc:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80035ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80035d2:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80035d4:	2300      	movs	r3, #0
 80035d6:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80035d8:	2300      	movs	r3, #0
 80035da:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80035dc:	2300      	movs	r3, #0
 80035de:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80035e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e4:	82fb      	strh	r3, [r7, #22]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; 
 80035e6:	2308      	movs	r3, #8
 80035e8:	833b      	strh	r3, [r7, #24]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80035ea:	2300      	movs	r3, #0
 80035ec:	837b      	strh	r3, [r7, #26]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 80035ee:	2307      	movs	r3, #7
 80035f0:	83bb      	strh	r3, [r7, #28]
  SPI_Init(LCD_SPI, &SPI_InitStructure);
 80035f2:	f107 030c 	add.w	r3, r7, #12
 80035f6:	4806      	ldr	r0, [pc, #24]	; (8003610 <LCD_SPIConfig+0xc0>)
 80035f8:	4619      	mov	r1, r3
 80035fa:	f000 fe2d 	bl	8004258 <SPI_Init>

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
 80035fe:	4804      	ldr	r0, [pc, #16]	; (8003610 <LCD_SPIConfig+0xc0>)
 8003600:	2101      	movs	r1, #1
 8003602:	f000 fe6d 	bl	80042e0 <SPI_Cmd>
}
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021400 	.word	0x40021400
 8003610:	40015000 	.word	0x40015000

08003614 <LCD_AF_GPIOConfig>:
  * @brief GPIO config for LTDC.
  * @retval
  *  None
  */
static void LCD_AF_GPIOConfig(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 800361a:	206f      	movs	r0, #111	; 0x6f
 800361c:	2101      	movs	r1, #1
 800361e:	f000 ff99 	bl	8004554 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8003622:	4854      	ldr	r0, [pc, #336]	; (8003774 <LCD_AF_GPIOConfig+0x160>)
 8003624:	2103      	movs	r1, #3
 8003626:	220e      	movs	r2, #14
 8003628:	f001 fd7e 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 800362c:	4851      	ldr	r0, [pc, #324]	; (8003774 <LCD_AF_GPIOConfig+0x160>)
 800362e:	2104      	movs	r1, #4
 8003630:	220e      	movs	r2, #14
 8003632:	f001 fd79 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8003636:	484f      	ldr	r0, [pc, #316]	; (8003774 <LCD_AF_GPIOConfig+0x160>)
 8003638:	2106      	movs	r1, #6
 800363a:	220e      	movs	r2, #14
 800363c:	f001 fd74 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8003640:	484c      	ldr	r0, [pc, #304]	; (8003774 <LCD_AF_GPIOConfig+0x160>)
 8003642:	210b      	movs	r1, #11
 8003644:	220e      	movs	r2, #14
 8003646:	f001 fd6f 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 800364a:	484a      	ldr	r0, [pc, #296]	; (8003774 <LCD_AF_GPIOConfig+0x160>)
 800364c:	210c      	movs	r1, #12
 800364e:	220e      	movs	r2, #14
 8003650:	f001 fd6a 	bl	8005128 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8003654:	f641 0358 	movw	r3, #6232	; 0x1858
 8003658:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800365a:	2302      	movs	r3, #2
 800365c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800365e:	2302      	movs	r3, #2
 8003660:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8003662:	2300      	movs	r3, #0
 8003664:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	463b      	mov	r3, r7
 800366c:	4841      	ldr	r0, [pc, #260]	; (8003774 <LCD_AF_GPIOConfig+0x160>)
 800366e:	4619      	mov	r1, r3
 8003670:	f001 fc98 	bl	8004fa4 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8003674:	4840      	ldr	r0, [pc, #256]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 8003676:	2100      	movs	r1, #0
 8003678:	2209      	movs	r2, #9
 800367a:	f001 fd55 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 800367e:	483e      	ldr	r0, [pc, #248]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 8003680:	2101      	movs	r1, #1
 8003682:	2209      	movs	r2, #9
 8003684:	f001 fd50 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8003688:	483b      	ldr	r0, [pc, #236]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 800368a:	2108      	movs	r1, #8
 800368c:	220e      	movs	r2, #14
 800368e:	f001 fd4b 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8003692:	4839      	ldr	r0, [pc, #228]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 8003694:	2109      	movs	r1, #9
 8003696:	220e      	movs	r2, #14
 8003698:	f001 fd46 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 800369c:	4836      	ldr	r0, [pc, #216]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 800369e:	210a      	movs	r1, #10
 80036a0:	220e      	movs	r2, #14
 80036a2:	f001 fd41 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 80036a6:	4834      	ldr	r0, [pc, #208]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 80036a8:	210b      	movs	r1, #11
 80036aa:	220e      	movs	r2, #14
 80036ac:	f001 fd3c 	bl	8005128 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 80036b0:	f640 7303 	movw	r3, #3843	; 0xf03
 80036b4:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b6:	463b      	mov	r3, r7
 80036b8:	482f      	ldr	r0, [pc, #188]	; (8003778 <LCD_AF_GPIOConfig+0x164>)
 80036ba:	4619      	mov	r1, r3
 80036bc:	f001 fc72 	bl	8004fa4 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 80036c0:	482e      	ldr	r0, [pc, #184]	; (800377c <LCD_AF_GPIOConfig+0x168>)
 80036c2:	2106      	movs	r1, #6
 80036c4:	220e      	movs	r2, #14
 80036c6:	f001 fd2f 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80036ca:	482c      	ldr	r0, [pc, #176]	; (800377c <LCD_AF_GPIOConfig+0x168>)
 80036cc:	2107      	movs	r1, #7
 80036ce:	220e      	movs	r2, #14
 80036d0:	f001 fd2a 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 80036d4:	4829      	ldr	r0, [pc, #164]	; (800377c <LCD_AF_GPIOConfig+0x168>)
 80036d6:	210a      	movs	r1, #10
 80036d8:	220e      	movs	r2, #14
 80036da:	f001 fd25 	bl	8005128 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 80036de:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80036e2:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e4:	463b      	mov	r3, r7
 80036e6:	4825      	ldr	r0, [pc, #148]	; (800377c <LCD_AF_GPIOConfig+0x168>)
 80036e8:	4619      	mov	r1, r3
 80036ea:	f001 fc5b 	bl	8004fa4 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 80036ee:	4824      	ldr	r0, [pc, #144]	; (8003780 <LCD_AF_GPIOConfig+0x16c>)
 80036f0:	2103      	movs	r1, #3
 80036f2:	220e      	movs	r2, #14
 80036f4:	f001 fd18 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 80036f8:	4821      	ldr	r0, [pc, #132]	; (8003780 <LCD_AF_GPIOConfig+0x16c>)
 80036fa:	2106      	movs	r1, #6
 80036fc:	220e      	movs	r2, #14
 80036fe:	f001 fd13 	bl	8005128 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8003702:	2348      	movs	r3, #72	; 0x48
 8003704:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003706:	463b      	mov	r3, r7
 8003708:	481d      	ldr	r0, [pc, #116]	; (8003780 <LCD_AF_GPIOConfig+0x16c>)
 800370a:	4619      	mov	r1, r3
 800370c:	f001 fc4a 	bl	8004fa4 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8003710:	481c      	ldr	r0, [pc, #112]	; (8003784 <LCD_AF_GPIOConfig+0x170>)
 8003712:	210a      	movs	r1, #10
 8003714:	220e      	movs	r2, #14
 8003716:	f001 fd07 	bl	8005128 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 800371a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371e:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8003720:	463b      	mov	r3, r7
 8003722:	4818      	ldr	r0, [pc, #96]	; (8003784 <LCD_AF_GPIOConfig+0x170>)
 8003724:	4619      	mov	r1, r3
 8003726:	f001 fc3d 	bl	8004fa4 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 800372a:	4817      	ldr	r0, [pc, #92]	; (8003788 <LCD_AF_GPIOConfig+0x174>)
 800372c:	2106      	movs	r1, #6
 800372e:	220e      	movs	r2, #14
 8003730:	f001 fcfa 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8003734:	4814      	ldr	r0, [pc, #80]	; (8003788 <LCD_AF_GPIOConfig+0x174>)
 8003736:	2107      	movs	r1, #7
 8003738:	220e      	movs	r2, #14
 800373a:	f001 fcf5 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 800373e:	4812      	ldr	r0, [pc, #72]	; (8003788 <LCD_AF_GPIOConfig+0x174>)
 8003740:	210a      	movs	r1, #10
 8003742:	2209      	movs	r2, #9
 8003744:	f001 fcf0 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8003748:	480f      	ldr	r0, [pc, #60]	; (8003788 <LCD_AF_GPIOConfig+0x174>)
 800374a:	210b      	movs	r1, #11
 800374c:	220e      	movs	r2, #14
 800374e:	f001 fceb 	bl	8005128 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8003752:	480d      	ldr	r0, [pc, #52]	; (8003788 <LCD_AF_GPIOConfig+0x174>)
 8003754:	210c      	movs	r1, #12
 8003756:	2209      	movs	r2, #9
 8003758:	f001 fce6 	bl	8005128 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 800375c:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8003760:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003762:	463b      	mov	r3, r7
 8003764:	4808      	ldr	r0, [pc, #32]	; (8003788 <LCD_AF_GPIOConfig+0x174>)
 8003766:	4619      	mov	r1, r3
 8003768:	f001 fc1c 	bl	8004fa4 <GPIO_Init>
 
}
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40020000 	.word	0x40020000
 8003778:	40020400 	.word	0x40020400
 800377c:	40020800 	.word	0x40020800
 8003780:	40020c00 	.word	0x40020c00
 8003784:	40021400 	.word	0x40021400
 8003788:	40021800 	.word	0x40021800

0800378c <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e002      	b.n	80037a4 <delay+0x18>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f9      	bne.n	800379e <delay+0x12>
  {
  }
}
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <IOE_TP_GetState>:
  * @brief  Returns Status and positions of the Touch Panel.
  * @param  None
  * @retval Pointer to TP_STATE structure holding Touch Panel information.
  */
TP_STATE* IOE_TP_GetState(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  
  /* Check if the Touch detect event happened */
  TP_State.TouchDetected = (I2C_ReadDeviceRegister(IOE_REG_TP_CTRL) & 0x80);
 80037ba:	2040      	movs	r0, #64	; 0x40
 80037bc:	f000 fa5e 	bl	8003c7c <I2C_ReadDeviceRegister>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <IOE_TP_GetState+0xbc>)
 80037ca:	801a      	strh	r2, [r3, #0]
  
  if(TP_State.TouchDetected) 
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <IOE_TP_GetState+0xbc>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d030      	beq.n	8003836 <IOE_TP_GetState+0x82>
  {
    x = IOE_TP_Read_X();
 80037d4:	f000 f8ec 	bl	80039b0 <IOE_TP_Read_X>
 80037d8:	4603      	mov	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
    y = IOE_TP_Read_Y();
 80037dc:	f000 f91c 	bl	8003a18 <IOE_TP_Read_Y>
 80037e0:	4603      	mov	r3, r0
 80037e2:	60bb      	str	r3, [r7, #8]
    xDiff = x > _x? (x - _x): (_x - x);
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <IOE_TP_GetState+0xc0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d904      	bls.n	80037f8 <IOE_TP_GetState+0x44>
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <IOE_TP_GetState+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	e003      	b.n	8003800 <IOE_TP_GetState+0x4c>
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <IOE_TP_GetState+0xc0>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	607b      	str	r3, [r7, #4]
    yDiff = y > _y? (y - _y): (_y - y);       
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <IOE_TP_GetState+0xc4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d904      	bls.n	8003816 <IOE_TP_GetState+0x62>
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <IOE_TP_GetState+0xc4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	e003      	b.n	800381e <IOE_TP_GetState+0x6a>
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <IOE_TP_GetState+0xc4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	603b      	str	r3, [r7, #0]
    if (xDiff + yDiff > 5)
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	2b05      	cmp	r3, #5
 8003828:	d905      	bls.n	8003836 <IOE_TP_GetState+0x82>
    {
      _x = x;
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <IOE_TP_GetState+0xc0>)
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]
      _y = y;       
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <IOE_TP_GetState+0xc4>)
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	601a      	str	r2, [r3, #0]
    }
  }  
  /* Update the X position */
  TP_State.X = _x;
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <IOE_TP_GetState+0xc0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29a      	uxth	r2, r3
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <IOE_TP_GetState+0xbc>)
 800383e:	805a      	strh	r2, [r3, #2]
    
  /* Update the Y position */  
  TP_State.Y = _y;
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <IOE_TP_GetState+0xc4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b29a      	uxth	r2, r3
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <IOE_TP_GetState+0xbc>)
 8003848:	809a      	strh	r2, [r3, #4]
  /* Update the Z Pression index */  
  TP_State.Z = IOE_TP_Read_Z();  
 800384a:	f000 f90f 	bl	8003a6c <IOE_TP_Read_Z>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <IOE_TP_GetState+0xbc>)
 8003854:	80da      	strh	r2, [r3, #6]
  
  /* Clear the interrupt pending bit and enable the FIFO again */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8003856:	204b      	movs	r0, #75	; 0x4b
 8003858:	2101      	movs	r1, #1
 800385a:	f000 f961 	bl	8003b20 <I2C_WriteDeviceRegister>
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800385e:	204b      	movs	r0, #75	; 0x4b
 8003860:	2100      	movs	r1, #0
 8003862:	f000 f95d 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Return pointer to the updated structure */
  return &TP_State; 
 8003866:	4b02      	ldr	r3, [pc, #8]	; (8003870 <IOE_TP_GetState+0xbc>)
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000f48 	.word	0x20000f48
 8003874:	2000015c 	.word	0x2000015c
 8003878:	20000160 	.word	0x20000160

0800387c <IOE_FnctCmd>:
  *   @arg  IOE_ADC_FCT : ADC function
  * @param  NewState: can be ENABLE pr DISABLE   
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	71fa      	strb	r2, [r7, #7]
 8003888:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the register value */
  tmp = I2C_ReadDeviceRegister(IOE_REG_SYS_CTRL2);
 800388e:	2004      	movs	r0, #4
 8003890:	f000 f9f4 	bl	8003c7c <I2C_ReadDeviceRegister>
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <IOE_FnctCmd+0x32>
  {
    /* Set the Functionalities to be Enabled */    
    tmp &= ~(uint8_t)Fct;
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e003      	b.n	80038b6 <IOE_FnctCmd+0x3a>
  }
  else
  {
    /* Set the Functionalities to be Disabled */    
    tmp |= (uint8_t)Fct;  
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Set the register value */
  I2C_WriteDeviceRegister(IOE_REG_SYS_CTRL2, tmp);
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2004      	movs	r0, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	f000 f930 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* If all OK return IOE_OK */
  return IOE_OK;    
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop

080038cc <IOE_TP_Config>:
  * @brief  Configures the touch Panel Controller (Single point detection)
  * @param  None
  * @retval IOE_OK if all initializations are OK. Other value if error.
  */
uint8_t IOE_TP_Config(void)
{ 
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Enable touch Panel functionality */
  IOE_FnctCmd(IOE_TP_FCT, ENABLE);
 80038d0:	2002      	movs	r0, #2
 80038d2:	2101      	movs	r1, #1
 80038d4:	f7ff ffd2 	bl	800387c <IOE_FnctCmd>
  
  /* Select Sample Time, bit number and ADC Reference */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL1, 0x49);
 80038d8:	2020      	movs	r0, #32
 80038da:	2149      	movs	r1, #73	; 0x49
 80038dc:	f000 f920 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Wait for ~20 ms */
  _delay_(2);  
 80038e0:	2002      	movs	r0, #2
 80038e2:	f000 fbd5 	bl	8004090 <delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  I2C_WriteDeviceRegister(IOE_REG_ADC_CTRL2, 0x01);
 80038e6:	2021      	movs	r0, #33	; 0x21
 80038e8:	2101      	movs	r1, #1
 80038ea:	f000 f919 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Select TSC pins in non default mode */  
  IOE_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 80038ee:	201e      	movs	r0, #30
 80038f0:	2100      	movs	r1, #0
 80038f2:	f000 f835 	bl	8003960 <IOE_IOAFConfig>
  
  /* Select 2 nF filter capacitor */
  I2C_WriteDeviceRegister(IOE_REG_TP_CFG, 0x9A);   
 80038f6:	2041      	movs	r0, #65	; 0x41
 80038f8:	219a      	movs	r1, #154	; 0x9a
 80038fa:	f000 f911 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Select single point reading  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_TH, 0x01);
 80038fe:	204a      	movs	r0, #74	; 0x4a
 8003900:	2101      	movs	r1, #1
 8003902:	f000 f90d 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Write 0x01 to clear the FIFO memory content. */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x01);
 8003906:	204b      	movs	r0, #75	; 0x4b
 8003908:	2101      	movs	r1, #1
 800390a:	f000 f909 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Write 0x00 to put the FIFO back into operation mode  */
  I2C_WriteDeviceRegister(IOE_REG_FIFO_STA, 0x00);
 800390e:	204b      	movs	r0, #75	; 0x4b
 8003910:	2100      	movs	r1, #0
 8003912:	f000 f905 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* set the data format for Z value: 7 fractional part and 1 whole part */
  I2C_WriteDeviceRegister(IOE_REG_TP_FRACT_XYZ, 0x01);
 8003916:	2056      	movs	r0, #86	; 0x56
 8003918:	2101      	movs	r1, #1
 800391a:	f000 f901 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* set the driving capability of the device for TSC pins: 50mA */
  I2C_WriteDeviceRegister(IOE_REG_TP_I_DRIVE, 0x01);
 800391e:	2058      	movs	r0, #88	; 0x58
 8003920:	2101      	movs	r1, #1
 8003922:	f000 f8fd 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Use no tracking index, touch-panel controller operation mode (XYZ) and 
     enable the TSC */
  I2C_WriteDeviceRegister(IOE_REG_TP_CTRL, 0x03);
 8003926:	2040      	movs	r0, #64	; 0x40
 8003928:	2103      	movs	r1, #3
 800392a:	f000 f8f9 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /*  Clear all the status pending bits */
  I2C_WriteDeviceRegister(IOE_REG_INT_STA, 0xFF); 
 800392e:	200b      	movs	r0, #11
 8003930:	21ff      	movs	r1, #255	; 0xff
 8003932:	f000 f8f5 	bl	8003b20 <I2C_WriteDeviceRegister>
  
  /* Initialize the TS structure to their default values */ 
  TP_State.TouchDetected = TP_State.X = TP_State.Y = TP_State.Z = 0;
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <IOE_TP_Config+0x90>)
 8003938:	2200      	movs	r2, #0
 800393a:	80da      	strh	r2, [r3, #6]
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <IOE_TP_Config+0x90>)
 800393e:	88da      	ldrh	r2, [r3, #6]
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <IOE_TP_Config+0x90>)
 8003942:	809a      	strh	r2, [r3, #4]
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <IOE_TP_Config+0x90>)
 8003946:	889a      	ldrh	r2, [r3, #4]
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <IOE_TP_Config+0x90>)
 800394a:	805a      	strh	r2, [r3, #2]
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <IOE_TP_Config+0x90>)
 800394e:	885a      	ldrh	r2, [r3, #2]
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <IOE_TP_Config+0x90>)
 8003952:	801a      	strh	r2, [r3, #0]
  
  /* All configuration done */
  return IOE_OK;  
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000f48 	.word	0x20000f48

08003960 <IOE_IOAFConfig>:
  * @param  NewState: State of the AF for the selected pin, could be 
  *         ENABLE or DISABLE.       
  * @retval IOE_OK: if all initializations are OK. Other value if error.
  */
uint8_t IOE_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	71fa      	strb	r2, [r7, #7]
 800396c:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current state of the GPIO_AF register */
  tmp = I2C_ReadDeviceRegister(IOE_REG_GPIO_AF);
 8003972:	2017      	movs	r0, #23
 8003974:	f000 f982 	bl	8003c7c <I2C_ReadDeviceRegister>
 8003978:	4603      	mov	r3, r0
 800397a:	73fb      	strb	r3, [r7, #15]
  
  if (NewState != DISABLE)
 800397c:	79bb      	ldrb	r3, [r7, #6]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <IOE_IOAFConfig+0x2c>
  {
    /* Enable the selected pins alternate function */
    tmp |= (uint8_t)IO_Pin;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	4313      	orrs	r3, r2
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e006      	b.n	800399a <IOE_IOAFConfig+0x3a>
  }
  else
  {
    /* Disable the selected pins alternate function */   
    tmp &= ~(uint8_t)IO_Pin;   
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	43db      	mvns	r3, r3
 8003990:	b2da      	uxtb	r2, r3
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	4013      	ands	r3, r2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write back the new value in GPIO_AF register */  
  I2C_WriteDeviceRegister(IOE_REG_GPIO_AF, tmp);  
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2017      	movs	r0, #23
 800399e:	4619      	mov	r1, r3
 80039a0:	f000 f8be 	bl	8003b20 <I2C_WriteDeviceRegister>

  /* If all OK return IOE_OK */
  return IOE_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop

080039b0 <IOE_TP_Read_X>:
  * @brief  Return Touch Panel X position value
  * @param  None
  * @retval X position.
  */
static uint16_t IOE_TP_Read_X(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
  int32_t x, xr;
  
  /* Read x value from DATA_X register */
  x = I2C_ReadDataBuffer(IOE_REG_TP_DATA_X);
 80039b6:	204d      	movs	r0, #77	; 0x4d
 80039b8:	f000 fa4e 	bl	8003e58 <I2C_ReadDataBuffer>
 80039bc:	4603      	mov	r3, r0
 80039be:	607b      	str	r3, [r7, #4]
  
  /* x value first correction */
  if(x <= 3000)
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dc05      	bgt.n	80039d6 <IOE_TP_Read_X+0x26>
  {
  x = 3870 - x;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80039d0:	330e      	adds	r3, #14
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	e004      	b.n	80039e0 <IOE_TP_Read_X+0x30>
  }
  else
  {
   x = 3800 - x;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80039dc:	3308      	adds	r3, #8
 80039de:	607b      	str	r3, [r7, #4]
  }
  
  /* x value second correction */  
  xr = x / 15;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <IOE_TP_Read_X+0x64>)
 80039e4:	fb82 1203 	smull	r1, r2, r2, r3
 80039e8:	441a      	add	r2, r3
 80039ea:	10d2      	asrs	r2, r2, #3
 80039ec:	17db      	asrs	r3, r3, #31
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	603b      	str	r3, [r7, #0]
  
  /* return x position value */
  if(xr <= 0)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	dc02      	bgt.n	80039fe <IOE_TP_Read_X+0x4e>
  {
    xr = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	e004      	b.n	8003a08 <IOE_TP_Read_X+0x58>
  }
  else if (xr > 240)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2bf0      	cmp	r3, #240	; 0xf0
 8003a02:	dd01      	ble.n	8003a08 <IOE_TP_Read_X+0x58>
  {
    xr = 239;
 8003a04:	23ef      	movs	r3, #239	; 0xef
 8003a06:	603b      	str	r3, [r7, #0]
  }
  else 
  {}
  return (uint16_t)(xr); 
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b29b      	uxth	r3, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	88888889 	.word	0x88888889

08003a18 <IOE_TP_Read_Y>:
  * @brief  Return Touch Panel Y position value
  * @param  None
  * @retval Y position.
  */
static uint16_t IOE_TP_Read_Y(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  int32_t y, yr;
  
  /* Read y value from DATA_Y register */
  y = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Y);
 8003a1e:	204f      	movs	r0, #79	; 0x4f
 8003a20:	f000 fa1a 	bl	8003e58 <I2C_ReadDataBuffer>
 8003a24:	4603      	mov	r3, r0
 8003a26:	603b      	str	r3, [r7, #0]
  
  /* y value first correction */

  y -= 360;  
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a2e:	603b      	str	r3, [r7, #0]
  
  /* y value second correction */
  yr = y / 11;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <IOE_TP_Read_Y+0x50>)
 8003a34:	fb82 1203 	smull	r1, r2, r2, r3
 8003a38:	1052      	asrs	r2, r2, #1
 8003a3a:	17db      	asrs	r3, r3, #31
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	607b      	str	r3, [r7, #4]
  
  /* return y position value */
  if(yr <= 0)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dc02      	bgt.n	8003a4c <IOE_TP_Read_Y+0x34>
  {
    yr = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	e006      	b.n	8003a5a <IOE_TP_Read_Y+0x42>
  }
  else if (yr > 320)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003a52:	dd02      	ble.n	8003a5a <IOE_TP_Read_Y+0x42>
  {
    yr = 319;
 8003a54:	f240 133f 	movw	r3, #319	; 0x13f
 8003a58:	607b      	str	r3, [r7, #4]
  }
  else
  {}
  return (uint16_t)(yr); 
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	b29b      	uxth	r3, r3
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2e8ba2e9 	.word	0x2e8ba2e9

08003a6c <IOE_TP_Read_Z>:
  * @brief  Return Touch Panel Z position value
  * @param  None
  * @retval Z position.
  */
static uint16_t IOE_TP_Read_Z(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  uint32_t z;
  
  /* Read z value from DATA_Z register */
  z = I2C_ReadDataBuffer(IOE_REG_TP_DATA_Z);
 8003a72:	2051      	movs	r0, #81	; 0x51
 8003a74:	f000 f9f0 	bl	8003e58 <I2C_ReadDataBuffer>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	607b      	str	r3, [r7, #4]

  /* return z position value */
  if(z <= 0)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <IOE_TP_Read_Z+0x1a>
    z = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
  return (uint16_t)(z); 
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	b29b      	uxth	r3, r3
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop

08003a94 <IOE_GPIO_Config>:
  * @brief  Initializes the GPIO pins used by the IO expander.
  * @param  None
  * @retval None
  */
static void IOE_GPIO_Config(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable IOE_I2C and IOE_I2C_GPIO_PORT & Alternate Function clocks */
  RCC_APB1PeriphClockCmd(IOE_I2C_CLK, ENABLE);
 8003a9a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f000 fd94 	bl	80045cc <RCC_APB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(IOE_I2C_SCL_GPIO_CLK | IOE_I2C_SDA_GPIO_CLK |
 8003aa4:	f240 1005 	movw	r0, #261	; 0x105
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	f000 fd53 	bl	8004554 <RCC_AHB1PeriphClockCmd>
                         IOE_IT_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003aae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	f000 fda8 	bl	8004608 <RCC_APB2PeriphClockCmd>
  
  /* Reset IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, ENABLE);
 8003ab8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003abc:	2101      	movs	r1, #1
 8003abe:	f000 fddf 	bl	8004680 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of IOE_I2C IP */
  RCC_APB1PeriphResetCmd(IOE_I2C_CLK, DISABLE);
 8003ac2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f000 fdda 	bl	8004680 <RCC_APB1PeriphResetCmd>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(IOE_I2C_SCL_GPIO_PORT, IOE_I2C_SCL_SOURCE, IOE_I2C_SCL_AF);
 8003acc:	4812      	ldr	r0, [pc, #72]	; (8003b18 <IOE_GPIO_Config+0x84>)
 8003ace:	2108      	movs	r1, #8
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	f001 fb29 	bl	8005128 <GPIO_PinAFConfig>
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(IOE_I2C_SDA_GPIO_PORT, IOE_I2C_SDA_SOURCE, IOE_I2C_SDA_AF); 
 8003ad6:	4811      	ldr	r0, [pc, #68]	; (8003b1c <IOE_GPIO_Config+0x88>)
 8003ad8:	2109      	movs	r1, #9
 8003ada:	2204      	movs	r2, #4
 8003adc:	f001 fb24 	bl	8005128 <GPIO_PinAFConfig>
    
  /* IOE_I2C SCL and SDA pins configuration */
  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SCL_PIN;
 8003ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003aea:	2302      	movs	r3, #2
 8003aec:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003aee:	2301      	movs	r3, #1
 8003af0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(IOE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8003af6:	463b      	mov	r3, r7
 8003af8:	4807      	ldr	r0, [pc, #28]	; (8003b18 <IOE_GPIO_Config+0x84>)
 8003afa:	4619      	mov	r1, r3
 8003afc:	f001 fa52 	bl	8004fa4 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = IOE_I2C_SDA_PIN;
 8003b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b04:	603b      	str	r3, [r7, #0]
  GPIO_Init(IOE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8003b06:	463b      	mov	r3, r7
 8003b08:	4804      	ldr	r0, [pc, #16]	; (8003b1c <IOE_GPIO_Config+0x88>)
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f001 fa4a 	bl	8004fa4 <GPIO_Init>
  
}
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40020800 	.word	0x40020800

08003b20 <I2C_WriteDeviceRegister>:
  * @param  RegisterAddr: The target register address
  * @param  RegisterValue: The target register value to be written 
  * @retval IOE_OK: if all operations are OK. Other value if error.
  */
uint8_t I2C_WriteDeviceRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	71fa      	strb	r2, [r7, #7]
 8003b2c:	71bb      	strb	r3, [r7, #6]
  uint32_t read_verif = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8003b32:	484c      	ldr	r0, [pc, #304]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003b34:	2101      	movs	r1, #1
 8003b36:	f001 f8f3 	bl	8004d20 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003b3a:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003b3c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003b40:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003b42:	e00a      	b.n	8003b5a <I2C_WriteDeviceRegister+0x3a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003b44:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1e59      	subs	r1, r3, #1
 8003b4a:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <I2C_WriteDeviceRegister+0x3a>
 8003b52:	f000 fa67 	bl	8004024 <IOE_TimeoutUserCallback>
 8003b56:	4603      	mov	r3, r0
 8003b58:	e080      	b.n	8003c5c <I2C_WriteDeviceRegister+0x13c>
  /* Begin the configuration sequence */
  I2C_GenerateSTART(IOE_I2C, ENABLE);

  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003b5a:	4842      	ldr	r0, [pc, #264]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003b5c:	4943      	ldr	r1, [pc, #268]	; (8003c6c <I2C_WriteDeviceRegister+0x14c>)
 8003b5e:	f001 f9ed 	bl	8004f3c <I2C_GetFlagStatus>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ed      	beq.n	8003b44 <I2C_WriteDeviceRegister+0x24>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }

  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8003b68:	483e      	ldr	r0, [pc, #248]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003b6a:	2182      	movs	r1, #130	; 0x82
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f001 f917 	bl	8004da0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8003b72:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003b74:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003b78:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003b7a:	e00a      	b.n	8003b92 <I2C_WriteDeviceRegister+0x72>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003b7c:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	1e59      	subs	r1, r3, #1
 8003b82:	4a39      	ldr	r2, [pc, #228]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <I2C_WriteDeviceRegister+0x72>
 8003b8a:	f000 fa4b 	bl	8004024 <IOE_TimeoutUserCallback>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	e064      	b.n	8003c5c <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003b92:	4834      	ldr	r0, [pc, #208]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003b94:	4936      	ldr	r1, [pc, #216]	; (8003c70 <I2C_WriteDeviceRegister+0x150>)
 8003b96:	f001 f9d1 	bl	8004f3c <I2C_GetFlagStatus>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ed      	beq.n	8003b7c <I2C_WriteDeviceRegister+0x5c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003ba2:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003ba4:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003ba6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003baa:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003bac:	e00a      	b.n	8003bc4 <I2C_WriteDeviceRegister+0xa4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1e59      	subs	r1, r3, #1
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003bb6:	6011      	str	r1, [r2, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <I2C_WriteDeviceRegister+0xa4>
 8003bbc:	f000 fa32 	bl	8004024 <IOE_TimeoutUserCallback>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	e04b      	b.n	8003c5c <I2C_WriteDeviceRegister+0x13c>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8_1 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003bc4:	4827      	ldr	r0, [pc, #156]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003bc6:	492b      	ldr	r1, [pc, #172]	; (8003c74 <I2C_WriteDeviceRegister+0x154>)
 8003bc8:	f001 f9b8 	bl	8004f3c <I2C_GetFlagStatus>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ed      	beq.n	8003bae <I2C_WriteDeviceRegister+0x8e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4823      	ldr	r0, [pc, #140]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f001 f962 	bl	8004ea0 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003bde:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003be2:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003be4:	e00a      	b.n	8003bfc <I2C_WriteDeviceRegister+0xdc>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	1e59      	subs	r1, r3, #1
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003bee:	6011      	str	r1, [r2, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <I2C_WriteDeviceRegister+0xdc>
 8003bf4:	f000 fa16 	bl	8004024 <IOE_TimeoutUserCallback>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	e02f      	b.n	8003c5c <I2C_WriteDeviceRegister+0x13c>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003bfc:	4819      	ldr	r0, [pc, #100]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003bfe:	491d      	ldr	r1, [pc, #116]	; (8003c74 <I2C_WriteDeviceRegister+0x154>)
 8003c00:	f001 f99c 	bl	8004f3c <I2C_GetFlagStatus>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ed      	beq.n	8003be6 <I2C_WriteDeviceRegister+0xc6>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
 8003c0a:	79bb      	ldrb	r3, [r7, #6]
 8003c0c:	4815      	ldr	r0, [pc, #84]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f001 f946 	bl	8004ea0 <I2C_SendData>
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003c16:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003c1a:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8003c1c:	e00a      	b.n	8003c34 <I2C_WriteDeviceRegister+0x114>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1e59      	subs	r1, r3, #1
 8003c24:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <I2C_WriteDeviceRegister+0x148>)
 8003c26:	6011      	str	r1, [r2, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <I2C_WriteDeviceRegister+0x114>
 8003c2c:	f000 f9fa 	bl	8004024 <IOE_TimeoutUserCallback>
 8003c30:	4603      	mov	r3, r0
 8003c32:	e013      	b.n	8003c5c <I2C_WriteDeviceRegister+0x13c>
  /* Prepare the register value to be sent */
  I2C_SendData(IOE_I2C, RegisterValue);
  
  /* Test on EV8_2 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8003c34:	480b      	ldr	r0, [pc, #44]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003c36:	490f      	ldr	r1, [pc, #60]	; (8003c74 <I2C_WriteDeviceRegister+0x154>)
 8003c38:	f001 f980 	bl	8004f3c <I2C_GetFlagStatus>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ed      	beq.n	8003c1e <I2C_WriteDeviceRegister+0xfe>
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003c44:	490c      	ldr	r1, [pc, #48]	; (8003c78 <I2C_WriteDeviceRegister+0x158>)
 8003c46:	f001 f979 	bl	8004f3c <I2C_GetFlagStatus>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0e6      	beq.n	8003c1e <I2C_WriteDeviceRegister+0xfe>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <I2C_WriteDeviceRegister+0x144>)
 8003c52:	2101      	movs	r1, #1
 8003c54:	f001 f884 	bl	8004d60 <I2C_GenerateSTOP>
    read_verif = 0;
  }
#endif
  
  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return read_verif;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	b2db      	uxtb	r3, r3
  
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40005c00 	.word	0x40005c00
 8003c68:	2000000c 	.word	0x2000000c
 8003c6c:	10000001 	.word	0x10000001
 8003c70:	10000002 	.word	0x10000002
 8003c74:	10000080 	.word	0x10000080
 8003c78:	10000004 	.word	0x10000004

08003c7c <I2C_ReadDeviceRegister>:
  * @brief  Reads a register of the device through I2C without DMA.
  * @param  RegisterAddr: The target register address (between 00x and 0x24)
  * @retval The value of the read register (0xAA if Timeout occurred)   
  */ 
uint8_t I2C_ReadDeviceRegister(uint8_t RegisterAddr)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8003c8a:	486c      	ldr	r0, [pc, #432]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	f001 f847 	bl	8004d20 <I2C_GenerateSTART>
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003c92:	4b6b      	ldr	r3, [pc, #428]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003c94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003c98:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003c9a:	e00a      	b.n	8003cb2 <I2C_ReadDeviceRegister+0x36>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003c9c:	4b68      	ldr	r3, [pc, #416]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	1e59      	subs	r1, r3, #1
 8003ca2:	4a67      	ldr	r2, [pc, #412]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003ca4:	6011      	str	r1, [r2, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <I2C_ReadDeviceRegister+0x36>
 8003caa:	f000 f9bb 	bl	8004024 <IOE_TimeoutUserCallback>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	e0c0      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
    /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003cb2:	4862      	ldr	r0, [pc, #392]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003cb4:	4963      	ldr	r1, [pc, #396]	; (8003e44 <I2C_ReadDeviceRegister+0x1c8>)
 8003cb6:	f001 f941 	bl	8004f3c <I2C_GetFlagStatus>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ed      	beq.n	8003c9c <I2C_ReadDeviceRegister+0x20>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  /* Disable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);
 8003cc0:	485e      	ldr	r0, [pc, #376]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f001 f88a 	bl	8004ddc <I2C_AcknowledgeConfig>
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8003cc8:	485c      	ldr	r0, [pc, #368]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003cca:	2182      	movs	r1, #130	; 0x82
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f001 f867 	bl	8004da0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003cd4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003cd8:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003cda:	e00a      	b.n	8003cf2 <I2C_ReadDeviceRegister+0x76>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003cdc:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1e59      	subs	r1, r3, #1
 8003ce2:	4a57      	ldr	r2, [pc, #348]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003ce4:	6011      	str	r1, [r2, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <I2C_ReadDeviceRegister+0x76>
 8003cea:	f000 f99b 	bl	8004024 <IOE_TimeoutUserCallback>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	e0a0      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003cf2:	4852      	ldr	r0, [pc, #328]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003cf4:	4954      	ldr	r1, [pc, #336]	; (8003e48 <I2C_ReadDeviceRegister+0x1cc>)
 8003cf6:	f001 f921 	bl	8004f3c <I2C_GetFlagStatus>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ed      	beq.n	8003cdc <I2C_ReadDeviceRegister+0x60>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8003d00:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003d02:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003d04:	4b4e      	ldr	r3, [pc, #312]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d06:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003d0a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003d0c:	e00a      	b.n	8003d24 <I2C_ReadDeviceRegister+0xa8>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	1e59      	subs	r1, r3, #1
 8003d14:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d16:	6011      	str	r1, [r2, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <I2C_ReadDeviceRegister+0xa8>
 8003d1c:	f000 f982 	bl	8004024 <IOE_TimeoutUserCallback>
 8003d20:	4603      	mov	r3, r0
 8003d22:	e087      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003d24:	4845      	ldr	r0, [pc, #276]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003d26:	4949      	ldr	r1, [pc, #292]	; (8003e4c <I2C_ReadDeviceRegister+0x1d0>)
 8003d28:	f001 f908 	bl	8004f3c <I2C_GetFlagStatus>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ed      	beq.n	8003d0e <I2C_ReadDeviceRegister+0x92>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	4841      	ldr	r0, [pc, #260]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003d36:	4619      	mov	r1, r3
 8003d38:	f001 f8b2 	bl	8004ea0 <I2C_SendData>
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003d3c:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d3e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003d42:	601a      	str	r2, [r3, #0]
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8003d44:	e00a      	b.n	8003d5c <I2C_ReadDeviceRegister+0xe0>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003d46:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1e59      	subs	r1, r3, #1
 8003d4c:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d4e:	6011      	str	r1, [r2, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <I2C_ReadDeviceRegister+0xe0>
 8003d54:	f000 f966 	bl	8004024 <IOE_TimeoutUserCallback>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	e06b      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the first address for r/w operations */
  I2C_SendData(IOE_I2C, RegisterAddr);
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while ((!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE)) || (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF)))
 8003d5c:	4837      	ldr	r0, [pc, #220]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003d5e:	493b      	ldr	r1, [pc, #236]	; (8003e4c <I2C_ReadDeviceRegister+0x1d0>)
 8003d60:	f001 f8ec 	bl	8004f3c <I2C_GetFlagStatus>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0ed      	beq.n	8003d46 <I2C_ReadDeviceRegister+0xca>
 8003d6a:	4834      	ldr	r0, [pc, #208]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003d6c:	4938      	ldr	r1, [pc, #224]	; (8003e50 <I2C_ReadDeviceRegister+0x1d4>)
 8003d6e:	f001 f8e5 	bl	8004f3c <I2C_GetFlagStatus>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0e6      	beq.n	8003d46 <I2C_ReadDeviceRegister+0xca>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8003d78:	4830      	ldr	r0, [pc, #192]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	f000 ffd0 	bl	8004d20 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003d80:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d82:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003d86:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003d88:	e00a      	b.n	8003da0 <I2C_ReadDeviceRegister+0x124>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1e59      	subs	r1, r3, #1
 8003d90:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003d92:	6011      	str	r1, [r2, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <I2C_ReadDeviceRegister+0x124>
 8003d98:	f000 f944 	bl	8004024 <IOE_TimeoutUserCallback>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	e049      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
  /* Regenerate a start condition */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003da0:	4826      	ldr	r0, [pc, #152]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003da2:	4928      	ldr	r1, [pc, #160]	; (8003e44 <I2C_ReadDeviceRegister+0x1c8>)
 8003da4:	f001 f8ca 	bl	8004f3c <I2C_GetFlagStatus>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ed      	beq.n	8003d8a <I2C_ReadDeviceRegister+0x10e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 8003dae:	4823      	ldr	r0, [pc, #140]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003db0:	2182      	movs	r1, #130	; 0x82
 8003db2:	2201      	movs	r2, #1
 8003db4:	f000 fff4 	bl	8004da0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003dba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003dbe:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003dc0:	e00a      	b.n	8003dd8 <I2C_ReadDeviceRegister+0x15c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	1e59      	subs	r1, r3, #1
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003dca:	6011      	str	r1, [r2, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <I2C_ReadDeviceRegister+0x15c>
 8003dd0:	f000 f928 	bl	8004024 <IOE_TimeoutUserCallback>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	e02d      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003dd8:	4818      	ldr	r0, [pc, #96]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003dda:	491b      	ldr	r1, [pc, #108]	; (8003e48 <I2C_ReadDeviceRegister+0x1cc>)
 8003ddc:	f001 f8ae 	bl	8004f3c <I2C_GetFlagStatus>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0ed      	beq.n	8003dc2 <I2C_ReadDeviceRegister+0x146>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003de8:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003dec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003df0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 8003df2:	e00a      	b.n	8003e0a <I2C_ReadDeviceRegister+0x18e>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1e59      	subs	r1, r3, #1
 8003dfa:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <I2C_ReadDeviceRegister+0x1c4>)
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <I2C_ReadDeviceRegister+0x18e>
 8003e02:	f000 f90f 	bl	8004024 <IOE_TimeoutUserCallback>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e014      	b.n	8003e34 <I2C_ReadDeviceRegister+0x1b8>
    /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_RXNE))
 8003e0a:	480c      	ldr	r0, [pc, #48]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003e0c:	4911      	ldr	r1, [pc, #68]	; (8003e54 <I2C_ReadDeviceRegister+0x1d8>)
 8003e0e:	f001 f895 	bl	8004f3c <I2C_GetFlagStatus>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ed      	beq.n	8003df4 <I2C_ReadDeviceRegister+0x178>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8003e18:	4808      	ldr	r0, [pc, #32]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	f000 ffa0 	bl	8004d60 <I2C_GenerateSTOP>
  
  /* Load the register value */
  tmp = I2C_ReceiveData(IOE_I2C);
 8003e20:	4806      	ldr	r0, [pc, #24]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003e22:	f001 f84d 	bl	8004ec0 <I2C_ReceiveData>
 8003e26:	4603      	mov	r3, r0
 8003e28:	73fb      	strb	r3, [r7, #15]
  
  /* Enable Acknowledgement */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 8003e2a:	4804      	ldr	r0, [pc, #16]	; (8003e3c <I2C_ReadDeviceRegister+0x1c0>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	f000 ffd5 	bl	8004ddc <I2C_AcknowledgeConfig>
  
  /* Return the read value */
  return tmp;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40005c00 	.word	0x40005c00
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	10000001 	.word	0x10000001
 8003e48:	10000002 	.word	0x10000002
 8003e4c:	10000080 	.word	0x10000080
 8003e50:	10000004 	.word	0x10000004
 8003e54:	10000040 	.word	0x10000040

08003e58 <I2C_ReadDataBuffer>:
  *         or IOE_2_ADDR. 
  * @param  RegisterAddr: The target register adress (between 00x and 0x24)
  * @retval The data in the buffer containing the two returned bytes (in halfword).   
  */
uint16_t I2C_ReadDataBuffer(uint32_t RegisterAddr)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint8_t IOE_BufferRX[2] = {0x00, 0x00};  
 8003e60:	2300      	movs	r3, #0
 8003e62:	733b      	strb	r3, [r7, #12]
 8003e64:	2300      	movs	r3, #0
 8003e66:	737b      	strb	r3, [r7, #13]
  
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8003e68:	4868      	ldr	r0, [pc, #416]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	f000 ff58 	bl	8004d20 <I2C_GenerateSTART>
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003e70:	4b67      	ldr	r3, [pc, #412]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003e72:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003e76:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003e78:	e00a      	b.n	8003e90 <I2C_ReadDataBuffer+0x38>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003e7a:	4b65      	ldr	r3, [pc, #404]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1e59      	subs	r1, r3, #1
 8003e80:	4a63      	ldr	r2, [pc, #396]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003e82:	6011      	str	r1, [r2, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <I2C_ReadDataBuffer+0x38>
 8003e88:	f000 f8cc 	bl	8004024 <IOE_TimeoutUserCallback>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	e0b9      	b.n	8004004 <I2C_ReadDataBuffer+0x1ac>
  /* Enable the I2C peripheral */
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003e90:	485e      	ldr	r0, [pc, #376]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003e92:	4960      	ldr	r1, [pc, #384]	; (8004014 <I2C_ReadDataBuffer+0x1bc>)
 8003e94:	f001 f852 	bl	8004f3c <I2C_GetFlagStatus>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ed      	beq.n	8003e7a <I2C_ReadDataBuffer+0x22>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
   
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
 8003e9e:	485b      	ldr	r0, [pc, #364]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003ea0:	2182      	movs	r1, #130	; 0x82
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f000 ff7c 	bl	8004da0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003eaa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003eae:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003eb0:	e00a      	b.n	8003ec8 <I2C_ReadDataBuffer+0x70>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003eb2:	4b57      	ldr	r3, [pc, #348]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1e59      	subs	r1, r3, #1
 8003eb8:	4a55      	ldr	r2, [pc, #340]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003eba:	6011      	str	r1, [r2, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <I2C_ReadDataBuffer+0x70>
 8003ec0:	f000 f8b0 	bl	8004024 <IOE_TimeoutUserCallback>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	e09d      	b.n	8004004 <I2C_ReadDataBuffer+0x1ac>
  /* Send device address for write */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Transmitter);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;  
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003ec8:	4850      	ldr	r0, [pc, #320]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003eca:	4953      	ldr	r1, [pc, #332]	; (8004018 <I2C_ReadDataBuffer+0x1c0>)
 8003ecc:	f001 f836 	bl	8004f3c <I2C_GetFlagStatus>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ed      	beq.n	8003eb2 <I2C_ReadDataBuffer+0x5a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8003ed6:	4b4d      	ldr	r3, [pc, #308]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003ed8:	8b1b      	ldrh	r3, [r3, #24]
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003eda:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003edc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003ee0:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003ee2:	e00a      	b.n	8003efa <I2C_ReadDataBuffer+0xa2>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003ee4:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1e59      	subs	r1, r3, #1
 8003eea:	4a49      	ldr	r2, [pc, #292]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003eec:	6011      	str	r1, [r2, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <I2C_ReadDataBuffer+0xa2>
 8003ef2:	f000 f897 	bl	8004024 <IOE_TimeoutUserCallback>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	e084      	b.n	8004004 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
  
  /* Test on EV8 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_TXE))
 8003efa:	4844      	ldr	r0, [pc, #272]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003efc:	4947      	ldr	r1, [pc, #284]	; (800401c <I2C_ReadDataBuffer+0x1c4>)
 8003efe:	f001 f81d 	bl	8004f3c <I2C_GetFlagStatus>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ed      	beq.n	8003ee4 <I2C_ReadDataBuffer+0x8c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send the device's internal address to write to */
  I2C_SendData(IOE_I2C, RegisterAddr);  
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	483f      	ldr	r0, [pc, #252]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f000 ffc6 	bl	8004ea0 <I2C_SendData>
    
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
 8003f14:	483d      	ldr	r0, [pc, #244]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f16:	2101      	movs	r1, #1
 8003f18:	f000 ff02 	bl	8004d20 <I2C_GenerateSTART>
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003f1c:	4b3c      	ldr	r3, [pc, #240]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f22:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003f24:	e00a      	b.n	8003f3c <I2C_ReadDataBuffer+0xe4>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003f26:	4b3a      	ldr	r3, [pc, #232]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1e59      	subs	r1, r3, #1
 8003f2c:	4a38      	ldr	r2, [pc, #224]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f2e:	6011      	str	r1, [r2, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <I2C_ReadDataBuffer+0xe4>
 8003f34:	f000 f876 	bl	8004024 <IOE_TimeoutUserCallback>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	e063      	b.n	8004004 <I2C_ReadDataBuffer+0x1ac>
  /* Send START condition a second time */  
  I2C_GenerateSTART(IOE_I2C, ENABLE);
  
  /* Test on EV5 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_SB))
 8003f3c:	4833      	ldr	r0, [pc, #204]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f3e:	4935      	ldr	r1, [pc, #212]	; (8004014 <I2C_ReadDataBuffer+0x1bc>)
 8003f40:	f000 fffc 	bl	8004f3c <I2C_GetFlagStatus>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ed      	beq.n	8003f26 <I2C_ReadDataBuffer+0xce>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
  
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
 8003f4a:	4830      	ldr	r0, [pc, #192]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f4c:	2182      	movs	r1, #130	; 0x82
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f000 ff26 	bl	8004da0 <I2C_Send7bitAddress>
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f56:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f5a:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003f5c:	e00a      	b.n	8003f74 <I2C_ReadDataBuffer+0x11c>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1e59      	subs	r1, r3, #1
 8003f64:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f66:	6011      	str	r1, [r2, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d103      	bne.n	8003f74 <I2C_ReadDataBuffer+0x11c>
 8003f6c:	f000 f85a 	bl	8004024 <IOE_TimeoutUserCallback>
 8003f70:	4603      	mov	r3, r0
 8003f72:	e047      	b.n	8004004 <I2C_ReadDataBuffer+0x1ac>
  /* Send IO Expander address for read */
  I2C_Send7bitAddress(IOE_I2C, IOE_ADDR, I2C_Direction_Receiver);
  
  /* Test on EV6 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_ADDR))
 8003f74:	4825      	ldr	r0, [pc, #148]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f76:	4928      	ldr	r1, [pc, #160]	; (8004018 <I2C_ReadDataBuffer+0x1c0>)
 8003f78:	f000 ffe0 	bl	8004f3c <I2C_GetFlagStatus>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ed      	beq.n	8003f5e <I2C_ReadDataBuffer+0x106>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Disable Acknowledgement and set Pos bit */
  I2C_AcknowledgeConfig(IOE_I2C, DISABLE);       
 8003f82:	4822      	ldr	r0, [pc, #136]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f84:	2100      	movs	r1, #0
 8003f86:	f000 ff29 	bl	8004ddc <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Next);
 8003f8a:	4820      	ldr	r0, [pc, #128]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f90:	f000 ff66 	bl	8004e60 <I2C_NACKPositionConfig>
  
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003f96:	8b1b      	ldrh	r3, [r3, #24]

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003f9a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f9e:	601a      	str	r2, [r3, #0]
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 8003fa0:	e00a      	b.n	8003fb8 <I2C_ReadDataBuffer+0x160>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1e59      	subs	r1, r3, #1
 8003fa8:	4a19      	ldr	r2, [pc, #100]	; (8004010 <I2C_ReadDataBuffer+0x1b8>)
 8003faa:	6011      	str	r1, [r2, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <I2C_ReadDataBuffer+0x160>
 8003fb0:	f000 f838 	bl	8004024 <IOE_TimeoutUserCallback>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	e025      	b.n	8004004 <I2C_ReadDataBuffer+0x1ac>
  /* Read status register 2 to clear ADDR flag */
  IOE_I2C->SR2;

  /* Test on EV7 and clear it */
  IOE_TimeOut = TIMEOUT_MAX;
  while (!I2C_GetFlagStatus(IOE_I2C, I2C_FLAG_BTF))
 8003fb8:	4814      	ldr	r0, [pc, #80]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003fba:	4919      	ldr	r1, [pc, #100]	; (8004020 <I2C_ReadDataBuffer+0x1c8>)
 8003fbc:	f000 ffbe 	bl	8004f3c <I2C_GetFlagStatus>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ed      	beq.n	8003fa2 <I2C_ReadDataBuffer+0x14a>
  {
    if (IOE_TimeOut-- == 0) return(IOE_TimeoutUserCallback());
  }
 
  /* Send STOP Condition */
  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 8003fc6:	4811      	ldr	r0, [pc, #68]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003fc8:	2101      	movs	r1, #1
 8003fca:	f000 fec9 	bl	8004d60 <I2C_GenerateSTOP>
   
  /* Read the first byte from the IO Expander */
  IOE_BufferRX[1] = I2C_ReceiveData(IOE_I2C);
 8003fce:	480f      	ldr	r0, [pc, #60]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003fd0:	f000 ff76 	bl	8004ec0 <I2C_ReceiveData>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	737b      	strb	r3, [r7, #13]
    
  /* Read the second byte from the IO Expander */
  IOE_BufferRX[0] = I2C_ReceiveData(IOE_I2C);
 8003fd8:	480c      	ldr	r0, [pc, #48]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003fda:	f000 ff71 	bl	8004ec0 <I2C_ReceiveData>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	733b      	strb	r3, [r7, #12]
                                         
  /* Enable Acknowledgement and reset POS bit to be ready for another reception */
  I2C_AcknowledgeConfig(IOE_I2C, ENABLE);
 8003fe2:	480a      	ldr	r0, [pc, #40]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	f000 fef9 	bl	8004ddc <I2C_AcknowledgeConfig>
  I2C_NACKPositionConfig(IOE_I2C, I2C_NACKPosition_Current);
 8003fea:	4808      	ldr	r0, [pc, #32]	; (800400c <I2C_ReadDataBuffer+0x1b4>)
 8003fec:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8003ff0:	f000 ff36 	bl	8004e60 <I2C_NACKPositionConfig>
   
  /* return the data */
  return ((uint16_t) IOE_BufferRX[0] | ((uint16_t)IOE_BufferRX[1]<< 8));
 8003ff4:	7b3b      	ldrb	r3, [r7, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	7b7b      	ldrb	r3, [r7, #13]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4313      	orrs	r3, r2
 8004000:	b29b      	uxth	r3, r3
 8004002:	b29b      	uxth	r3, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40005c00 	.word	0x40005c00
 8004010:	2000000c 	.word	0x2000000c
 8004014:	10000001 	.word	0x10000001
 8004018:	10000002 	.word	0x10000002
 800401c:	10000080 	.word	0x10000080
 8004020:	10000004 	.word	0x10000004

08004024 <IOE_TimeoutUserCallback>:
  * @brief  IOE_TIMEOUT_UserCallback
  * @param  None
  * @retval 0
  */
uint8_t IOE_TimeoutUserCallback(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;

  I2C_GenerateSTOP(IOE_I2C, ENABLE);
 800402a:	4817      	ldr	r0, [pc, #92]	; (8004088 <IOE_TimeoutUserCallback+0x64>)
 800402c:	2101      	movs	r1, #1
 800402e:	f000 fe97 	bl	8004d60 <I2C_GenerateSTOP>
  I2C_SoftwareResetCmd(IOE_I2C, ENABLE);
 8004032:	4815      	ldr	r0, [pc, #84]	; (8004088 <IOE_TimeoutUserCallback+0x64>)
 8004034:	2101      	movs	r1, #1
 8004036:	f000 fef1 	bl	8004e1c <I2C_SoftwareResetCmd>
  I2C_SoftwareResetCmd(IOE_I2C, DISABLE);
 800403a:	4813      	ldr	r0, [pc, #76]	; (8004088 <IOE_TimeoutUserCallback+0x64>)
 800403c:	2100      	movs	r1, #0
 800403e:	f000 feed 	bl	8004e1c <I2C_SoftwareResetCmd>
  
  IOE_GPIO_Config();
 8004042:	f7ff fd27 	bl	8003a94 <IOE_GPIO_Config>

  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(IOE_I2C);
 8004046:	4810      	ldr	r0, [pc, #64]	; (8004088 <IOE_TimeoutUserCallback+0x64>)
 8004048:	f000 fd30 	bl	8004aac <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800404c:	2300      	movs	r3, #0
 800404e:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8004050:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8004054:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8004056:	2333      	movs	r3, #51	; 0x33
 8004058:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800405a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405e:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004064:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <IOE_TimeoutUserCallback+0x68>)
 8004068:	603b      	str	r3, [r7, #0]
  
  /* Enable the I2C peripheral */
  I2C_Cmd(IOE_I2C, ENABLE);  
 800406a:	4807      	ldr	r0, [pc, #28]	; (8004088 <IOE_TimeoutUserCallback+0x64>)
 800406c:	2101      	movs	r1, #1
 800406e:	f000 fe37 	bl	8004ce0 <I2C_Cmd>
  I2C_Init(IOE_I2C, &I2C_InitStructure);
 8004072:	463b      	mov	r3, r7
 8004074:	4804      	ldr	r0, [pc, #16]	; (8004088 <IOE_TimeoutUserCallback+0x64>)
 8004076:	4619      	mov	r1, r3
 8004078:	f000 fd52 	bl	8004b20 <I2C_Init>
  
  return 0;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40005c00 	.word	0x40005c00
 800408c:	000186a0 	.word	0x000186a0

08004090 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <delay+0x30>)
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e002      	b.n	80040ae <delay+0x1e>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f9      	bne.n	80040a8 <delay+0x18>
  {
  }
}
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	000186a0 	.word	0x000186a0

080040c4 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 80040c8:	4816      	ldr	r0, [pc, #88]	; (8004124 <DMA1_Stream4_IRQHandler+0x60>)
 80040ca:	4917      	ldr	r1, [pc, #92]	; (8004128 <DMA1_Stream4_IRQHandler+0x64>)
 80040cc:	f001 fb1c 	bl	8005708 <DMA_GetFlagStatus>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d024      	beq.n	8004120 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 80040d6:	4813      	ldr	r0, [pc, #76]	; (8004124 <DMA1_Stream4_IRQHandler+0x60>)
 80040d8:	2100      	movs	r1, #0
 80040da:	f001 faf9 	bl	80056d0 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 80040de:	4811      	ldr	r0, [pc, #68]	; (8004124 <DMA1_Stream4_IRQHandler+0x60>)
 80040e0:	4911      	ldr	r1, [pc, #68]	; (8004128 <DMA1_Stream4_IRQHandler+0x64>)
 80040e2:	f001 fb4d 	bl	8005780 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <DMA1_Stream4_IRQHandler+0x68>)
 80040e8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80040ec:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 80040ee:	e008      	b.n	8004102 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 80040f0:	4b0e      	ldr	r3, [pc, #56]	; (800412c <DMA1_Stream4_IRQHandler+0x68>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	1e59      	subs	r1, r3, #1
 80040f6:	4a0d      	ldr	r2, [pc, #52]	; (800412c <DMA1_Stream4_IRQHandler+0x68>)
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <DMA1_Stream4_IRQHandler+0x3e>
 80040fe:	f7fc feaf 	bl	8000e60 <sEE_TIMEOUT_UserCallback>
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8004102:	480b      	ldr	r0, [pc, #44]	; (8004130 <DMA1_Stream4_IRQHandler+0x6c>)
 8004104:	490b      	ldr	r1, [pc, #44]	; (8004134 <DMA1_Stream4_IRQHandler+0x70>)
 8004106:	f000 ff19 	bl	8004f3c <I2C_GetFlagStatus>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ef      	beq.n	80040f0 <DMA1_Stream4_IRQHandler+0x2c>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8004110:	4807      	ldr	r0, [pc, #28]	; (8004130 <DMA1_Stream4_IRQHandler+0x6c>)
 8004112:	2101      	movs	r1, #1
 8004114:	f000 fe24 	bl	8004d60 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <DMA1_Stream4_IRQHandler+0x74>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
  }
}
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40026070 	.word	0x40026070
 8004128:	20000020 	.word	0x20000020
 800412c:	20000010 	.word	0x20000010
 8004130:	40005c00 	.word	0x40005c00
 8004134:	10000004 	.word	0x10000004
 8004138:	20000f50 	.word	0x20000f50

0800413c <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8004140:	480c      	ldr	r0, [pc, #48]	; (8004174 <DMA1_Stream2_IRQHandler+0x38>)
 8004142:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8004146:	f001 fadf 	bl	8005708 <DMA_GetFlagStatus>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8004150:	4809      	ldr	r0, [pc, #36]	; (8004178 <DMA1_Stream2_IRQHandler+0x3c>)
 8004152:	2101      	movs	r1, #1
 8004154:	f000 fe04 	bl	8004d60 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8004158:	4806      	ldr	r0, [pc, #24]	; (8004174 <DMA1_Stream2_IRQHandler+0x38>)
 800415a:	2100      	movs	r1, #0
 800415c:	f001 fab8 	bl	80056d0 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8004160:	4804      	ldr	r0, [pc, #16]	; (8004174 <DMA1_Stream2_IRQHandler+0x38>)
 8004162:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8004166:	f001 fb0b 	bl	8005780 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <DMA1_Stream2_IRQHandler+0x40>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	801a      	strh	r2, [r3, #0]
  }
}
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40026040 	.word	0x40026040
 8004178:	40005c00 	.word	0x40005c00
 800417c:	20000f58 	.word	0x20000f58

08004180 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <SPI_I2S_DeInit+0xc0>)
 800418c:	429a      	cmp	r2, r3
 800418e:	d10a      	bne.n	80041a6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004190:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004194:	2101      	movs	r1, #1
 8004196:	f000 fa91 	bl	80046bc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800419a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800419e:	2100      	movs	r1, #0
 80041a0:	f000 fa8c 	bl	80046bc <RCC_APB2PeriphResetCmd>
 80041a4:	e049      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4b26      	ldr	r3, [pc, #152]	; (8004244 <SPI_I2S_DeInit+0xc4>)
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d10a      	bne.n	80041c4 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80041ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041b2:	2101      	movs	r1, #1
 80041b4:	f000 fa64 	bl	8004680 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80041b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041bc:	2100      	movs	r1, #0
 80041be:	f000 fa5f 	bl	8004680 <RCC_APB1PeriphResetCmd>
 80041c2:	e03a      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <SPI_I2S_DeInit+0xc8>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d10a      	bne.n	80041e2 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80041cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041d0:	2101      	movs	r1, #1
 80041d2:	f000 fa55 	bl	8004680 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80041d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041da:	2100      	movs	r1, #0
 80041dc:	f000 fa50 	bl	8004680 <RCC_APB1PeriphResetCmd>
 80041e0:	e02b      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <SPI_I2S_DeInit+0xcc>)
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d10a      	bne.n	8004200 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80041ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041ee:	2101      	movs	r1, #1
 80041f0:	f000 fa64 	bl	80046bc <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80041f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041f8:	2100      	movs	r1, #0
 80041fa:	f000 fa5f 	bl	80046bc <RCC_APB2PeriphResetCmd>
 80041fe:	e01c      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <SPI_I2S_DeInit+0xd0>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d10a      	bne.n	800421e <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8004208:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800420c:	2101      	movs	r1, #1
 800420e:	f000 fa55 	bl	80046bc <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8004212:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004216:	2100      	movs	r1, #0
 8004218:	f000 fa50 	bl	80046bc <RCC_APB2PeriphResetCmd>
 800421c:	e00d      	b.n	800423a <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <SPI_I2S_DeInit+0xd4>)
 8004222:	429a      	cmp	r2, r3
 8004224:	d109      	bne.n	800423a <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8004226:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800422a:	2101      	movs	r1, #1
 800422c:	f000 fa46 	bl	80046bc <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004230:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004234:	2100      	movs	r1, #0
 8004236:	f000 fa41 	bl	80046bc <RCC_APB2PeriphResetCmd>
    }
  }
}
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40013000 	.word	0x40013000
 8004244:	40003800 	.word	0x40003800
 8004248:	40003c00 	.word	0x40003c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40015000 	.word	0x40015000
 8004254:	40015400 	.word	0x40015400

08004258 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004272:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	885b      	ldrh	r3, [r3, #2]
 800427c:	4313      	orrs	r3, r2
 800427e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004284:	4313      	orrs	r3, r2
 8004286:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800428c:	4313      	orrs	r3, r2
 800428e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004294:	4313      	orrs	r3, r2
 8004296:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800429c:	4313      	orrs	r3, r2
 800429e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	89fb      	ldrh	r3, [r7, #14]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	89fa      	ldrh	r2, [r7, #14]
 80042ba:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8b9b      	ldrh	r3, [r3, #28]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	8a1a      	ldrh	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	821a      	strh	r2, [r3, #16]
}
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop

080042e0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	e007      	b.n	8004314 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	801a      	strh	r2, [r3, #0]
  }
}
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop

08004320 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	819a      	strh	r2, [r3, #12]
}
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	891b      	ldrh	r3, [r3, #8]
 8004350:	b29a      	uxth	r2, r3
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	4013      	ands	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e001      	b.n	8004366 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <RCC_PLLSAIConfig+0x2c>)
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	0191      	lsls	r1, r2, #6
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	0612      	lsls	r2, r2, #24
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	0712      	lsls	r2, r2, #28
 8004390:	430a      	orrs	r2, r1
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40023800 	.word	0x40023800

080043a4 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <RCC_PLLSAICmd+0x1c>)
 80043b0:	79fa      	ldrb	r2, [r7, #7]
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	42470070 	.word	0x42470070

080043c4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	2302      	movs	r3, #2
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	2302      	movs	r3, #2
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80043e4:	4b48      	ldr	r3, [pc, #288]	; (8004508 <RCC_GetClocksFreq+0x144>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d007      	beq.n	8004404 <RCC_GetClocksFreq+0x40>
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d009      	beq.n	800440c <RCC_GetClocksFreq+0x48>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d13f      	bne.n	800447c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a43      	ldr	r2, [pc, #268]	; (800450c <RCC_GetClocksFreq+0x148>)
 8004400:	601a      	str	r2, [r3, #0]
      break;
 8004402:	e03f      	b.n	8004484 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a42      	ldr	r2, [pc, #264]	; (8004510 <RCC_GetClocksFreq+0x14c>)
 8004408:	601a      	str	r2, [r3, #0]
      break;
 800440a:	e03b      	b.n	8004484 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800440c:	4b3e      	ldr	r3, [pc, #248]	; (8004508 <RCC_GetClocksFreq+0x144>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004414:	0d9b      	lsrs	r3, r3, #22
 8004416:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004418:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <RCC_GetClocksFreq+0x144>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004420:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004428:	4a39      	ldr	r2, [pc, #228]	; (8004510 <RCC_GetClocksFreq+0x14c>)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4b35      	ldr	r3, [pc, #212]	; (8004508 <RCC_GetClocksFreq+0x144>)
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004438:	400b      	ands	r3, r1
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	fb03 f302 	mul.w	r3, r3, r2
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	e00c      	b.n	800445e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004444:	4a31      	ldr	r2, [pc, #196]	; (800450c <RCC_GetClocksFreq+0x148>)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	fbb2 f2f3 	udiv	r2, r2, r3
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <RCC_GetClocksFreq+0x144>)
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004454:	400b      	ands	r3, r1
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	fb03 f302 	mul.w	r3, r3, r2
 800445c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <RCC_GetClocksFreq+0x144>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	3301      	adds	r3, #1
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	fbb2 f2f3 	udiv	r2, r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
      break;
 800447a:	e003      	b.n	8004484 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a23      	ldr	r2, [pc, #140]	; (800450c <RCC_GetClocksFreq+0x148>)
 8004480:	601a      	str	r2, [r3, #0]
      break;
 8004482:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <RCC_GetClocksFreq+0x144>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004494:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <RCC_GetClocksFreq+0x150>)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	4413      	add	r3, r2
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	40da      	lsrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <RCC_GetClocksFreq+0x144>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80044b4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	0a9b      	lsrs	r3, r3, #10
 80044ba:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <RCC_GetClocksFreq+0x150>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	40da      	lsrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <RCC_GetClocksFreq+0x144>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80044dc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	0b5b      	lsrs	r3, r3, #13
 80044e2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <RCC_GetClocksFreq+0x150>)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	40da      	lsrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]
}
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200
 8004514:	20000024 	.word	0x20000024

08004518 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <RCC_LTDCCLKDivConfig+0x38>)
 8004526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800452a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <RCC_LTDCCLKDivConfig+0x38>)
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800

08004554 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <RCC_AHB1PeriphClockCmd+0x38>)
 8004568:	4a08      	ldr	r2, [pc, #32]	; (800458c <RCC_AHB1PeriphClockCmd+0x38>)
 800456a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	430a      	orrs	r2, r1
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
 8004572:	e006      	b.n	8004582 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <RCC_AHB1PeriphClockCmd+0x38>)
 8004576:	4a05      	ldr	r2, [pc, #20]	; (800458c <RCC_AHB1PeriphClockCmd+0x38>)
 8004578:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	43d2      	mvns	r2, r2
 800457e:	400a      	ands	r2, r1
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40023800 	.word	0x40023800

08004590 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80045a6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
 80045ae:	e006      	b.n	80045be <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80045b2:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <RCC_AHB3PeriphClockCmd+0x38>)
 80045b4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	43d2      	mvns	r2, r2
 80045ba:	400a      	ands	r2, r1
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40023800 	.word	0x40023800

080045cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <RCC_APB1PeriphClockCmd+0x38>)
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <RCC_APB1PeriphClockCmd+0x38>)
 80045e2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
 80045ea:	e006      	b.n	80045fa <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <RCC_APB1PeriphClockCmd+0x38>)
 80045ee:	4a05      	ldr	r2, [pc, #20]	; (8004604 <RCC_APB1PeriphClockCmd+0x38>)
 80045f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	43d2      	mvns	r2, r2
 80045f6:	400a      	ands	r2, r1
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40023800 	.word	0x40023800

08004608 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d006      	beq.n	8004628 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <RCC_APB2PeriphClockCmd+0x38>)
 800461c:	4a08      	ldr	r2, [pc, #32]	; (8004640 <RCC_APB2PeriphClockCmd+0x38>)
 800461e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	430a      	orrs	r2, r1
 8004624:	645a      	str	r2, [r3, #68]	; 0x44
 8004626:	e006      	b.n	8004636 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <RCC_APB2PeriphClockCmd+0x38>)
 800462a:	4a05      	ldr	r2, [pc, #20]	; (8004640 <RCC_APB2PeriphClockCmd+0x38>)
 800462c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	43d2      	mvns	r2, r2
 8004632:	400a      	ands	r2, r1
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40023800 	.word	0x40023800

08004644 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <RCC_AHB1PeriphResetCmd+0x38>)
 8004658:	4a08      	ldr	r2, [pc, #32]	; (800467c <RCC_AHB1PeriphResetCmd+0x38>)
 800465a:	6911      	ldr	r1, [r2, #16]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	430a      	orrs	r2, r1
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	e006      	b.n	8004672 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <RCC_AHB1PeriphResetCmd+0x38>)
 8004666:	4a05      	ldr	r2, [pc, #20]	; (800467c <RCC_AHB1PeriphResetCmd+0x38>)
 8004668:	6911      	ldr	r1, [r2, #16]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	43d2      	mvns	r2, r2
 800466e:	400a      	ands	r2, r1
 8004670:	611a      	str	r2, [r3, #16]
  }
}
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40023800 	.word	0x40023800

08004680 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <RCC_APB1PeriphResetCmd+0x38>)
 8004694:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <RCC_APB1PeriphResetCmd+0x38>)
 8004696:	6a11      	ldr	r1, [r2, #32]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	430a      	orrs	r2, r1
 800469c:	621a      	str	r2, [r3, #32]
 800469e:	e006      	b.n	80046ae <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <RCC_APB1PeriphResetCmd+0x38>)
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <RCC_APB1PeriphResetCmd+0x38>)
 80046a4:	6a11      	ldr	r1, [r2, #32]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	400a      	ands	r2, r1
 80046ac:	621a      	str	r2, [r3, #32]
  }
}
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40023800 	.word	0x40023800

080046bc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <RCC_APB2PeriphResetCmd+0x38>)
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <RCC_APB2PeriphResetCmd+0x38>)
 80046d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
 80046da:	e006      	b.n	80046ea <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <RCC_APB2PeriphResetCmd+0x38>)
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <RCC_APB2PeriphResetCmd+0x38>)
 80046e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	43d2      	mvns	r2, r2
 80046e6:	400a      	ands	r2, r1
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40023800 	.word	0x40023800

080046f8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	b2db      	uxtb	r3, r3
 8004714:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d103      	bne.n	8004724 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <RCC_GetFlagStatus+0x70>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e009      	b.n	8004738 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d103      	bne.n	8004732 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <RCC_GetFlagStatus+0x70>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e002      	b.n	8004738 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <RCC_GetFlagStatus+0x70>)
 8004734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004736:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8004750:	2301      	movs	r3, #1
 8004752:	74fb      	strb	r3, [r7, #19]
 8004754:	e001      	b.n	800475a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800475a:	7cfb      	ldrb	r3, [r7, #19]
}
 800475c:	4618      	mov	r0, r3
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40023800 	.word	0x40023800

0800476c <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800478c:	4a3f      	ldr	r2, [pc, #252]	; (800488c <LTDC_Init+0x120>)
 800478e:	4b3f      	ldr	r3, [pc, #252]	; (800488c <LTDC_Init+0x120>)
 8004790:	6899      	ldr	r1, [r3, #8]
 8004792:	4b3f      	ldr	r3, [pc, #252]	; (8004890 <LTDC_Init+0x124>)
 8004794:	400b      	ands	r3, r1
 8004796:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80047a0:	4b3a      	ldr	r3, [pc, #232]	; (800488c <LTDC_Init+0x120>)
 80047a2:	4a3a      	ldr	r2, [pc, #232]	; (800488c <LTDC_Init+0x120>)
 80047a4:	6891      	ldr	r1, [r2, #8]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6950      	ldr	r0, [r2, #20]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	4302      	orrs	r2, r0
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80047b2:	4a36      	ldr	r2, [pc, #216]	; (800488c <LTDC_Init+0x120>)
 80047b4:	4b35      	ldr	r3, [pc, #212]	; (800488c <LTDC_Init+0x120>)
 80047b6:	68d9      	ldr	r1, [r3, #12]
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <LTDC_Init+0x124>)
 80047ba:	400b      	ands	r3, r1
 80047bc:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80047c6:	4b31      	ldr	r3, [pc, #196]	; (800488c <LTDC_Init+0x120>)
 80047c8:	4a30      	ldr	r2, [pc, #192]	; (800488c <LTDC_Init+0x120>)
 80047ca:	68d1      	ldr	r1, [r2, #12]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	69d0      	ldr	r0, [r2, #28]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4302      	orrs	r2, r0
 80047d4:	430a      	orrs	r2, r1
 80047d6:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047d8:	4a2c      	ldr	r2, [pc, #176]	; (800488c <LTDC_Init+0x120>)
 80047da:	4b2c      	ldr	r3, [pc, #176]	; (800488c <LTDC_Init+0x120>)
 80047dc:	6919      	ldr	r1, [r3, #16]
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <LTDC_Init+0x124>)
 80047e0:	400b      	ands	r3, r1
 80047e2:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <LTDC_Init+0x120>)
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <LTDC_Init+0x120>)
 80047f0:	6911      	ldr	r1, [r2, #16]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4302      	orrs	r2, r0
 80047fa:	430a      	orrs	r2, r1
 80047fc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047fe:	4a23      	ldr	r2, [pc, #140]	; (800488c <LTDC_Init+0x120>)
 8004800:	4b22      	ldr	r3, [pc, #136]	; (800488c <LTDC_Init+0x120>)
 8004802:	6959      	ldr	r1, [r3, #20]
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <LTDC_Init+0x124>)
 8004806:	400b      	ands	r3, r1
 8004808:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <LTDC_Init+0x120>)
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <LTDC_Init+0x120>)
 8004816:	6951      	ldr	r1, [r2, #20]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4302      	orrs	r2, r0
 8004820:	430a      	orrs	r2, r1
 8004822:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <LTDC_Init+0x120>)
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <LTDC_Init+0x120>)
 8004828:	6999      	ldr	r1, [r3, #24]
 800482a:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <LTDC_Init+0x128>)
 800482c:	400b      	ands	r3, r1
 800482e:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <LTDC_Init+0x120>)
 8004832:	4a16      	ldr	r2, [pc, #88]	; (800488c <LTDC_Init+0x120>)
 8004834:	6991      	ldr	r1, [r2, #24]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6810      	ldr	r0, [r2, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6852      	ldr	r2, [r2, #4]
 800483e:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8004844:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800484a:	4302      	orrs	r2, r0
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <LTDC_Init+0x120>)
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <LTDC_Init+0x120>)
 8004864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004866:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <LTDC_Init+0x120>)
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <LTDC_Init+0x120>)
 8004870:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004872:	68b8      	ldr	r0, [r7, #8]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4310      	orrs	r0, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800487c:	4302      	orrs	r2, r0
 800487e:	430a      	orrs	r2, r1
 8004880:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004882:	3724      	adds	r7, #36	; 0x24
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40016800 	.word	0x40016800
 8004890:	f000f800 	.word	0xf000f800
 8004894:	0ffe888f 	.word	0x0ffe888f

08004898 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <LTDC_Cmd+0x34>)
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <LTDC_Cmd+0x34>)
 80048ac:	6992      	ldr	r2, [r2, #24]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	619a      	str	r2, [r3, #24]
 80048b4:	e005      	b.n	80048c2 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <LTDC_Cmd+0x34>)
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <LTDC_Cmd+0x34>)
 80048ba:	6992      	ldr	r2, [r2, #24]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	619a      	str	r2, [r3, #24]
  }
}
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40016800 	.word	0x40016800

080048d0 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <LTDC_DitherCmd+0x34>)
 80048e2:	4a08      	ldr	r2, [pc, #32]	; (8004904 <LTDC_DitherCmd+0x34>)
 80048e4:	6992      	ldr	r2, [r2, #24]
 80048e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048ea:	619a      	str	r2, [r3, #24]
 80048ec:	e005      	b.n	80048fa <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <LTDC_DitherCmd+0x34>)
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <LTDC_DitherCmd+0x34>)
 80048f2:	6992      	ldr	r2, [r2, #24]
 80048f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048f8:	619a      	str	r2, [r3, #24]
  }
}
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40016800 	.word	0x40016800

08004908 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <LTDC_ReloadConfig+0x18>)
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40016800 	.word	0x40016800

08004924 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f023 0207 	bic.w	r2, r3, #7
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80049ec:	f023 0307 	bic.w	r3, r3, #7
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a3c:	f023 0307 	bic.w	r3, r3, #7
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30

}
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e005      	b.n	8004a84 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 0201 	bic.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
  }
}
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	615a      	str	r2, [r3, #20]
}
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <I2C_DeInit+0x68>)
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d10a      	bne.n	8004ad2 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8004abc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	f7ff fddd 	bl	8004680 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8004ac6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004aca:	2100      	movs	r1, #0
 8004acc:	f7ff fdd8 	bl	8004680 <RCC_APB1PeriphResetCmd>
 8004ad0:	e01c      	b.n	8004b0c <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <I2C_DeInit+0x6c>)
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d10a      	bne.n	8004af0 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8004ada:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004ade:	2101      	movs	r1, #1
 8004ae0:	f7ff fdce 	bl	8004680 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8004ae4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f7ff fdc9 	bl	8004680 <RCC_APB1PeriphResetCmd>
 8004aee:	e00d      	b.n	8004b0c <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <I2C_DeInit+0x70>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d109      	bne.n	8004b0c <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8004af8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004afc:	2101      	movs	r1, #1
 8004afe:	f7ff fdbf 	bl	8004680 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8004b02:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004b06:	2100      	movs	r1, #0
 8004b08:	f7ff fdba 	bl	8004680 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40005400 	.word	0x40005400
 8004b18:	40005800 	.word	0x40005800
 8004b1c:	40005c00 	.word	0x40005c00

08004b20 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b2e:	2300      	movs	r3, #0
 8004b30:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8004b32:	2304      	movs	r3, #4
 8004b34:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8004b36:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <I2C_Init+0x174>)
 8004b38:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	889b      	ldrh	r3, [r3, #4]
 8004b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8004b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b46:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fc39 	bl	80043c4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <I2C_Init+0x178>)
 8004b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5e:	0c9b      	lsrs	r3, r3, #18
 8004b60:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8004b62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b66:	4313      	orrs	r3, r2
 8004b68:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b6e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b44      	ldr	r3, [pc, #272]	; (8004c9c <I2C_Init+0x17c>)
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d815      	bhi.n	8004bba <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8004b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d801      	bhi.n	8004ba6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8004ba6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004baa:	4313      	orrs	r3, r2
 8004bac:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	841a      	strh	r2, [r3, #32]
 8004bb8:	e040      	b.n	8004c3c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	88da      	ldrh	r2, [r3, #6]
 8004bbe:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d109      	bne.n	8004bda <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	4413      	add	r3, r2
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004bd8:	e00e      	b.n	8004bf8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009a      	lsls	r2, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8004bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8004bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8004c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8004c0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <I2C_Init+0x180>)
 8004c28:	fb82 1203 	smull	r1, r2, r2, r3
 8004c2c:	1192      	asrs	r2, r2, #6
 8004c2e:	17db      	asrs	r3, r3, #31
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3301      	adds	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c40:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c5a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8004c5e:	f023 0302 	bic.w	r3, r3, #2
 8004c62:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	889a      	ldrh	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	895b      	ldrh	r3, [r3, #10]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c72:	4313      	orrs	r3, r2
 8004c74:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c7a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	899a      	ldrh	r2, [r3, #12]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	891b      	ldrh	r3, [r3, #8]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	811a      	strh	r2, [r3, #8]
}
 8004c8c:	3728      	adds	r7, #40	; 0x28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	007a1200 	.word	0x007a1200
 8004c98:	431bde83 	.word	0x431bde83
 8004c9c:	000186a0 	.word	0x000186a0
 8004ca0:	10624dd3 	.word	0x10624dd3

08004ca4 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8004cc0:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cd4:	819a      	strh	r2, [r3, #12]
}
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e007      	b.n	8004d14 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	801a      	strh	r2, [r3, #0]
  }
}
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop

08004d20 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e007      	b.n	8004d54 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	801a      	strh	r2, [r3, #0]
  }
}
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop

08004d60 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	e007      	b.n	8004d94 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	801a      	strh	r2, [r3, #0]
  }
}
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop

08004da0 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	460a      	mov	r2, r1
 8004dac:	70fa      	strb	r2, [r7, #3]
 8004dae:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8004db0:	78bb      	ldrb	r3, [r7, #2]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	70fb      	strb	r3, [r7, #3]
 8004dbe:	e003      	b.n	8004dc8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	821a      	strh	r2, [r3, #16]
}
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	e007      	b.n	8004e10 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	801a      	strh	r2, [r3, #0]
  }
}
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop

08004e1c <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e007      	b.n	8004e54 <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	801a      	strh	r2, [r3, #0]
  }
}
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop

08004e60 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8004e6c:	887b      	ldrh	r3, [r7, #2]
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e72:	d108      	bne.n	8004e86 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	e007      	b.n	8004e96 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	801a      	strh	r2, [r3, #0]
  }
}
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	821a      	strh	r2, [r3, #16]
}
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8a1b      	ldrh	r3, [r3, #16]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8a9b      	ldrh	r3, [r3, #20]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8b1b      	ldrh	r3, [r3, #24]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f16:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d102      	bne.n	8004f2a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
 8004f28:	e001      	b.n	8004f2e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	0f1b      	lsrs	r3, r3, #28
 8004f5a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f62:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e005      	b.n	8004f7e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3318      	adds	r3, #24
 8004f7c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
 8004f8e:	e001      	b.n	8004f94 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop

08004fa4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e076      	b.n	80050ae <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d165      	bne.n	80050a8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	2103      	movs	r1, #3
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	43db      	mvns	r3, r3
 8004fec:	401a      	ands	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	791b      	ldrb	r3, [r3, #4]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	791b      	ldrb	r3, [r3, #4]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d003      	beq.n	800501a <GPIO_Init+0x76>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	791b      	ldrb	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d12e      	bne.n	8005078 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	2103      	movs	r1, #3
 8005024:	fa01 f303 	lsl.w	r3, r1, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	401a      	ands	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	795b      	ldrb	r3, [r3, #5]
 8005038:	4619      	mov	r1, r3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	b29b      	uxth	r3, r3
 8005050:	2101      	movs	r1, #1
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	401a      	ands	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	799b      	ldrb	r3, [r3, #6]
 8005066:	4619      	mov	r1, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	b29b      	uxth	r3, r3
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	b29b      	uxth	r3, r3
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	b29b      	uxth	r3, r3
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	2103      	movs	r1, #3
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	79db      	ldrb	r3, [r3, #7]
 8005098:	4619      	mov	r1, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3301      	adds	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d985      	bls.n	8004fc0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	887a      	ldrh	r2, [r7, #2]
 80050d0:	831a      	strh	r2, [r3, #24]
}
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	887a      	ldrh	r2, [r7, #2]
 80050ec:	835a      	strh	r2, [r3, #26]
}
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	460a      	mov	r2, r1
 8005104:	807a      	strh	r2, [r7, #2]
 8005106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8005108:	787b      	ldrb	r3, [r7, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	887a      	ldrh	r2, [r7, #2]
 8005112:	831a      	strh	r2, [r3, #24]
 8005114:	e002      	b.n	800511c <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	887a      	ldrh	r2, [r7, #2]
 800511a:	835a      	strh	r2, [r3, #26]
  }
}
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop

08005128 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	460a      	mov	r2, r1
 8005134:	807a      	strh	r2, [r7, #2]
 8005136:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005140:	787a      	ldrb	r2, [r7, #1]
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	08db      	lsrs	r3, r3, #3
 8005154:	b29b      	uxth	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	08db      	lsrs	r3, r3, #3
 800515c:	b29b      	uxth	r3, r3
 800515e:	4619      	mov	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3108      	adds	r1, #8
 8005164:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	200f      	movs	r0, #15
 8005172:	fa00 f303 	lsl.w	r3, r0, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	4019      	ands	r1, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3208      	adds	r2, #8
 800517e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3208      	adds	r2, #8
 800518e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3208      	adds	r2, #8
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80051d4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 80051da:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 80051e0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 80051e6:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 80051ec:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 80051f2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80051f8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800520a:	4b40      	ldr	r3, [pc, #256]	; (800530c <FMC_SDRAMInit+0x158>)
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	6979      	ldr	r1, [r7, #20]
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005216:	e011      	b.n	800523c <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005220:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800522a:	4b38      	ldr	r3, [pc, #224]	; (800530c <FMC_SDRAMInit+0x158>)
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <FMC_SDRAMInit+0x158>)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6979      	ldr	r1, [r7, #20]
 8005238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d130      	bne.n	80052a6 <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	3b01      	subs	r3, #1
 8005254:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005256:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	3b01      	subs	r3, #1
 8005260:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8005262:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	3b01      	subs	r3, #1
 800526c:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800526e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	3b01      	subs	r3, #1
 8005278:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800527a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	3b01      	subs	r3, #1
 8005284:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 8005286:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	3b01      	subs	r3, #1
 8005290:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <FMC_SDRAMInit+0x158>)
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	3202      	adds	r2, #2
 800529e:	6939      	ldr	r1, [r7, #16]
 80052a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80052a4:	e02c      	b.n	8005300 <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80052b8:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80052c4:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <FMC_SDRAMInit+0x158>)
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <FMC_SDRAMInit+0x158>)
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	3202      	adds	r2, #2
 80052fa:	6939      	ldr	r1, [r7, #16]
 80052fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	a0000140 	.word	0xa0000140

08005310 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8005324:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800532e:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800533a:	4b04      	ldr	r3, [pc, #16]	; (800534c <FMC_SDRAMCmdConfig+0x3c>)
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	611a      	str	r2, [r3, #16]

}
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	a0000140 	.word	0xa0000140

08005350 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <FMC_SetRefreshCount+0x20>)
 800535a:	4a05      	ldr	r2, [pc, #20]	; (8005370 <FMC_SetRefreshCount+0x20>)
 800535c:	6951      	ldr	r1, [r2, #20]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	0052      	lsls	r2, r2, #1
 8005362:	430a      	orrs	r2, r1
 8005364:	615a      	str	r2, [r3, #20]
   
}
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	a0000140 	.word	0xa0000140

08005374 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b10      	cmp	r3, #16
 800538a:	d103      	bne.n	8005394 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 800538c:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <FMC_GetFlagStatus+0x6c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	e012      	b.n	80053ba <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d103      	bne.n	80053a4 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <FMC_GetFlagStatus+0x70>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	e00a      	b.n	80053ba <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d103      	bne.n	80053b4 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <FMC_GetFlagStatus+0x74>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	e002      	b.n	80053ba <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 80053b4:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <FMC_GetFlagStatus+0x78>)
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	401a      	ands	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d002      	beq.n	80053cc <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
 80053ca:	e001      	b.n	80053d0 <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	a0000060 	.word	0xa0000060
 80053e4:	a0000080 	.word	0xa0000080
 80053e8:	a00000a0 	.word	0xa00000a0
 80053ec:	a0000140 	.word	0xa0000140

080053f0 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 80053f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053f8:	2101      	movs	r1, #1
 80053fa:	f7ff f923 	bl	8004644 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 80053fe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005402:	2100      	movs	r1, #0
 8005404:	f7ff f91e 	bl	8004644 <RCC_AHB1PeriphResetCmd>
}
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop

0800540c <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 8005424:	4a4f      	ldr	r2, [pc, #316]	; (8005564 <DMA2D_Init+0x158>)
 8005426:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <DMA2D_Init+0x158>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 800542e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005432:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 8005434:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <DMA2D_Init+0x158>)
 8005436:	4a4b      	ldr	r2, [pc, #300]	; (8005564 <DMA2D_Init+0x158>)
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 8005442:	4b48      	ldr	r3, [pc, #288]	; (8005564 <DMA2D_Init+0x158>)
 8005444:	4a47      	ldr	r2, [pc, #284]	; (8005564 <DMA2D_Init+0x158>)
 8005446:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005448:	f022 0207 	bic.w	r2, r2, #7
 800544c:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 800544e:	4b45      	ldr	r3, [pc, #276]	; (8005564 <DMA2D_Init+0x158>)
 8005450:	4a44      	ldr	r2, [pc, #272]	; (8005564 <DMA2D_Init+0x158>)
 8005452:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6852      	ldr	r2, [r2, #4]
 8005458:	430a      	orrs	r2, r1
 800545a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e03a      	b.n	80054f4 <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10a      	bne.n	800549c <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e02b      	b.n	80054f4 <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d10a      	bne.n	80054ba <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	015b      	lsls	r3, r3, #5
 80054aa:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	02db      	lsls	r3, r3, #11
 80054b2:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e01c      	b.n	80054f4 <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d10c      	bne.n	80054dc <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	015b      	lsls	r3, r3, #5
 80054c8:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	029b      	lsls	r3, r3, #10
 80054d0:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	03db      	lsls	r3, r3, #15
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e00b      	b.n	80054f4 <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <DMA2D_Init+0x158>)
 80054f6:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <DMA2D_Init+0x158>)
 80054f8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4310      	orrs	r0, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6892      	ldr	r2, [r2, #8]
 8005504:	4310      	orrs	r0, r2
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4302      	orrs	r2, r0
 800550a:	430a      	orrs	r2, r1
 800550c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <DMA2D_Init+0x158>)
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6992      	ldr	r2, [r2, #24]
 8005514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <DMA2D_Init+0x158>)
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <DMA2D_Init+0x158>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <DMA2D_Init+0x158>)
 8005528:	4a0e      	ldr	r2, [pc, #56]	; (8005564 <DMA2D_Init+0x158>)
 800552a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	69d2      	ldr	r2, [r2, #28]
 8005530:	430a      	orrs	r2, r1
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <DMA2D_Init+0x158>)
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <DMA2D_Init+0x158>)
 8005540:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005542:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8005546:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <DMA2D_Init+0x158>)
 800554a:	4a06      	ldr	r2, [pc, #24]	; (8005564 <DMA2D_Init+0x158>)
 800554c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6a10      	ldr	r0, [r2, #32]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4302      	orrs	r2, r0
 8005556:	430a      	orrs	r2, r1
 8005558:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	4002b000 	.word	0x4002b000

08005568 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <DMA2D_StartTransfer+0x18>)
 800556e:	4a04      	ldr	r2, [pc, #16]	; (8005580 <DMA2D_StartTransfer+0x18>)
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
}
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	4002b000 	.word	0x4002b000

08005584 <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <DMA2D_GetFlagStatus+0x30>)
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	e001      	b.n	80055a6 <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	4002b000 	.word	0x4002b000

080055b8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <DMA_Init+0xa8>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80055e2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80055ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80055fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005606:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0307 	bic.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	4313      	orrs	r3, r2
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
}
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	f01c803f 	.word	0xf01c803f

08005664 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f043 0201 	orr.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e005      	b.n	80056fc <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f023 0201 	bic.w	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
  }
}
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <DMA_GetFlagStatus+0x6c>)
 800571e:	429a      	cmp	r2, r3
 8005720:	d802      	bhi.n	8005728 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005722:	4b15      	ldr	r3, [pc, #84]	; (8005778 <DMA_GetFlagStatus+0x70>)
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e001      	b.n	800572c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005728:	4b14      	ldr	r3, [pc, #80]	; (800577c <DMA_GetFlagStatus+0x74>)
 800572a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e002      	b.n	8005744 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800574a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800574e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
 800575e:	e001      	b.n	8005764 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
}
 8005766:	4618      	mov	r0, r3
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	4002640f 	.word	0x4002640f
 8005778:	40026000 	.word	0x40026000
 800577c:	40026400 	.word	0x40026400

08005780 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <DMA_ClearFlag+0x50>)
 800578e:	429a      	cmp	r2, r3
 8005790:	d802      	bhi.n	8005798 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <DMA_ClearFlag+0x54>)
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e001      	b.n	800579c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <DMA_ClearFlag+0x58>)
 800579a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80057ac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	60d3      	str	r3, [r2, #12]
 80057b4:	e006      	b.n	80057c4 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80057bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	6093      	str	r3, [r2, #8]
  }    
}
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	4002640f 	.word	0x4002640f
 80057d4:	40026000 	.word	0x40026000
 80057d8:	40026400 	.word	0x40026400

080057dc <__libc_init_array>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <__libc_init_array+0x3c>)
 80057e0:	4d0e      	ldr	r5, [pc, #56]	; (800581c <__libc_init_array+0x40>)
 80057e2:	1aed      	subs	r5, r5, r3
 80057e4:	10ad      	asrs	r5, r5, #2
 80057e6:	2400      	movs	r4, #0
 80057e8:	461e      	mov	r6, r3
 80057ea:	42ac      	cmp	r4, r5
 80057ec:	d004      	beq.n	80057f8 <__libc_init_array+0x1c>
 80057ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80057f2:	4790      	blx	r2
 80057f4:	3401      	adds	r4, #1
 80057f6:	e7f8      	b.n	80057ea <__libc_init_array+0xe>
 80057f8:	f001 f8e8 	bl	80069cc <_init>
 80057fc:	4d08      	ldr	r5, [pc, #32]	; (8005820 <__libc_init_array+0x44>)
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <__libc_init_array+0x48>)
 8005800:	1aed      	subs	r5, r5, r3
 8005802:	10ad      	asrs	r5, r5, #2
 8005804:	2400      	movs	r4, #0
 8005806:	461e      	mov	r6, r3
 8005808:	42ac      	cmp	r4, r5
 800580a:	d004      	beq.n	8005816 <__libc_init_array+0x3a>
 800580c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005810:	4790      	blx	r2
 8005812:	3401      	adds	r4, #1
 8005814:	e7f8      	b.n	8005808 <__libc_init_array+0x2c>
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	080086c8 	.word	0x080086c8
 800581c:	080086c8 	.word	0x080086c8
 8005820:	080086cc 	.word	0x080086cc
 8005824:	080086c8 	.word	0x080086c8

08005828 <strlen>:
 8005828:	4603      	mov	r3, r0
 800582a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582e:	2a00      	cmp	r2, #0
 8005830:	d1fb      	bne.n	800582a <strlen+0x2>
 8005832:	1a18      	subs	r0, r3, r0
 8005834:	3801      	subs	r0, #1
 8005836:	4770      	bx	lr

08005838 <pow>:
 8005838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	ed2d 8b04 	vpush	{d8-d9}
 8005840:	eeb0 8a40 	vmov.f32	s16, s0
 8005844:	eef0 8a60 	vmov.f32	s17, s1
 8005848:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8005b24 <pow+0x2ec>
 800584c:	b08a      	sub	sp, #40	; 0x28
 800584e:	ec55 4b11 	vmov	r4, r5, d1
 8005852:	f000 f969 	bl	8005b28 <__ieee754_pow>
 8005856:	f999 3000 	ldrsb.w	r3, [r9]
 800585a:	eeb0 9a40 	vmov.f32	s18, s0
 800585e:	eef0 9a60 	vmov.f32	s19, s1
 8005862:	3301      	adds	r3, #1
 8005864:	46c8      	mov	r8, r9
 8005866:	f000 8146 	beq.w	8005af6 <pow+0x2be>
 800586a:	ec45 4b10 	vmov	d0, r4, r5
 800586e:	f000 ff69 	bl	8006744 <__fpclassifyd>
 8005872:	2800      	cmp	r0, #0
 8005874:	f000 813f 	beq.w	8005af6 <pow+0x2be>
 8005878:	eeb0 0a48 	vmov.f32	s0, s16
 800587c:	eef0 0a68 	vmov.f32	s1, s17
 8005880:	f000 ff60 	bl	8006744 <__fpclassifyd>
 8005884:	4606      	mov	r6, r0
 8005886:	b9f0      	cbnz	r0, 80058c6 <pow+0x8e>
 8005888:	4620      	mov	r0, r4
 800588a:	4629      	mov	r1, r5
 800588c:	2200      	movs	r2, #0
 800588e:	2300      	movs	r3, #0
 8005890:	f7fb f8ce 	bl	8000a30 <__aeabi_dcmpeq>
 8005894:	2800      	cmp	r0, #0
 8005896:	f000 812e 	beq.w	8005af6 <pow+0x2be>
 800589a:	2301      	movs	r3, #1
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	4b9a      	ldr	r3, [pc, #616]	; (8005b08 <pow+0x2d0>)
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	4b9a      	ldr	r3, [pc, #616]	; (8005b0c <pow+0x2d4>)
 80058a4:	9608      	str	r6, [sp, #32]
 80058a6:	2200      	movs	r2, #0
 80058a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058ac:	f999 3000 	ldrsb.w	r3, [r9]
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80058b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80058ba:	f000 8113 	beq.w	8005ae4 <pow+0x2ac>
 80058be:	2b02      	cmp	r3, #2
 80058c0:	f040 8084 	bne.w	80059cc <pow+0x194>
 80058c4:	e10e      	b.n	8005ae4 <pow+0x2ac>
 80058c6:	2600      	movs	r6, #0
 80058c8:	2700      	movs	r7, #0
 80058ca:	ec51 0b18 	vmov	r0, r1, d8
 80058ce:	4632      	mov	r2, r6
 80058d0:	463b      	mov	r3, r7
 80058d2:	f7fb f8ad 	bl	8000a30 <__aeabi_dcmpeq>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d03f      	beq.n	800595a <pow+0x122>
 80058da:	4620      	mov	r0, r4
 80058dc:	4629      	mov	r1, r5
 80058de:	4632      	mov	r2, r6
 80058e0:	463b      	mov	r3, r7
 80058e2:	f7fb f8a5 	bl	8000a30 <__aeabi_dcmpeq>
 80058e6:	4680      	mov	r8, r0
 80058e8:	b1a0      	cbz	r0, 8005914 <pow+0xdc>
 80058ea:	2301      	movs	r3, #1
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4b86      	ldr	r3, [pc, #536]	; (8005b08 <pow+0x2d0>)
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	2300      	movs	r3, #0
 80058f4:	9308      	str	r3, [sp, #32]
 80058f6:	f999 3000 	ldrsb.w	r3, [r9]
 80058fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80058fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005902:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d060      	beq.n	80059cc <pow+0x194>
 800590a:	4b80      	ldr	r3, [pc, #512]	; (8005b0c <pow+0x2d4>)
 800590c:	2200      	movs	r2, #0
 800590e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005912:	e0e7      	b.n	8005ae4 <pow+0x2ac>
 8005914:	ec45 4b10 	vmov	d0, r4, r5
 8005918:	f000 ff0b 	bl	8006732 <finite>
 800591c:	2800      	cmp	r0, #0
 800591e:	f000 80ea 	beq.w	8005af6 <pow+0x2be>
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	4632      	mov	r2, r6
 8005928:	463b      	mov	r3, r7
 800592a:	f7fb f88b 	bl	8000a44 <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	f000 80e1 	beq.w	8005af6 <pow+0x2be>
 8005934:	2301      	movs	r3, #1
 8005936:	f899 1000 	ldrb.w	r1, [r9]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <pow+0x2d0>)
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f8cd 8020 	str.w	r8, [sp, #32]
 8005944:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005948:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800594c:	b389      	cbz	r1, 80059b2 <pow+0x17a>
 800594e:	4b70      	ldr	r3, [pc, #448]	; (8005b10 <pow+0x2d8>)
 8005950:	2200      	movs	r2, #0
 8005952:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005956:	2902      	cmp	r1, #2
 8005958:	e037      	b.n	80059ca <pow+0x192>
 800595a:	eeb0 0a49 	vmov.f32	s0, s18
 800595e:	eef0 0a69 	vmov.f32	s1, s19
 8005962:	f000 fee6 	bl	8006732 <finite>
 8005966:	4682      	mov	sl, r0
 8005968:	2800      	cmp	r0, #0
 800596a:	f040 808e 	bne.w	8005a8a <pow+0x252>
 800596e:	eeb0 0a48 	vmov.f32	s0, s16
 8005972:	eef0 0a68 	vmov.f32	s1, s17
 8005976:	f000 fedc 	bl	8006732 <finite>
 800597a:	2800      	cmp	r0, #0
 800597c:	f000 8085 	beq.w	8005a8a <pow+0x252>
 8005980:	ec45 4b10 	vmov	d0, r4, r5
 8005984:	f000 fed5 	bl	8006732 <finite>
 8005988:	2800      	cmp	r0, #0
 800598a:	d07e      	beq.n	8005a8a <pow+0x252>
 800598c:	eeb0 0a49 	vmov.f32	s0, s18
 8005990:	eef0 0a69 	vmov.f32	s1, s19
 8005994:	f000 fed6 	bl	8006744 <__fpclassifyd>
 8005998:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <pow+0x2d0>)
 800599a:	bb08      	cbnz	r0, 80059e0 <pow+0x1a8>
 800599c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80059a0:	f899 4000 	ldrb.w	r4, [r9]
 80059a4:	9008      	str	r0, [sp, #32]
 80059a6:	2201      	movs	r2, #1
 80059a8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80059ac:	ed8d 8b02 	vstr	d8, [sp, #8]
 80059b0:	b914      	cbnz	r4, 80059b8 <pow+0x180>
 80059b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80059b6:	e009      	b.n	80059cc <pow+0x194>
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	4632      	mov	r2, r6
 80059be:	463b      	mov	r3, r7
 80059c0:	f7fa fef8 	bl	80007b4 <__aeabi_ddiv>
 80059c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059c8:	2c02      	cmp	r4, #2
 80059ca:	d005      	beq.n	80059d8 <pow+0x1a0>
 80059cc:	4668      	mov	r0, sp
 80059ce:	f000 fedd 	bl	800678c <matherr>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f040 8086 	bne.w	8005ae4 <pow+0x2ac>
 80059d8:	f000 fff2 	bl	80069c0 <__errno>
 80059dc:	2321      	movs	r3, #33	; 0x21
 80059de:	e080      	b.n	8005ae2 <pow+0x2aa>
 80059e0:	2203      	movs	r2, #3
 80059e2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80059e6:	f998 3000 	ldrsb.w	r3, [r8]
 80059ea:	f8cd a020 	str.w	sl, [sp, #32]
 80059ee:	ed8d 8b02 	vstr	d8, [sp, #8]
 80059f2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80059f6:	bb23      	cbnz	r3, 8005a42 <pow+0x20a>
 80059f8:	4b46      	ldr	r3, [pc, #280]	; (8005b14 <pow+0x2dc>)
 80059fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80059fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a02:	ec51 0b18 	vmov	r0, r1, d8
 8005a06:	4632      	mov	r2, r6
 8005a08:	463b      	mov	r3, r7
 8005a0a:	f7fb f81b 	bl	8000a44 <__aeabi_dcmplt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d05c      	beq.n	8005acc <pow+0x294>
 8005a12:	2200      	movs	r2, #0
 8005a14:	4b40      	ldr	r3, [pc, #256]	; (8005b18 <pow+0x2e0>)
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fda1 	bl	8000560 <__aeabi_dmul>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	ec45 4b10 	vmov	d0, r4, r5
 8005a26:	f000 febb 	bl	80067a0 <rint>
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	ec51 0b10 	vmov	r0, r1, d0
 8005a30:	462b      	mov	r3, r5
 8005a32:	f7fa fffd 	bl	8000a30 <__aeabi_dcmpeq>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d148      	bne.n	8005acc <pow+0x294>
 8005a3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a3e:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <pow+0x2e4>)
 8005a40:	e020      	b.n	8005a84 <pow+0x24c>
 8005a42:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <pow+0x2e8>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a4a:	ec51 0b18 	vmov	r0, r1, d8
 8005a4e:	4632      	mov	r2, r6
 8005a50:	463b      	mov	r3, r7
 8005a52:	f7fa fff7 	bl	8000a44 <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d038      	beq.n	8005acc <pow+0x294>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <pow+0x2e0>)
 8005a5e:	4620      	mov	r0, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	f7fa fd7d 	bl	8000560 <__aeabi_dmul>
 8005a66:	4604      	mov	r4, r0
 8005a68:	460d      	mov	r5, r1
 8005a6a:	ec45 4b10 	vmov	d0, r4, r5
 8005a6e:	f000 fe97 	bl	80067a0 <rint>
 8005a72:	4622      	mov	r2, r4
 8005a74:	ec51 0b10 	vmov	r0, r1, d0
 8005a78:	462b      	mov	r3, r5
 8005a7a:	f7fa ffd9 	bl	8000a30 <__aeabi_dcmpeq>
 8005a7e:	bb28      	cbnz	r0, 8005acc <pow+0x294>
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <pow+0x2d8>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a88:	e020      	b.n	8005acc <pow+0x294>
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	2700      	movs	r7, #0
 8005a8e:	ec51 0b19 	vmov	r0, r1, d9
 8005a92:	4632      	mov	r2, r6
 8005a94:	463b      	mov	r3, r7
 8005a96:	f7fa ffcb 	bl	8000a30 <__aeabi_dcmpeq>
 8005a9a:	b360      	cbz	r0, 8005af6 <pow+0x2be>
 8005a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8005aa0:	eef0 0a68 	vmov.f32	s1, s17
 8005aa4:	f000 fe45 	bl	8006732 <finite>
 8005aa8:	b328      	cbz	r0, 8005af6 <pow+0x2be>
 8005aaa:	ec45 4b10 	vmov	d0, r4, r5
 8005aae:	f000 fe40 	bl	8006732 <finite>
 8005ab2:	b300      	cbz	r0, 8005af6 <pow+0x2be>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005abc:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <pow+0x2d0>)
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005ac4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9308      	str	r3, [sp, #32]
 8005acc:	f998 3000 	ldrsb.w	r3, [r8]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d003      	beq.n	8005adc <pow+0x2a4>
 8005ad4:	4668      	mov	r0, sp
 8005ad6:	f000 fe59 	bl	800678c <matherr>
 8005ada:	b918      	cbnz	r0, 8005ae4 <pow+0x2ac>
 8005adc:	f000 ff70 	bl	80069c0 <__errno>
 8005ae0:	2322      	movs	r3, #34	; 0x22
 8005ae2:	6003      	str	r3, [r0, #0]
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	b11b      	cbz	r3, 8005af0 <pow+0x2b8>
 8005ae8:	f000 ff6a 	bl	80069c0 <__errno>
 8005aec:	9b08      	ldr	r3, [sp, #32]
 8005aee:	6003      	str	r3, [r0, #0]
 8005af0:	ed9d 0b06 	vldr	d0, [sp, #24]
 8005af4:	e003      	b.n	8005afe <pow+0x2c6>
 8005af6:	eeb0 0a49 	vmov.f32	s0, s18
 8005afa:	eef0 0a69 	vmov.f32	s1, s19
 8005afe:	b00a      	add	sp, #40	; 0x28
 8005b00:	ecbd 8b04 	vpop	{d8-d9}
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	08008682 	.word	0x08008682
 8005b0c:	3ff00000 	.word	0x3ff00000
 8005b10:	fff00000 	.word	0xfff00000
 8005b14:	47efffff 	.word	0x47efffff
 8005b18:	3fe00000 	.word	0x3fe00000
 8005b1c:	c7efffff 	.word	0xc7efffff
 8005b20:	7ff00000 	.word	0x7ff00000
 8005b24:	20000128 	.word	0x20000128

08005b28 <__ieee754_pow>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	ec59 8b11 	vmov	r8, r9, d1
 8005b30:	ed2d 8b02 	vpush	{d8}
 8005b34:	eeb0 8a40 	vmov.f32	s16, s0
 8005b38:	eef0 8a60 	vmov.f32	s17, s1
 8005b3c:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8005b40:	b091      	sub	sp, #68	; 0x44
 8005b42:	ea57 0208 	orrs.w	r2, r7, r8
 8005b46:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005b4a:	ec55 4b10 	vmov	r4, r5, d0
 8005b4e:	f000 84f6 	beq.w	800653e <__ieee754_pow+0xa16>
 8005b52:	4bb7      	ldr	r3, [pc, #732]	; (8005e30 <__ieee754_pow+0x308>)
 8005b54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b58:	429e      	cmp	r6, r3
 8005b5a:	dc07      	bgt.n	8005b6c <__ieee754_pow+0x44>
 8005b5c:	d100      	bne.n	8005b60 <__ieee754_pow+0x38>
 8005b5e:	b92c      	cbnz	r4, 8005b6c <__ieee754_pow+0x44>
 8005b60:	429f      	cmp	r7, r3
 8005b62:	dc03      	bgt.n	8005b6c <__ieee754_pow+0x44>
 8005b64:	d111      	bne.n	8005b8a <__ieee754_pow+0x62>
 8005b66:	f1b8 0f00 	cmp.w	r8, #0
 8005b6a:	d00e      	beq.n	8005b8a <__ieee754_pow+0x62>
 8005b6c:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8005b70:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005b74:	4326      	orrs	r6, r4
 8005b76:	f000 84e2 	beq.w	800653e <__ieee754_pow+0xa16>
 8005b7a:	48ae      	ldr	r0, [pc, #696]	; (8005e34 <__ieee754_pow+0x30c>)
 8005b7c:	b011      	add	sp, #68	; 0x44
 8005b7e:	ecbd 8b02 	vpop	{d8}
 8005b82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b86:	f000 be03 	b.w	8006790 <nan>
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	da2d      	bge.n	8005bea <__ieee754_pow+0xc2>
 8005b8e:	4baa      	ldr	r3, [pc, #680]	; (8005e38 <__ieee754_pow+0x310>)
 8005b90:	429f      	cmp	r7, r3
 8005b92:	dc27      	bgt.n	8005be4 <__ieee754_pow+0xbc>
 8005b94:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005b98:	429f      	cmp	r7, r3
 8005b9a:	dd26      	ble.n	8005bea <__ieee754_pow+0xc2>
 8005b9c:	153b      	asrs	r3, r7, #20
 8005b9e:	f240 4213 	movw	r2, #1043	; 0x413
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	dd0d      	ble.n	8005bc2 <__ieee754_pow+0x9a>
 8005ba6:	f5c3 6386 	rsb	r3, r3, #1072	; 0x430
 8005baa:	3303      	adds	r3, #3
 8005bac:	fa28 fc03 	lsr.w	ip, r8, r3
 8005bb0:	fa0c f303 	lsl.w	r3, ip, r3
 8005bb4:	4543      	cmp	r3, r8
 8005bb6:	d118      	bne.n	8005bea <__ieee754_pow+0xc2>
 8005bb8:	f00c 0c01 	and.w	ip, ip, #1
 8005bbc:	f1cc 0c02 	rsb	ip, ip, #2
 8005bc0:	e015      	b.n	8005bee <__ieee754_pow+0xc6>
 8005bc2:	f1b8 0f00 	cmp.w	r8, #0
 8005bc6:	d156      	bne.n	8005c76 <__ieee754_pow+0x14e>
 8005bc8:	f5c3 6382 	rsb	r3, r3, #1040	; 0x410
 8005bcc:	3303      	adds	r3, #3
 8005bce:	fa47 fc03 	asr.w	ip, r7, r3
 8005bd2:	fa0c f303 	lsl.w	r3, ip, r3
 8005bd6:	42bb      	cmp	r3, r7
 8005bd8:	d12a      	bne.n	8005c30 <__ieee754_pow+0x108>
 8005bda:	f00c 0c01 	and.w	ip, ip, #1
 8005bde:	f1cc 0c02 	rsb	ip, ip, #2
 8005be2:	e026      	b.n	8005c32 <__ieee754_pow+0x10a>
 8005be4:	f04f 0c02 	mov.w	ip, #2
 8005be8:	e001      	b.n	8005bee <__ieee754_pow+0xc6>
 8005bea:	f04f 0c00 	mov.w	ip, #0
 8005bee:	f1b8 0f00 	cmp.w	r8, #0
 8005bf2:	d142      	bne.n	8005c7a <__ieee754_pow+0x152>
 8005bf4:	4b8e      	ldr	r3, [pc, #568]	; (8005e30 <__ieee754_pow+0x308>)
 8005bf6:	429f      	cmp	r7, r3
 8005bf8:	d11b      	bne.n	8005c32 <__ieee754_pow+0x10a>
 8005bfa:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 8005bfe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005c02:	4323      	orrs	r3, r4
 8005c04:	f000 849b 	beq.w	800653e <__ieee754_pow+0xa16>
 8005c08:	4b8c      	ldr	r3, [pc, #560]	; (8005e3c <__ieee754_pow+0x314>)
 8005c0a:	429e      	cmp	r6, r3
 8005c0c:	dd07      	ble.n	8005c1e <__ieee754_pow+0xf6>
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	f280 8497 	bge.w	8006544 <__ieee754_pow+0xa1c>
 8005c16:	2000      	movs	r0, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f000 bc9b 	b.w	8006554 <__ieee754_pow+0xa2c>
 8005c1e:	f1b9 0f00 	cmp.w	r9, #0
 8005c22:	daf8      	bge.n	8005c16 <__ieee754_pow+0xee>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	9802      	ldr	r0, [sp, #8]
 8005c28:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c2c:	f000 bc92 	b.w	8006554 <__ieee754_pow+0xa2c>
 8005c30:	46c4      	mov	ip, r8
 8005c32:	4b83      	ldr	r3, [pc, #524]	; (8005e40 <__ieee754_pow+0x318>)
 8005c34:	429f      	cmp	r7, r3
 8005c36:	d108      	bne.n	8005c4a <__ieee754_pow+0x122>
 8005c38:	f1b9 0f00 	cmp.w	r9, #0
 8005c3c:	f280 8485 	bge.w	800654a <__ieee754_pow+0xa22>
 8005c40:	2000      	movs	r0, #0
 8005c42:	497f      	ldr	r1, [pc, #508]	; (8005e40 <__ieee754_pow+0x318>)
 8005c44:	ec53 2b18 	vmov	r2, r3, d8
 8005c48:	e04c      	b.n	8005ce4 <__ieee754_pow+0x1bc>
 8005c4a:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005c4e:	d102      	bne.n	8005c56 <__ieee754_pow+0x12e>
 8005c50:	ec51 0b18 	vmov	r0, r1, d8
 8005c54:	e06e      	b.n	8005d34 <__ieee754_pow+0x20c>
 8005c56:	4b7b      	ldr	r3, [pc, #492]	; (8005e44 <__ieee754_pow+0x31c>)
 8005c58:	4599      	cmp	r9, r3
 8005c5a:	d10e      	bne.n	8005c7a <__ieee754_pow+0x152>
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	db0c      	blt.n	8005c7a <__ieee754_pow+0x152>
 8005c60:	eeb0 0a48 	vmov.f32	s0, s16
 8005c64:	eef0 0a68 	vmov.f32	s1, s17
 8005c68:	b011      	add	sp, #68	; 0x44
 8005c6a:	ecbd 8b02 	vpop	{d8}
 8005c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c72:	f000 bc9d 	b.w	80065b0 <__ieee754_sqrt>
 8005c76:	f04f 0c00 	mov.w	ip, #0
 8005c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c7e:	eef0 0a68 	vmov.f32	s1, s17
 8005c82:	f8cd c004 	str.w	ip, [sp, #4]
 8005c86:	f000 fd4b 	bl	8006720 <fabs>
 8005c8a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c8e:	ec5b ab10 	vmov	sl, fp, d0
 8005c92:	2c00      	cmp	r4, #0
 8005c94:	d133      	bne.n	8005cfe <__ieee754_pow+0x1d6>
 8005c96:	b126      	cbz	r6, 8005ca2 <__ieee754_pow+0x17a>
 8005c98:	4b69      	ldr	r3, [pc, #420]	; (8005e40 <__ieee754_pow+0x318>)
 8005c9a:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	d12d      	bne.n	8005cfe <__ieee754_pow+0x1d6>
 8005ca2:	f1b9 0f00 	cmp.w	r9, #0
 8005ca6:	da0b      	bge.n	8005cc0 <__ieee754_pow+0x198>
 8005ca8:	4652      	mov	r2, sl
 8005caa:	465b      	mov	r3, fp
 8005cac:	2000      	movs	r0, #0
 8005cae:	4964      	ldr	r1, [pc, #400]	; (8005e40 <__ieee754_pow+0x318>)
 8005cb0:	f8cd c004 	str.w	ip, [sp, #4]
 8005cb4:	f7fa fd7e 	bl	80007b4 <__aeabi_ddiv>
 8005cb8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005cbc:	4682      	mov	sl, r0
 8005cbe:	468b      	mov	fp, r1
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	f280 8445 	bge.w	8006550 <__ieee754_pow+0xa28>
 8005cc6:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8005cca:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005cce:	ea5c 0606 	orrs.w	r6, ip, r6
 8005cd2:	d10b      	bne.n	8005cec <__ieee754_pow+0x1c4>
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	f7fa fa8c 	bl	80001f8 <__aeabi_dsub>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	f7fa fd66 	bl	80007b4 <__aeabi_ddiv>
 8005ce8:	f000 bc34 	b.w	8006554 <__ieee754_pow+0xa2c>
 8005cec:	f1bc 0f01 	cmp.w	ip, #1
 8005cf0:	f040 842e 	bne.w	8006550 <__ieee754_pow+0xa28>
 8005cf4:	4650      	mov	r0, sl
 8005cf6:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
 8005cfa:	f000 bc2b 	b.w	8006554 <__ieee754_pow+0xa2c>
 8005cfe:	0feb      	lsrs	r3, r5, #31
 8005d00:	3b01      	subs	r3, #1
 8005d02:	930d      	str	r3, [sp, #52]	; 0x34
 8005d04:	ea5c 0303 	orrs.w	r3, ip, r3
 8005d08:	d102      	bne.n	8005d10 <__ieee754_pow+0x1e8>
 8005d0a:	ec51 0b18 	vmov	r0, r1, d8
 8005d0e:	e7e3      	b.n	8005cd8 <__ieee754_pow+0x1b0>
 8005d10:	4b4d      	ldr	r3, [pc, #308]	; (8005e48 <__ieee754_pow+0x320>)
 8005d12:	429f      	cmp	r7, r3
 8005d14:	f340 809e 	ble.w	8005e54 <__ieee754_pow+0x32c>
 8005d18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d1c:	429f      	cmp	r7, r3
 8005d1e:	dd0f      	ble.n	8005d40 <__ieee754_pow+0x218>
 8005d20:	4b46      	ldr	r3, [pc, #280]	; (8005e3c <__ieee754_pow+0x314>)
 8005d22:	429e      	cmp	r6, r3
 8005d24:	dc12      	bgt.n	8005d4c <__ieee754_pow+0x224>
 8005d26:	f1b9 0f00 	cmp.w	r9, #0
 8005d2a:	f6bf af74 	bge.w	8005c16 <__ieee754_pow+0xee>
 8005d2e:	a136      	add	r1, pc, #216	; (adr r1, 8005e08 <__ieee754_pow+0x2e0>)
 8005d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	f7fa fc12 	bl	8000560 <__aeabi_dmul>
 8005d3c:	f000 bc0a 	b.w	8006554 <__ieee754_pow+0xa2c>
 8005d40:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <__ieee754_pow+0x324>)
 8005d42:	429e      	cmp	r6, r3
 8005d44:	ddef      	ble.n	8005d26 <__ieee754_pow+0x1fe>
 8005d46:	4b3e      	ldr	r3, [pc, #248]	; (8005e40 <__ieee754_pow+0x318>)
 8005d48:	429e      	cmp	r6, r3
 8005d4a:	dd03      	ble.n	8005d54 <__ieee754_pow+0x22c>
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	dced      	bgt.n	8005d2e <__ieee754_pow+0x206>
 8005d52:	e760      	b.n	8005c16 <__ieee754_pow+0xee>
 8005d54:	4650      	mov	r0, sl
 8005d56:	4659      	mov	r1, fp
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4b39      	ldr	r3, [pc, #228]	; (8005e40 <__ieee754_pow+0x318>)
 8005d5c:	f8cd c004 	str.w	ip, [sp, #4]
 8005d60:	f7fa fa4a 	bl	80001f8 <__aeabi_dsub>
 8005d64:	a32a      	add	r3, pc, #168	; (adr r3, 8005e10 <__ieee754_pow+0x2e8>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	f7fa fbf7 	bl	8000560 <__aeabi_dmul>
 8005d72:	a329      	add	r3, pc, #164	; (adr r3, 8005e18 <__ieee754_pow+0x2f0>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa fbee 	bl	8000560 <__aeabi_dmul>
 8005d84:	4622      	mov	r2, r4
 8005d86:	4682      	mov	sl, r0
 8005d88:	468b      	mov	fp, r1
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fbe6 	bl	8000560 <__aeabi_dmul>
 8005d94:	2200      	movs	r2, #0
 8005d96:	4680      	mov	r8, r0
 8005d98:	4689      	mov	r9, r1
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4b2c      	ldr	r3, [pc, #176]	; (8005e50 <__ieee754_pow+0x328>)
 8005da0:	f7fa fbde 	bl	8000560 <__aeabi_dmul>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	a11d      	add	r1, pc, #116	; (adr r1, 8005e20 <__ieee754_pow+0x2f8>)
 8005daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dae:	f7fa fa23 	bl	80001f8 <__aeabi_dsub>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4620      	mov	r0, r4
 8005db8:	4629      	mov	r1, r5
 8005dba:	f7fa fbd1 	bl	8000560 <__aeabi_dmul>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	491f      	ldr	r1, [pc, #124]	; (8005e44 <__ieee754_pow+0x31c>)
 8005dc6:	f7fa fa17 	bl	80001f8 <__aeabi_dsub>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa fbc5 	bl	8000560 <__aeabi_dmul>
 8005dd6:	a314      	add	r3, pc, #80	; (adr r3, 8005e28 <__ieee754_pow+0x300>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa fbc0 	bl	8000560 <__aeabi_dmul>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4650      	mov	r0, sl
 8005de6:	4659      	mov	r1, fp
 8005de8:	f7fa fa06 	bl	80001f8 <__aeabi_dsub>
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f7fa fa00 	bl	80001fc <__adddf3>
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	4682      	mov	sl, r0
 8005e00:	468b      	mov	fp, r1
 8005e02:	4632      	mov	r2, r6
 8005e04:	463b      	mov	r3, r7
 8005e06:	e1e3      	b.n	80061d0 <__ieee754_pow+0x6a8>
 8005e08:	8800759c 	.word	0x8800759c
 8005e0c:	7e37e43c 	.word	0x7e37e43c
 8005e10:	60000000 	.word	0x60000000
 8005e14:	3ff71547 	.word	0x3ff71547
 8005e18:	f85ddf44 	.word	0xf85ddf44
 8005e1c:	3e54ae0b 	.word	0x3e54ae0b
 8005e20:	55555555 	.word	0x55555555
 8005e24:	3fd55555 	.word	0x3fd55555
 8005e28:	652b82fe 	.word	0x652b82fe
 8005e2c:	3ff71547 	.word	0x3ff71547
 8005e30:	7ff00000 	.word	0x7ff00000
 8005e34:	08008681 	.word	0x08008681
 8005e38:	433fffff 	.word	0x433fffff
 8005e3c:	3fefffff 	.word	0x3fefffff
 8005e40:	3ff00000 	.word	0x3ff00000
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	41e00000 	.word	0x41e00000
 8005e4c:	3feffffe 	.word	0x3feffffe
 8005e50:	3fd00000 	.word	0x3fd00000
 8005e54:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8005e58:	da0e      	bge.n	8005e78 <__ieee754_pow+0x350>
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <__ieee754_pow+0x380>)
 8005e5e:	f8cd c004 	str.w	ip, [sp, #4]
 8005e62:	4659      	mov	r1, fp
 8005e64:	2200      	movs	r2, #0
 8005e66:	f7fa fb7b 	bl	8000560 <__aeabi_dmul>
 8005e6a:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8005e6e:	4682      	mov	sl, r0
 8005e70:	460e      	mov	r6, r1
 8005e72:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005e76:	e000      	b.n	8005e7a <__ieee754_pow+0x352>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	1532      	asrs	r2, r6, #20
 8005e7c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005e80:	189a      	adds	r2, r3, r2
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <__ieee754_pow+0x384>)
 8005e84:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e86:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8005e8a:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 8005e8e:	429e      	cmp	r6, r3
 8005e90:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e94:	dd06      	ble.n	8005ea4 <__ieee754_pow+0x37c>
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <__ieee754_pow+0x388>)
 8005e98:	429e      	cmp	r6, r3
 8005e9a:	dd0b      	ble.n	8005eb4 <__ieee754_pow+0x38c>
 8005e9c:	3201      	adds	r2, #1
 8005e9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ea0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	e006      	b.n	8005eb6 <__ieee754_pow+0x38e>
 8005ea8:	43400000 	.word	0x43400000
 8005eac:	0003988e 	.word	0x0003988e
 8005eb0:	000bb679 	.word	0x000bb679
 8005eb4:	2601      	movs	r6, #1
 8005eb6:	4ba4      	ldr	r3, [pc, #656]	; (8006148 <__ieee754_pow+0x620>)
 8005eb8:	f8cd c004 	str.w	ip, [sp, #4]
 8005ebc:	00f2      	lsls	r2, r6, #3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec4:	46bb      	mov	fp, r7
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	920c      	str	r2, [sp, #48]	; 0x30
 8005eca:	4650      	mov	r0, sl
 8005ecc:	4642      	mov	r2, r8
 8005ece:	4639      	mov	r1, r7
 8005ed0:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005ed4:	f7fa f990 	bl	80001f8 <__aeabi_dsub>
 8005ed8:	4642      	mov	r2, r8
 8005eda:	4604      	mov	r4, r0
 8005edc:	460d      	mov	r5, r1
 8005ede:	464b      	mov	r3, r9
 8005ee0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ee4:	f7fa f98a 	bl	80001fc <__adddf3>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	2000      	movs	r0, #0
 8005eee:	4997      	ldr	r1, [pc, #604]	; (800614c <__ieee754_pow+0x624>)
 8005ef0:	f7fa fc60 	bl	80007b4 <__aeabi_ddiv>
 8005ef4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005ef8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fb2e 	bl	8000560 <__aeabi_dmul>
 8005f04:	2200      	movs	r2, #0
 8005f06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f0a:	9204      	str	r2, [sp, #16]
 8005f0c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005f10:	107f      	asrs	r7, r7, #1
 8005f12:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005f16:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
 8005f1a:	eb07 4386 	add.w	r3, r7, r6, lsl #18
 8005f1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f22:	2200      	movs	r2, #0
 8005f24:	4650      	mov	r0, sl
 8005f26:	4659      	mov	r1, fp
 8005f28:	4616      	mov	r6, r2
 8005f2a:	461f      	mov	r7, r3
 8005f2c:	f7fa fb18 	bl	8000560 <__aeabi_dmul>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7fa f95e 	bl	80001f8 <__aeabi_dsub>
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	4604      	mov	r4, r0
 8005f40:	460d      	mov	r5, r1
 8005f42:	464b      	mov	r3, r9
 8005f44:	4630      	mov	r0, r6
 8005f46:	4639      	mov	r1, r7
 8005f48:	f7fa f956 	bl	80001f8 <__aeabi_dsub>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f54:	f7fa f950 	bl	80001f8 <__aeabi_dsub>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	4659      	mov	r1, fp
 8005f60:	f7fa fafe 	bl	8000560 <__aeabi_dmul>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa f944 	bl	80001f8 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f78:	f7fa faf2 	bl	8000560 <__aeabi_dmul>
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	f7fa faea 	bl	8000560 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4604      	mov	r4, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	f7fa fae4 	bl	8000560 <__aeabi_dmul>
 8005f98:	a35b      	add	r3, pc, #364	; (adr r3, 8006108 <__ieee754_pow+0x5e0>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	f7fa fadb 	bl	8000560 <__aeabi_dmul>
 8005faa:	a359      	add	r3, pc, #356	; (adr r3, 8006110 <__ieee754_pow+0x5e8>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa f924 	bl	80001fc <__adddf3>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fa fad0 	bl	8000560 <__aeabi_dmul>
 8005fc0:	a355      	add	r3, pc, #340	; (adr r3, 8006118 <__ieee754_pow+0x5f0>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa f919 	bl	80001fc <__adddf3>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa fac5 	bl	8000560 <__aeabi_dmul>
 8005fd6:	a352      	add	r3, pc, #328	; (adr r3, 8006120 <__ieee754_pow+0x5f8>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa f90e 	bl	80001fc <__adddf3>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa faba 	bl	8000560 <__aeabi_dmul>
 8005fec:	a34e      	add	r3, pc, #312	; (adr r3, 8006128 <__ieee754_pow+0x600>)
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f7fa f903 	bl	80001fc <__adddf3>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7fa faaf 	bl	8000560 <__aeabi_dmul>
 8006002:	a34b      	add	r3, pc, #300	; (adr r3, 8006130 <__ieee754_pow+0x608>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa f8f8 	bl	80001fc <__adddf3>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa faa4 	bl	8000560 <__aeabi_dmul>
 8006018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800601c:	4604      	mov	r4, r0
 800601e:	460d      	mov	r5, r1
 8006020:	4650      	mov	r0, sl
 8006022:	4659      	mov	r1, fp
 8006024:	f7fa f8ea 	bl	80001fc <__adddf3>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4630      	mov	r0, r6
 800602e:	4639      	mov	r1, r7
 8006030:	f7fa fa96 	bl	8000560 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4620      	mov	r0, r4
 800603a:	4629      	mov	r1, r5
 800603c:	f7fa f8de 	bl	80001fc <__adddf3>
 8006040:	4652      	mov	r2, sl
 8006042:	4680      	mov	r8, r0
 8006044:	4689      	mov	r9, r1
 8006046:	465b      	mov	r3, fp
 8006048:	4650      	mov	r0, sl
 800604a:	4659      	mov	r1, fp
 800604c:	f7fa fa88 	bl	8000560 <__aeabi_dmul>
 8006050:	2200      	movs	r2, #0
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <__ieee754_pow+0x628>)
 8006054:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006058:	f7fa f8d0 	bl	80001fc <__adddf3>
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	f7fa f8cc 	bl	80001fc <__adddf3>
 8006064:	9804      	ldr	r0, [sp, #16]
 8006066:	460d      	mov	r5, r1
 8006068:	4604      	mov	r4, r0
 800606a:	4622      	mov	r2, r4
 800606c:	462b      	mov	r3, r5
 800606e:	4650      	mov	r0, sl
 8006070:	4659      	mov	r1, fp
 8006072:	f7fa fa75 	bl	8000560 <__aeabi_dmul>
 8006076:	4622      	mov	r2, r4
 8006078:	4682      	mov	sl, r0
 800607a:	468b      	mov	fp, r1
 800607c:	462b      	mov	r3, r5
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fa6d 	bl	8000560 <__aeabi_dmul>
 8006086:	2200      	movs	r2, #0
 8006088:	4606      	mov	r6, r0
 800608a:	460f      	mov	r7, r1
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <__ieee754_pow+0x628>)
 8006092:	f7fa f8b1 	bl	80001f8 <__aeabi_dsub>
 8006096:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800609a:	f7fa f8ad 	bl	80001f8 <__aeabi_dsub>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4640      	mov	r0, r8
 80060a4:	4649      	mov	r1, r9
 80060a6:	f7fa f8a7 	bl	80001f8 <__aeabi_dsub>
 80060aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060ae:	f7fa fa57 	bl	8000560 <__aeabi_dmul>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa f89f 	bl	80001fc <__adddf3>
 80060be:	4680      	mov	r8, r0
 80060c0:	4689      	mov	r9, r1
 80060c2:	4642      	mov	r2, r8
 80060c4:	464b      	mov	r3, r9
 80060c6:	4650      	mov	r0, sl
 80060c8:	4659      	mov	r1, fp
 80060ca:	f7fa f897 	bl	80001fc <__adddf3>
 80060ce:	9804      	ldr	r0, [sp, #16]
 80060d0:	a319      	add	r3, pc, #100	; (adr r3, 8006138 <__ieee754_pow+0x610>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	4604      	mov	r4, r0
 80060d8:	460d      	mov	r5, r1
 80060da:	f7fa fa41 	bl	8000560 <__aeabi_dmul>
 80060de:	a318      	add	r3, pc, #96	; (adr r3, 8006140 <__ieee754_pow+0x618>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060e8:	4620      	mov	r0, r4
 80060ea:	4629      	mov	r1, r5
 80060ec:	f7fa fa38 	bl	8000560 <__aeabi_dmul>
 80060f0:	4652      	mov	r2, sl
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	465b      	mov	r3, fp
 80060f8:	4620      	mov	r0, r4
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7fa f87c 	bl	80001f8 <__aeabi_dsub>
 8006100:	4602      	mov	r2, r0
 8006102:	e027      	b.n	8006154 <__ieee754_pow+0x62c>
 8006104:	f3af 8000 	nop.w
 8006108:	4a454eef 	.word	0x4a454eef
 800610c:	3fca7e28 	.word	0x3fca7e28
 8006110:	93c9db65 	.word	0x93c9db65
 8006114:	3fcd864a 	.word	0x3fcd864a
 8006118:	a91d4101 	.word	0xa91d4101
 800611c:	3fd17460 	.word	0x3fd17460
 8006120:	518f264d 	.word	0x518f264d
 8006124:	3fd55555 	.word	0x3fd55555
 8006128:	db6fabff 	.word	0xdb6fabff
 800612c:	3fdb6db6 	.word	0x3fdb6db6
 8006130:	33333303 	.word	0x33333303
 8006134:	3fe33333 	.word	0x3fe33333
 8006138:	e0000000 	.word	0xe0000000
 800613c:	3feec709 	.word	0x3feec709
 8006140:	145b01f5 	.word	0x145b01f5
 8006144:	be3e2fe0 	.word	0xbe3e2fe0
 8006148:	080086a8 	.word	0x080086a8
 800614c:	3ff00000 	.word	0x3ff00000
 8006150:	40080000 	.word	0x40080000
 8006154:	460b      	mov	r3, r1
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa f84d 	bl	80001f8 <__aeabi_dsub>
 800615e:	a38d      	add	r3, pc, #564	; (adr r3, 8006394 <__ieee754_pow+0x86c>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa f9fc 	bl	8000560 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa f844 	bl	80001fc <__adddf3>
 8006174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006176:	4b82      	ldr	r3, [pc, #520]	; (8006380 <__ieee754_pow+0x858>)
 8006178:	4413      	add	r3, r2
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa f83d 	bl	80001fc <__adddf3>
 8006182:	4604      	mov	r4, r0
 8006184:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006186:	460d      	mov	r5, r1
 8006188:	f7fa f984 	bl	8000494 <__aeabi_i2d>
 800618c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800618e:	4b7d      	ldr	r3, [pc, #500]	; (8006384 <__ieee754_pow+0x85c>)
 8006190:	4413      	add	r3, r2
 8006192:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006196:	4606      	mov	r6, r0
 8006198:	460f      	mov	r7, r1
 800619a:	4622      	mov	r2, r4
 800619c:	462b      	mov	r3, r5
 800619e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a2:	f7fa f82b 	bl	80001fc <__adddf3>
 80061a6:	4642      	mov	r2, r8
 80061a8:	464b      	mov	r3, r9
 80061aa:	f7fa f827 	bl	80001fc <__adddf3>
 80061ae:	4632      	mov	r2, r6
 80061b0:	463b      	mov	r3, r7
 80061b2:	f7fa f823 	bl	80001fc <__adddf3>
 80061b6:	9804      	ldr	r0, [sp, #16]
 80061b8:	4632      	mov	r2, r6
 80061ba:	463b      	mov	r3, r7
 80061bc:	4682      	mov	sl, r0
 80061be:	468b      	mov	fp, r1
 80061c0:	f7fa f81a 	bl	80001f8 <__aeabi_dsub>
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	f7fa f816 	bl	80001f8 <__aeabi_dsub>
 80061cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061d0:	f7fa f812 	bl	80001f8 <__aeabi_dsub>
 80061d4:	460b      	mov	r3, r1
 80061d6:	4602      	mov	r2, r0
 80061d8:	4629      	mov	r1, r5
 80061da:	4620      	mov	r0, r4
 80061dc:	f7fa f80c 	bl	80001f8 <__aeabi_dsub>
 80061e0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80061e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80061ea:	ea5c 0303 	orrs.w	r3, ip, r3
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	d102      	bne.n	80061fa <__ieee754_pow+0x6d2>
 80061f4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8006358 <__ieee754_pow+0x830>
 80061f8:	e001      	b.n	80061fe <__ieee754_pow+0x6d6>
 80061fa:	ed9f 7b59 	vldr	d7, [pc, #356]	; 8006360 <__ieee754_pow+0x838>
 80061fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006202:	2400      	movs	r4, #0
 8006204:	462b      	mov	r3, r5
 8006206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800620a:	4622      	mov	r2, r4
 800620c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006210:	f7f9 fff2 	bl	80001f8 <__aeabi_dsub>
 8006214:	4652      	mov	r2, sl
 8006216:	465b      	mov	r3, fp
 8006218:	f7fa f9a2 	bl	8000560 <__aeabi_dmul>
 800621c:	4632      	mov	r2, r6
 800621e:	4680      	mov	r8, r0
 8006220:	4689      	mov	r9, r1
 8006222:	463b      	mov	r3, r7
 8006224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006228:	f7fa f99a 	bl	8000560 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7f9 ffe2 	bl	80001fc <__adddf3>
 8006238:	4652      	mov	r2, sl
 800623a:	465b      	mov	r3, fp
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	4620      	mov	r0, r4
 8006242:	4629      	mov	r1, r5
 8006244:	f7fa f98c 	bl	8000560 <__aeabi_dmul>
 8006248:	4680      	mov	r8, r0
 800624a:	4689      	mov	r9, r1
 800624c:	464b      	mov	r3, r9
 800624e:	4630      	mov	r0, r6
 8006250:	4639      	mov	r1, r7
 8006252:	4642      	mov	r2, r8
 8006254:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006258:	f7f9 ffd0 	bl	80001fc <__adddf3>
 800625c:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <__ieee754_pow+0x860>)
 800625e:	4299      	cmp	r1, r3
 8006260:	4682      	mov	sl, r0
 8006262:	468b      	mov	fp, r1
 8006264:	460d      	mov	r5, r1
 8006266:	dd26      	ble.n	80062b6 <__ieee754_pow+0x78e>
 8006268:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800626c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006270:	4303      	orrs	r3, r0
 8006272:	d115      	bne.n	80062a0 <__ieee754_pow+0x778>
 8006274:	a33c      	add	r3, pc, #240	; (adr r3, 8006368 <__ieee754_pow+0x840>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7f9 ffbd 	bl	80001fc <__adddf3>
 8006282:	4642      	mov	r2, r8
 8006284:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006288:	464b      	mov	r3, r9
 800628a:	4650      	mov	r0, sl
 800628c:	4659      	mov	r1, fp
 800628e:	f7f9 ffb3 	bl	80001f8 <__aeabi_dsub>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800629a:	f7fa fbf1 	bl	8000a80 <__aeabi_dcmpgt>
 800629e:	b368      	cbz	r0, 80062fc <__ieee754_pow+0x7d4>
 80062a0:	a333      	add	r3, pc, #204	; (adr r3, 8006370 <__ieee754_pow+0x848>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062aa:	f7fa f959 	bl	8000560 <__aeabi_dmul>
 80062ae:	a330      	add	r3, pc, #192	; (adr r3, 8006370 <__ieee754_pow+0x848>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	e540      	b.n	8005d38 <__ieee754_pow+0x210>
 80062b6:	4b35      	ldr	r3, [pc, #212]	; (800638c <__ieee754_pow+0x864>)
 80062b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80062bc:	429a      	cmp	r2, r3
 80062be:	dd1d      	ble.n	80062fc <__ieee754_pow+0x7d4>
 80062c0:	f101 537d 	add.w	r3, r1, #1061158912	; 0x3f400000
 80062c4:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 80062c8:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 80062cc:	4303      	orrs	r3, r0
 80062ce:	d10a      	bne.n	80062e6 <__ieee754_pow+0x7be>
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	f7f9 ff90 	bl	80001f8 <__aeabi_dsub>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4630      	mov	r0, r6
 80062de:	4639      	mov	r1, r7
 80062e0:	f7fa fbba 	bl	8000a58 <__aeabi_dcmple>
 80062e4:	b150      	cbz	r0, 80062fc <__ieee754_pow+0x7d4>
 80062e6:	a324      	add	r3, pc, #144	; (adr r3, 8006378 <__ieee754_pow+0x850>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f0:	f7fa f936 	bl	8000560 <__aeabi_dmul>
 80062f4:	a320      	add	r3, pc, #128	; (adr r3, 8006378 <__ieee754_pow+0x850>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	e51d      	b.n	8005d38 <__ieee754_pow+0x210>
 80062fc:	4b24      	ldr	r3, [pc, #144]	; (8006390 <__ieee754_pow+0x868>)
 80062fe:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8006302:	4298      	cmp	r0, r3
 8006304:	dd4c      	ble.n	80063a0 <__ieee754_pow+0x878>
 8006306:	1500      	asrs	r0, r0, #20
 8006308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800630c:	f2a0 30fe 	subw	r0, r0, #1022	; 0x3fe
 8006310:	fa43 f000 	asr.w	r0, r3, r0
 8006314:	4428      	add	r0, r5
 8006316:	f3c0 510a 	ubfx	r1, r0, #20, #11
 800631a:	f8df e080 	ldr.w	lr, [pc, #128]	; 800639c <__ieee754_pow+0x874>
 800631e:	f2a1 34ff 	subw	r4, r1, #1023	; 0x3ff
 8006322:	f3c0 0a13 	ubfx	sl, r0, #0, #20
 8006326:	f5c1 6182 	rsb	r1, r1, #1040	; 0x410
 800632a:	fa4e f404 	asr.w	r4, lr, r4
 800632e:	3103      	adds	r1, #3
 8006330:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006334:	ea20 0304 	bic.w	r3, r0, r4
 8006338:	fa4a fa01 	asr.w	sl, sl, r1
 800633c:	2d00      	cmp	r5, #0
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	bfb8      	it	lt
 8006348:	f1ca 0a00 	rsblt	sl, sl, #0
 800634c:	f7f9 ff54 	bl	80001f8 <__aeabi_dsub>
 8006350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006354:	e026      	b.n	80063a4 <__ieee754_pow+0x87c>
 8006356:	bf00      	nop
 8006358:	00000000 	.word	0x00000000
 800635c:	bff00000 	.word	0xbff00000
 8006360:	00000000 	.word	0x00000000
 8006364:	3ff00000 	.word	0x3ff00000
 8006368:	652b82fe 	.word	0x652b82fe
 800636c:	3c971547 	.word	0x3c971547
 8006370:	8800759c 	.word	0x8800759c
 8006374:	7e37e43c 	.word	0x7e37e43c
 8006378:	c2f8f359 	.word	0xc2f8f359
 800637c:	01a56e1f 	.word	0x01a56e1f
 8006380:	08008698 	.word	0x08008698
 8006384:	08008688 	.word	0x08008688
 8006388:	408fffff 	.word	0x408fffff
 800638c:	4090cbff 	.word	0x4090cbff
 8006390:	3fe00000 	.word	0x3fe00000
 8006394:	dc3a03fd 	.word	0xdc3a03fd
 8006398:	3feec709 	.word	0x3feec709
 800639c:	000fffff 	.word	0x000fffff
 80063a0:	f04f 0a00 	mov.w	sl, #0
 80063a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063a8:	4630      	mov	r0, r6
 80063aa:	4639      	mov	r1, r7
 80063ac:	f7f9 ff26 	bl	80001fc <__adddf3>
 80063b0:	2000      	movs	r0, #0
 80063b2:	a36e      	add	r3, pc, #440	; (adr r3, 800656c <__ieee754_pow+0xa44>)
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	f7fa f8d0 	bl	8000560 <__aeabi_dmul>
 80063c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c4:	4680      	mov	r8, r0
 80063c6:	4689      	mov	r9, r1
 80063c8:	4620      	mov	r0, r4
 80063ca:	4629      	mov	r1, r5
 80063cc:	f7f9 ff14 	bl	80001f8 <__aeabi_dsub>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4630      	mov	r0, r6
 80063d6:	4639      	mov	r1, r7
 80063d8:	f7f9 ff0e 	bl	80001f8 <__aeabi_dsub>
 80063dc:	a365      	add	r3, pc, #404	; (adr r3, 8006574 <__ieee754_pow+0xa4c>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f7fa f8bd 	bl	8000560 <__aeabi_dmul>
 80063e6:	a365      	add	r3, pc, #404	; (adr r3, 800657c <__ieee754_pow+0xa54>)
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	4620      	mov	r0, r4
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7fa f8b4 	bl	8000560 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	f7f9 fefc 	bl	80001fc <__adddf3>
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	4632      	mov	r2, r6
 800640a:	463b      	mov	r3, r7
 800640c:	4640      	mov	r0, r8
 800640e:	4649      	mov	r1, r9
 8006410:	f7f9 fef4 	bl	80001fc <__adddf3>
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	f7f9 feec 	bl	80001f8 <__aeabi_dsub>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7f9 fee6 	bl	80001f8 <__aeabi_dsub>
 800642c:	4622      	mov	r2, r4
 800642e:	4680      	mov	r8, r0
 8006430:	4689      	mov	r9, r1
 8006432:	4620      	mov	r0, r4
 8006434:	462b      	mov	r3, r5
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa f892 	bl	8000560 <__aeabi_dmul>
 800643c:	a351      	add	r3, pc, #324	; (adr r3, 8006584 <__ieee754_pow+0xa5c>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	f7fa f88b 	bl	8000560 <__aeabi_dmul>
 800644a:	a350      	add	r3, pc, #320	; (adr r3, 800658c <__ieee754_pow+0xa64>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7f9 fed2 	bl	80001f8 <__aeabi_dsub>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4630      	mov	r0, r6
 800645a:	4639      	mov	r1, r7
 800645c:	f7fa f880 	bl	8000560 <__aeabi_dmul>
 8006460:	a34c      	add	r3, pc, #304	; (adr r3, 8006594 <__ieee754_pow+0xa6c>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7f9 fec9 	bl	80001fc <__adddf3>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4630      	mov	r0, r6
 8006470:	4639      	mov	r1, r7
 8006472:	f7fa f875 	bl	8000560 <__aeabi_dmul>
 8006476:	a349      	add	r3, pc, #292	; (adr r3, 800659c <__ieee754_pow+0xa74>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7f9 febc 	bl	80001f8 <__aeabi_dsub>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4630      	mov	r0, r6
 8006486:	4639      	mov	r1, r7
 8006488:	f7fa f86a 	bl	8000560 <__aeabi_dmul>
 800648c:	a345      	add	r3, pc, #276	; (adr r3, 80065a4 <__ieee754_pow+0xa7c>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 feb3 	bl	80001fc <__adddf3>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	f7fa f85f 	bl	8000560 <__aeabi_dmul>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7f9 fea5 	bl	80001f8 <__aeabi_dsub>
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	4620      	mov	r0, r4
 80064b8:	4629      	mov	r1, r5
 80064ba:	f7fa f851 	bl	8000560 <__aeabi_dmul>
 80064be:	2200      	movs	r2, #0
 80064c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 fe94 	bl	80001f8 <__aeabi_dsub>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d8:	f7fa f96c 	bl	80007b4 <__aeabi_ddiv>
 80064dc:	4642      	mov	r2, r8
 80064de:	4606      	mov	r6, r0
 80064e0:	460f      	mov	r7, r1
 80064e2:	4620      	mov	r0, r4
 80064e4:	464b      	mov	r3, r9
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7fa f83a 	bl	8000560 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7f9 fe82 	bl	80001fc <__adddf3>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 fe7a 	bl	80001f8 <__aeabi_dsub>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	f7f9 fe76 	bl	80001f8 <__aeabi_dsub>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	2000      	movs	r0, #0
 8006512:	4915      	ldr	r1, [pc, #84]	; (8006568 <__ieee754_pow+0xa40>)
 8006514:	f7f9 fe70 	bl	80001f8 <__aeabi_dsub>
 8006518:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800651c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006520:	da07      	bge.n	8006532 <__ieee754_pow+0xa0a>
 8006522:	ec41 0b10 	vmov	d0, r0, r1
 8006526:	4650      	mov	r0, sl
 8006528:	f000 f9c2 	bl	80068b0 <scalbn>
 800652c:	ec53 2b10 	vmov	r2, r3, d0
 8006530:	e001      	b.n	8006536 <__ieee754_pow+0xa0e>
 8006532:	4602      	mov	r2, r0
 8006534:	4623      	mov	r3, r4
 8006536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800653a:	f7ff bbfd 	b.w	8005d38 <__ieee754_pow+0x210>
 800653e:	2000      	movs	r0, #0
 8006540:	4909      	ldr	r1, [pc, #36]	; (8006568 <__ieee754_pow+0xa40>)
 8006542:	e007      	b.n	8006554 <__ieee754_pow+0xa2c>
 8006544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006548:	e004      	b.n	8006554 <__ieee754_pow+0xa2c>
 800654a:	ec51 0b18 	vmov	r0, r1, d8
 800654e:	e001      	b.n	8006554 <__ieee754_pow+0xa2c>
 8006550:	4650      	mov	r0, sl
 8006552:	4659      	mov	r1, fp
 8006554:	ec41 0b10 	vmov	d0, r0, r1
 8006558:	b011      	add	sp, #68	; 0x44
 800655a:	ecbd 8b02 	vpop	{d8}
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
 8006568:	3ff00000 	.word	0x3ff00000
 800656c:	00000000 	.word	0x00000000
 8006570:	3fe62e43 	.word	0x3fe62e43
 8006574:	fefa39ef 	.word	0xfefa39ef
 8006578:	3fe62e42 	.word	0x3fe62e42
 800657c:	0ca86c39 	.word	0x0ca86c39
 8006580:	be205c61 	.word	0xbe205c61
 8006584:	72bea4d0 	.word	0x72bea4d0
 8006588:	3e663769 	.word	0x3e663769
 800658c:	c5d26bf1 	.word	0xc5d26bf1
 8006590:	3ebbbd41 	.word	0x3ebbbd41
 8006594:	af25de2c 	.word	0xaf25de2c
 8006598:	3f11566a 	.word	0x3f11566a
 800659c:	16bebd93 	.word	0x16bebd93
 80065a0:	3f66c16c 	.word	0x3f66c16c
 80065a4:	5555553e 	.word	0x5555553e
 80065a8:	3fc55555 	.word	0x3fc55555
 80065ac:	f3af 8000 	nop.w

080065b0 <__ieee754_sqrt>:
 80065b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b4:	ec57 6b10 	vmov	r6, r7, d0
 80065b8:	f027 4100 	bic.w	r1, r7, #2147483648	; 0x80000000
 80065bc:	0d09      	lsrs	r1, r1, #20
 80065be:	4857      	ldr	r0, [pc, #348]	; (800671c <__ieee754_sqrt+0x16c>)
 80065c0:	0509      	lsls	r1, r1, #20
 80065c2:	4281      	cmp	r1, r0
 80065c4:	463d      	mov	r5, r7
 80065c6:	463b      	mov	r3, r7
 80065c8:	4632      	mov	r2, r6
 80065ca:	d10c      	bne.n	80065e6 <__ieee754_sqrt+0x36>
 80065cc:	ee10 2a10 	vmov	r2, s0
 80065d0:	463b      	mov	r3, r7
 80065d2:	ee10 0a10 	vmov	r0, s0
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7f9 ffc2 	bl	8000560 <__aeabi_dmul>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7f9 fe0c 	bl	80001fc <__adddf3>
 80065e4:	e095      	b.n	8006712 <__ieee754_sqrt+0x162>
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	dc11      	bgt.n	800660e <__ieee754_sqrt+0x5e>
 80065ea:	f027 4100 	bic.w	r1, r7, #2147483648	; 0x80000000
 80065ee:	4331      	orrs	r1, r6
 80065f0:	f000 808c 	beq.w	800670c <__ieee754_sqrt+0x15c>
 80065f4:	b15f      	cbz	r7, 800660e <__ieee754_sqrt+0x5e>
 80065f6:	4632      	mov	r2, r6
 80065f8:	463b      	mov	r3, r7
 80065fa:	ee10 0a10 	vmov	r0, s0
 80065fe:	4639      	mov	r1, r7
 8006600:	f7f9 fdfa 	bl	80001f8 <__aeabi_dsub>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	f7fa f8d4 	bl	80007b4 <__aeabi_ddiv>
 800660c:	e081      	b.n	8006712 <__ieee754_sqrt+0x162>
 800660e:	1529      	asrs	r1, r5, #20
 8006610:	d113      	bne.n	800663a <__ieee754_sqrt+0x8a>
 8006612:	b91b      	cbnz	r3, 800661c <__ieee754_sqrt+0x6c>
 8006614:	0ad3      	lsrs	r3, r2, #11
 8006616:	3915      	subs	r1, #21
 8006618:	0552      	lsls	r2, r2, #21
 800661a:	e7fa      	b.n	8006612 <__ieee754_sqrt+0x62>
 800661c:	2000      	movs	r0, #0
 800661e:	02dd      	lsls	r5, r3, #11
 8006620:	d402      	bmi.n	8006628 <__ieee754_sqrt+0x78>
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	3001      	adds	r0, #1
 8006626:	e7fa      	b.n	800661e <__ieee754_sqrt+0x6e>
 8006628:	f1c0 0401 	rsb	r4, r0, #1
 800662c:	4421      	add	r1, r4
 800662e:	f1c0 0420 	rsb	r4, r0, #32
 8006632:	fa22 f404 	lsr.w	r4, r2, r4
 8006636:	4323      	orrs	r3, r4
 8006638:	4082      	lsls	r2, r0
 800663a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800663e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006642:	07cc      	lsls	r4, r1, #31
 8006644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006648:	d503      	bpl.n	8006652 <__ieee754_sqrt+0xa2>
 800664a:	0fd0      	lsrs	r0, r2, #31
 800664c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006650:	0052      	lsls	r2, r2, #1
 8006652:	ea4f 0c61 	mov.w	ip, r1, asr #1
 8006656:	2400      	movs	r4, #0
 8006658:	0fd1      	lsrs	r1, r2, #31
 800665a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	2116      	movs	r1, #22
 8006662:	4620      	mov	r0, r4
 8006664:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8006668:	1946      	adds	r6, r0, r5
 800666a:	429e      	cmp	r6, r3
 800666c:	dc02      	bgt.n	8006674 <__ieee754_sqrt+0xc4>
 800666e:	1970      	adds	r0, r6, r5
 8006670:	1b9b      	subs	r3, r3, r6
 8006672:	442c      	add	r4, r5
 8006674:	0fd6      	lsrs	r6, r2, #31
 8006676:	3901      	subs	r1, #1
 8006678:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800667c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006680:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8006684:	d1f0      	bne.n	8006668 <__ieee754_sqrt+0xb8>
 8006686:	2720      	movs	r7, #32
 8006688:	4688      	mov	r8, r1
 800668a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800668e:	4298      	cmp	r0, r3
 8006690:	eb05 0608 	add.w	r6, r5, r8
 8006694:	db02      	blt.n	800669c <__ieee754_sqrt+0xec>
 8006696:	d119      	bne.n	80066cc <__ieee754_sqrt+0x11c>
 8006698:	4296      	cmp	r6, r2
 800669a:	d816      	bhi.n	80066ca <__ieee754_sqrt+0x11a>
 800669c:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
 80066a0:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 80066a4:	eb06 0805 	add.w	r8, r6, r5
 80066a8:	d105      	bne.n	80066b6 <__ieee754_sqrt+0x106>
 80066aa:	f1b8 0f00 	cmp.w	r8, #0
 80066ae:	db02      	blt.n	80066b6 <__ieee754_sqrt+0x106>
 80066b0:	f100 0901 	add.w	r9, r0, #1
 80066b4:	e000      	b.n	80066b8 <__ieee754_sqrt+0x108>
 80066b6:	4681      	mov	r9, r0
 80066b8:	1a1b      	subs	r3, r3, r0
 80066ba:	42b2      	cmp	r2, r6
 80066bc:	bf38      	it	cc
 80066be:	f103 33ff 	addcc.w	r3, r3, #4294967295
 80066c2:	1b92      	subs	r2, r2, r6
 80066c4:	4429      	add	r1, r5
 80066c6:	4648      	mov	r0, r9
 80066c8:	e000      	b.n	80066cc <__ieee754_sqrt+0x11c>
 80066ca:	4603      	mov	r3, r0
 80066cc:	0fd6      	lsrs	r6, r2, #31
 80066ce:	3f01      	subs	r7, #1
 80066d0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80066d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80066d8:	ea4f 0555 	mov.w	r5, r5, lsr #1
 80066dc:	d1d7      	bne.n	800668e <__ieee754_sqrt+0xde>
 80066de:	431a      	orrs	r2, r3
 80066e0:	d006      	beq.n	80066f0 <__ieee754_sqrt+0x140>
 80066e2:	1c48      	adds	r0, r1, #1
 80066e4:	bf13      	iteet	ne
 80066e6:	f001 0301 	andne.w	r3, r1, #1
 80066ea:	3401      	addeq	r4, #1
 80066ec:	4639      	moveq	r1, r7
 80066ee:	18c9      	addne	r1, r1, r3
 80066f0:	1062      	asrs	r2, r4, #1
 80066f2:	084b      	lsrs	r3, r1, #1
 80066f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80066f8:	07e1      	lsls	r1, r4, #31
 80066fa:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80066fe:	bf48      	it	mi
 8006700:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006704:	eb02 510c 	add.w	r1, r2, ip, lsl #20
 8006708:	4618      	mov	r0, r3
 800670a:	e002      	b.n	8006712 <__ieee754_sqrt+0x162>
 800670c:	ee10 0a10 	vmov	r0, s0
 8006710:	4639      	mov	r1, r7
 8006712:	ec41 0b10 	vmov	d0, r0, r1
 8006716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671a:	bf00      	nop
 800671c:	7ff00000 	.word	0x7ff00000

08006720 <fabs>:
 8006720:	ec51 0b10 	vmov	r0, r1, d0
 8006724:	ec53 2b10 	vmov	r2, r3, d0
 8006728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800672c:	ec43 2b10 	vmov	d0, r2, r3
 8006730:	4770      	bx	lr

08006732 <finite>:
 8006732:	ec53 2b10 	vmov	r2, r3, d0
 8006736:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800673a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800673e:	0fc0      	lsrs	r0, r0, #31
 8006740:	4770      	bx	lr
	...

08006744 <__fpclassifyd>:
 8006744:	ec51 0b10 	vmov	r0, r1, d0
 8006748:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800674c:	b510      	push	{r4, lr}
 800674e:	d100      	bne.n	8006752 <__fpclassifyd+0xe>
 8006750:	b178      	cbz	r0, 8006772 <__fpclassifyd+0x2e>
 8006752:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <__fpclassifyd+0x40>)
 8006754:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8006758:	4294      	cmp	r4, r2
 800675a:	d90c      	bls.n	8006776 <__fpclassifyd+0x32>
 800675c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006760:	d30b      	bcc.n	800677a <__fpclassifyd+0x36>
 8006762:	4a09      	ldr	r2, [pc, #36]	; (8006788 <__fpclassifyd+0x44>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d10a      	bne.n	800677e <__fpclassifyd+0x3a>
 8006768:	f1d0 0001 	rsbs	r0, r0, #1
 800676c:	bf38      	it	cc
 800676e:	2000      	movcc	r0, #0
 8006770:	bd10      	pop	{r4, pc}
 8006772:	2002      	movs	r0, #2
 8006774:	bd10      	pop	{r4, pc}
 8006776:	2004      	movs	r0, #4
 8006778:	bd10      	pop	{r4, pc}
 800677a:	2003      	movs	r0, #3
 800677c:	bd10      	pop	{r4, pc}
 800677e:	2000      	movs	r0, #0
 8006780:	bd10      	pop	{r4, pc}
 8006782:	bf00      	nop
 8006784:	7fdfffff 	.word	0x7fdfffff
 8006788:	7ff00000 	.word	0x7ff00000

0800678c <matherr>:
 800678c:	2000      	movs	r0, #0
 800678e:	4770      	bx	lr

08006790 <nan>:
 8006790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006798 <nan+0x8>
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	00000000 	.word	0x00000000
 800679c:	7ff80000 	.word	0x7ff80000

080067a0 <rint>:
 80067a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a2:	ec51 0b10 	vmov	r0, r1, d0
 80067a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80067aa:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80067ae:	2b13      	cmp	r3, #19
 80067b0:	468c      	mov	ip, r1
 80067b2:	4607      	mov	r7, r0
 80067b4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80067b8:	dc42      	bgt.n	8006840 <rint+0xa0>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da27      	bge.n	800680e <rint+0x6e>
 80067be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067c2:	4303      	orrs	r3, r0
 80067c4:	d06c      	beq.n	80068a0 <rint+0x100>
 80067c6:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80067ca:	4303      	orrs	r3, r0
 80067cc:	425a      	negs	r2, r3
 80067ce:	431a      	orrs	r2, r3
 80067d0:	0b12      	lsrs	r2, r2, #12
 80067d2:	0c4b      	lsrs	r3, r1, #17
 80067d4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80067d8:	045b      	lsls	r3, r3, #17
 80067da:	ea42 0103 	orr.w	r1, r2, r3
 80067de:	460b      	mov	r3, r1
 80067e0:	4931      	ldr	r1, [pc, #196]	; (80068a8 <rint+0x108>)
 80067e2:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80067e6:	e9d1 4500 	ldrd	r4, r5, [r1]
 80067ea:	4602      	mov	r2, r0
 80067ec:	4629      	mov	r1, r5
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7f9 fd04 	bl	80001fc <__adddf3>
 80067f4:	e9cd 0100 	strd	r0, r1, [sp]
 80067f8:	462b      	mov	r3, r5
 80067fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067fe:	4622      	mov	r2, r4
 8006800:	f7f9 fcfa 	bl	80001f8 <__aeabi_dsub>
 8006804:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006808:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800680c:	e048      	b.n	80068a0 <rint+0x100>
 800680e:	4a27      	ldr	r2, [pc, #156]	; (80068ac <rint+0x10c>)
 8006810:	411a      	asrs	r2, r3
 8006812:	ea02 0701 	and.w	r7, r2, r1
 8006816:	4307      	orrs	r7, r0
 8006818:	d042      	beq.n	80068a0 <rint+0x100>
 800681a:	0852      	lsrs	r2, r2, #1
 800681c:	ea02 0701 	and.w	r7, r2, r1
 8006820:	4307      	orrs	r7, r0
 8006822:	d02a      	beq.n	800687a <rint+0xda>
 8006824:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 8006828:	2b13      	cmp	r3, #19
 800682a:	ea21 0202 	bic.w	r2, r1, r2
 800682e:	fa4c f303 	asr.w	r3, ip, r3
 8006832:	bf14      	ite	ne
 8006834:	2700      	movne	r7, #0
 8006836:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 800683a:	ea42 0c03 	orr.w	ip, r2, r3
 800683e:	e01c      	b.n	800687a <rint+0xda>
 8006840:	2b33      	cmp	r3, #51	; 0x33
 8006842:	dd08      	ble.n	8006856 <rint+0xb6>
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d12a      	bne.n	80068a0 <rint+0x100>
 800684a:	ee10 2a10 	vmov	r2, s0
 800684e:	460b      	mov	r3, r1
 8006850:	f7f9 fcd4 	bl	80001fc <__adddf3>
 8006854:	e024      	b.n	80068a0 <rint+0x100>
 8006856:	f2a2 4313 	subw	r3, r2, #1043	; 0x413
 800685a:	f04f 32ff 	mov.w	r2, #4294967295
 800685e:	40da      	lsrs	r2, r3
 8006860:	4202      	tst	r2, r0
 8006862:	d01d      	beq.n	80068a0 <rint+0x100>
 8006864:	0852      	lsrs	r2, r2, #1
 8006866:	4202      	tst	r2, r0
 8006868:	d007      	beq.n	800687a <rint+0xda>
 800686a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800686e:	ea20 0202 	bic.w	r2, r0, r2
 8006872:	fa47 f303 	asr.w	r3, r7, r3
 8006876:	ea42 0703 	orr.w	r7, r2, r3
 800687a:	490b      	ldr	r1, [pc, #44]	; (80068a8 <rint+0x108>)
 800687c:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8006880:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006884:	4663      	mov	r3, ip
 8006886:	463a      	mov	r2, r7
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7f9 fcb6 	bl	80001fc <__adddf3>
 8006890:	e9cd 0100 	strd	r0, r1, [sp]
 8006894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006898:	4622      	mov	r2, r4
 800689a:	462b      	mov	r3, r5
 800689c:	f7f9 fcac 	bl	80001f8 <__aeabi_dsub>
 80068a0:	ec41 0b10 	vmov	d0, r0, r1
 80068a4:	b003      	add	sp, #12
 80068a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a8:	080086b8 	.word	0x080086b8
 80068ac:	000fffff 	.word	0x000fffff

080068b0 <scalbn>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	eeb0 1a40 	vmov.f32	s2, s0
 80068b6:	eef0 1a60 	vmov.f32	s3, s1
 80068ba:	ec53 2b10 	vmov	r2, r3, d0
 80068be:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80068c2:	4604      	mov	r4, r0
 80068c4:	461d      	mov	r5, r3
 80068c6:	b9a1      	cbnz	r1, 80068f2 <scalbn+0x42>
 80068c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	4313      	orrs	r3, r2
 80068ce:	ec51 0b10 	vmov	r0, r1, d0
 80068d2:	d052      	beq.n	800697a <scalbn+0xca>
 80068d4:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <scalbn+0xe0>)
 80068d6:	4d2f      	ldr	r5, [pc, #188]	; (8006994 <scalbn+0xe4>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fe41 	bl	8000560 <__aeabi_dmul>
 80068de:	42ac      	cmp	r4, r5
 80068e0:	ec41 0b11 	vmov	d1, r0, r1
 80068e4:	460b      	mov	r3, r1
 80068e6:	db37      	blt.n	8006958 <scalbn+0xa8>
 80068e8:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80068ec:	461d      	mov	r5, r3
 80068ee:	3936      	subs	r1, #54	; 0x36
 80068f0:	e00b      	b.n	800690a <scalbn+0x5a>
 80068f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068f6:	4299      	cmp	r1, r3
 80068f8:	d107      	bne.n	800690a <scalbn+0x5a>
 80068fa:	ec51 0b10 	vmov	r0, r1, d0
 80068fe:	ee10 2a10 	vmov	r2, s0
 8006902:	460b      	mov	r3, r1
 8006904:	f7f9 fc7a 	bl	80001fc <__adddf3>
 8006908:	e037      	b.n	800697a <scalbn+0xca>
 800690a:	190b      	adds	r3, r1, r4
 800690c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006910:	4293      	cmp	r3, r2
 8006912:	dc11      	bgt.n	8006938 <scalbn+0x88>
 8006914:	2b00      	cmp	r3, #0
 8006916:	dd08      	ble.n	800692a <scalbn+0x7a>
 8006918:	f025 45ff 	bic.w	r5, r5, #2139095040	; 0x7f800000
 800691c:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
 8006920:	ec51 0b11 	vmov	r0, r1, d1
 8006924:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8006928:	e027      	b.n	800697a <scalbn+0xca>
 800692a:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800692e:	da17      	bge.n	8006960 <scalbn+0xb0>
 8006930:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006934:	429c      	cmp	r4, r3
 8006936:	dd09      	ble.n	800694c <scalbn+0x9c>
 8006938:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006980 <scalbn+0xd0>
 800693c:	f000 f830 	bl	80069a0 <copysign>
 8006940:	a30f      	add	r3, pc, #60	; (adr r3, 8006980 <scalbn+0xd0>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	ec51 0b10 	vmov	r0, r1, d0
 800694a:	e014      	b.n	8006976 <scalbn+0xc6>
 800694c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006988 <scalbn+0xd8>
 8006950:	f000 f826 	bl	80069a0 <copysign>
 8006954:	ec51 0b10 	vmov	r0, r1, d0
 8006958:	a30b      	add	r3, pc, #44	; (adr r3, 8006988 <scalbn+0xd8>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	e00a      	b.n	8006976 <scalbn+0xc6>
 8006960:	f025 45ff 	bic.w	r5, r5, #2139095040	; 0x7f800000
 8006964:	3336      	adds	r3, #54	; 0x36
 8006966:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
 800696a:	ec51 0b11 	vmov	r0, r1, d1
 800696e:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <scalbn+0xe8>)
 8006974:	2200      	movs	r2, #0
 8006976:	f7f9 fdf3 	bl	8000560 <__aeabi_dmul>
 800697a:	ec41 0b10 	vmov	d0, r0, r1
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	8800759c 	.word	0x8800759c
 8006984:	7e37e43c 	.word	0x7e37e43c
 8006988:	c2f8f359 	.word	0xc2f8f359
 800698c:	01a56e1f 	.word	0x01a56e1f
 8006990:	43500000 	.word	0x43500000
 8006994:	ffff3cb0 	.word	0xffff3cb0
 8006998:	3c900000 	.word	0x3c900000
 800699c:	f3af 8000 	nop.w

080069a0 <copysign>:
 80069a0:	b530      	push	{r4, r5, lr}
 80069a2:	ec51 0b10 	vmov	r0, r1, d0
 80069a6:	ec55 4b11 	vmov	r4, r5, d1
 80069aa:	ec53 2b10 	vmov	r2, r3, d0
 80069ae:	f005 4000 	and.w	r0, r5, #2147483648	; 0x80000000
 80069b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80069b6:	ea40 0301 	orr.w	r3, r0, r1
 80069ba:	ec43 2b10 	vmov	d0, r2, r3
 80069be:	bd30      	pop	{r4, r5, pc}

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000124 	.word	0x20000124

080069cc <_init>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr

080069d8 <_fini>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr
